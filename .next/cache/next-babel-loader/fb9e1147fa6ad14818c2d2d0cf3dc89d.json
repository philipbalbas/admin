{"ast":null,"code":"import * as Caml_builtin_exceptions from \"./caml_builtin_exceptions.js\";\n\nfunction caml_array_sub(x, offset, len) {\n  var result = new Array(len);\n  var j = 0;\n  var i = offset;\n\n  while (j < len) {\n    result[j] = x[i];\n    j = j + 1 | 0;\n    i = i + 1 | 0;\n  }\n\n  ;\n  return result;\n}\n\nfunction len(_acc, _l) {\n  while (true) {\n    var l = _l;\n    var acc = _acc;\n\n    if (!l) {\n      return acc;\n    }\n\n    _l = l[1];\n    _acc = l[0].length + acc | 0;\n    continue;\n  }\n\n  ;\n}\n\nfunction fill(arr, _i, _l) {\n  while (true) {\n    var l = _l;\n    var i = _i;\n\n    if (!l) {\n      return;\n    }\n\n    var x = l[0];\n    var l$1 = x.length;\n    var k = i;\n    var j = 0;\n\n    while (j < l$1) {\n      arr[k] = x[j];\n      k = k + 1 | 0;\n      j = j + 1 | 0;\n    }\n\n    ;\n    _l = l[1];\n    _i = k;\n    continue;\n  }\n\n  ;\n}\n\nfunction caml_array_concat(l) {\n  var v = len(0, l);\n  var result = new Array(v);\n  fill(result, 0, l);\n  return result;\n}\n\nfunction caml_array_set(xs, index, newval) {\n  if (index < 0 || index >= xs.length) {\n    throw [Caml_builtin_exceptions.invalid_argument, \"index out of bounds\"];\n  }\n\n  xs[index] = newval;\n}\n\nfunction caml_array_get(xs, index) {\n  if (index < 0 || index >= xs.length) {\n    throw [Caml_builtin_exceptions.invalid_argument, \"index out of bounds\"];\n  }\n\n  return xs[index];\n}\n\nfunction caml_make_vect(len, init) {\n  var b = new Array(len);\n\n  for (var i = 0; i < len; ++i) {\n    b[i] = init;\n  }\n\n  return b;\n}\n\nfunction caml_make_float_vect(len) {\n  var b = new Array(len);\n\n  for (var i = 0; i < len; ++i) {\n    b[i] = 0;\n  }\n\n  return b;\n}\n\nfunction caml_array_blit(a1, i1, a2, i2, len) {\n  if (i2 <= i1) {\n    for (var j = 0; j < len; ++j) {\n      a2[j + i2 | 0] = a1[j + i1 | 0];\n    }\n\n    return;\n  }\n\n  for (var j$1 = len - 1 | 0; j$1 >= 0; --j$1) {\n    a2[j$1 + i2 | 0] = a1[j$1 + i1 | 0];\n  }\n}\n\nfunction caml_array_dup(prim) {\n  return prim.slice(0);\n}\n\nexport { caml_array_dup, caml_array_sub, caml_array_concat, caml_make_vect, caml_make_float_vect, caml_array_blit, caml_array_get, caml_array_set };\n/* No side effect */","map":{"version":3,"sources":["/Users/Yves/Projects/Concenix/AdminPanel/node_modules/bs-platform/lib/es6/caml_array.js"],"names":["Caml_builtin_exceptions","caml_array_sub","x","offset","len","result","Array","j","i","_acc","_l","l","acc","length","fill","arr","_i","l$1","k","caml_array_concat","v","caml_array_set","xs","index","newval","invalid_argument","caml_array_get","caml_make_vect","init","b","caml_make_float_vect","caml_array_blit","a1","i1","a2","i2","j$1","caml_array_dup","prim","slice"],"mappings":"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","sourcesContent":["\n\nimport * as Caml_builtin_exceptions from \"./caml_builtin_exceptions.js\";\n\nfunction caml_array_sub(x, offset, len) {\n  var result = new Array(len);\n  var j = 0;\n  var i = offset;\n  while(j < len) {\n    result[j] = x[i];\n    j = j + 1 | 0;\n    i = i + 1 | 0;\n  };\n  return result;\n}\n\nfunction len(_acc, _l) {\n  while(true) {\n    var l = _l;\n    var acc = _acc;\n    if (!l) {\n      return acc;\n    }\n    _l = l[1];\n    _acc = l[0].length + acc | 0;\n    continue ;\n  };\n}\n\nfunction fill(arr, _i, _l) {\n  while(true) {\n    var l = _l;\n    var i = _i;\n    if (!l) {\n      return ;\n    }\n    var x = l[0];\n    var l$1 = x.length;\n    var k = i;\n    var j = 0;\n    while(j < l$1) {\n      arr[k] = x[j];\n      k = k + 1 | 0;\n      j = j + 1 | 0;\n    };\n    _l = l[1];\n    _i = k;\n    continue ;\n  };\n}\n\nfunction caml_array_concat(l) {\n  var v = len(0, l);\n  var result = new Array(v);\n  fill(result, 0, l);\n  return result;\n}\n\nfunction caml_array_set(xs, index, newval) {\n  if (index < 0 || index >= xs.length) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"index out of bounds\"\n        ];\n  }\n  xs[index] = newval;\n  \n}\n\nfunction caml_array_get(xs, index) {\n  if (index < 0 || index >= xs.length) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"index out of bounds\"\n        ];\n  }\n  return xs[index];\n}\n\nfunction caml_make_vect(len, init) {\n  var b = new Array(len);\n  for(var i = 0; i < len; ++i){\n    b[i] = init;\n  }\n  return b;\n}\n\nfunction caml_make_float_vect(len) {\n  var b = new Array(len);\n  for(var i = 0; i < len; ++i){\n    b[i] = 0;\n  }\n  return b;\n}\n\nfunction caml_array_blit(a1, i1, a2, i2, len) {\n  if (i2 <= i1) {\n    for(var j = 0; j < len; ++j){\n      a2[j + i2 | 0] = a1[j + i1 | 0];\n    }\n    return ;\n  }\n  for(var j$1 = len - 1 | 0; j$1 >= 0; --j$1){\n    a2[j$1 + i2 | 0] = a1[j$1 + i1 | 0];\n  }\n  \n}\n\nfunction caml_array_dup(prim) {\n  return prim.slice(0);\n}\n\nexport {\n  caml_array_dup ,\n  caml_array_sub ,\n  caml_array_concat ,\n  caml_make_vect ,\n  caml_make_float_vect ,\n  caml_array_blit ,\n  caml_array_get ,\n  caml_array_set ,\n  \n}\n/* No side effect */\n"]},"metadata":{},"sourceType":"module"}