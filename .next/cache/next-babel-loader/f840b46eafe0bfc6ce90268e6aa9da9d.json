{"ast":null,"code":"import * as Curry from \"./curry.js\";\nimport * as Caml_obj from \"./caml_obj.js\";\nimport * as Pervasives from \"./pervasives.js\";\nimport * as Caml_option from \"./caml_option.js\";\nimport * as Caml_builtin_exceptions from \"./caml_builtin_exceptions.js\";\n\nfunction length(l) {\n  var _len = 0;\n  var _param = l;\n\n  while (true) {\n    var param = _param;\n    var len = _len;\n\n    if (!param) {\n      return len;\n    }\n\n    _param = param[1];\n    _len = len + 1 | 0;\n    continue;\n  }\n\n  ;\n}\n\nfunction cons(a, l) {\n  return (\n    /* :: */\n    [a, l]\n  );\n}\n\nfunction hd(param) {\n  if (param) {\n    return param[0];\n  }\n\n  throw [Caml_builtin_exceptions.failure, \"hd\"];\n}\n\nfunction tl(param) {\n  if (param) {\n    return param[1];\n  }\n\n  throw [Caml_builtin_exceptions.failure, \"tl\"];\n}\n\nfunction nth(l, n) {\n  if (n < 0) {\n    throw [Caml_builtin_exceptions.invalid_argument, \"List.nth\"];\n  }\n\n  var _l = l;\n  var _n = n;\n\n  while (true) {\n    var n$1 = _n;\n    var l$1 = _l;\n\n    if (l$1) {\n      if (n$1 === 0) {\n        return l$1[0];\n      }\n\n      _n = n$1 - 1 | 0;\n      _l = l$1[1];\n      continue;\n    }\n\n    throw [Caml_builtin_exceptions.failure, \"nth\"];\n  }\n\n  ;\n}\n\nfunction nth_opt(l, n) {\n  if (n < 0) {\n    throw [Caml_builtin_exceptions.invalid_argument, \"List.nth\"];\n  }\n\n  var _l = l;\n  var _n = n;\n\n  while (true) {\n    var n$1 = _n;\n    var l$1 = _l;\n\n    if (!l$1) {\n      return;\n    }\n\n    if (n$1 === 0) {\n      return Caml_option.some(l$1[0]);\n    }\n\n    _n = n$1 - 1 | 0;\n    _l = l$1[1];\n    continue;\n  }\n\n  ;\n}\n\nfunction rev_append(_l1, _l2) {\n  while (true) {\n    var l2 = _l2;\n    var l1 = _l1;\n\n    if (!l1) {\n      return l2;\n    }\n\n    _l2 =\n    /* :: */\n    [l1[0], l2];\n    _l1 = l1[1];\n    continue;\n  }\n\n  ;\n}\n\nfunction rev(l) {\n  return rev_append(l,\n  /* [] */\n  0);\n}\n\nfunction init_tailrec_aux(_acc, _i, n, f) {\n  while (true) {\n    var i = _i;\n    var acc = _acc;\n\n    if (i >= n) {\n      return acc;\n    }\n\n    _i = i + 1 | 0;\n    _acc =\n    /* :: */\n    [Curry._1(f, i), acc];\n    continue;\n  }\n\n  ;\n}\n\nfunction init_aux(i, n, f) {\n  if (i >= n) {\n    return (\n      /* [] */\n      0\n    );\n  }\n\n  var r = Curry._1(f, i);\n\n  return (\n    /* :: */\n    [r, init_aux(i + 1 | 0, n, f)]\n  );\n}\n\nfunction init(len, f) {\n  if (len < 0) {\n    throw [Caml_builtin_exceptions.invalid_argument, \"List.init\"];\n  }\n\n  if (len > 10000) {\n    return rev_append(init_tailrec_aux(\n    /* [] */\n    0, 0, len, f),\n    /* [] */\n    0);\n  } else {\n    return init_aux(0, len, f);\n  }\n}\n\nfunction flatten(param) {\n  if (param) {\n    return Pervasives.$at(param[0], flatten(param[1]));\n  } else {\n    return (\n      /* [] */\n      0\n    );\n  }\n}\n\nfunction map(f, param) {\n  if (!param) {\n    return (\n      /* [] */\n      0\n    );\n  }\n\n  var r = Curry._1(f, param[0]);\n\n  return (\n    /* :: */\n    [r, map(f, param[1])]\n  );\n}\n\nfunction mapi(i, f, param) {\n  if (!param) {\n    return (\n      /* [] */\n      0\n    );\n  }\n\n  var r = Curry._2(f, i, param[0]);\n\n  return (\n    /* :: */\n    [r, mapi(i + 1 | 0, f, param[1])]\n  );\n}\n\nfunction mapi$1(f, l) {\n  return mapi(0, f, l);\n}\n\nfunction rev_map(f, l) {\n  var _accu =\n  /* [] */\n  0;\n  var _param = l;\n\n  while (true) {\n    var param = _param;\n    var accu = _accu;\n\n    if (!param) {\n      return accu;\n    }\n\n    _param = param[1];\n    _accu =\n    /* :: */\n    [Curry._1(f, param[0]), accu];\n    continue;\n  }\n\n  ;\n}\n\nfunction iter(f, _param) {\n  while (true) {\n    var param = _param;\n\n    if (!param) {\n      return;\n    }\n\n    Curry._1(f, param[0]);\n\n    _param = param[1];\n    continue;\n  }\n\n  ;\n}\n\nfunction iteri(f, l) {\n  var _i = 0;\n  var _param = l;\n\n  while (true) {\n    var param = _param;\n    var i = _i;\n\n    if (!param) {\n      return;\n    }\n\n    Curry._2(f, i, param[0]);\n\n    _param = param[1];\n    _i = i + 1 | 0;\n    continue;\n  }\n\n  ;\n}\n\nfunction fold_left(f, _accu, _l) {\n  while (true) {\n    var l = _l;\n    var accu = _accu;\n\n    if (!l) {\n      return accu;\n    }\n\n    _l = l[1];\n    _accu = Curry._2(f, accu, l[0]);\n    continue;\n  }\n\n  ;\n}\n\nfunction fold_right(f, l, accu) {\n  if (l) {\n    return Curry._2(f, l[0], fold_right(f, l[1], accu));\n  } else {\n    return accu;\n  }\n}\n\nfunction map2(f, l1, l2) {\n  if (l1) {\n    if (l2) {\n      var r = Curry._2(f, l1[0], l2[0]);\n\n      return (\n        /* :: */\n        [r, map2(f, l1[1], l2[1])]\n      );\n    }\n\n    throw [Caml_builtin_exceptions.invalid_argument, \"List.map2\"];\n  }\n\n  if (!l2) {\n    return (\n      /* [] */\n      0\n    );\n  }\n\n  throw [Caml_builtin_exceptions.invalid_argument, \"List.map2\"];\n}\n\nfunction rev_map2(f, l1, l2) {\n  var _accu =\n  /* [] */\n  0;\n  var _l1 = l1;\n  var _l2 = l2;\n\n  while (true) {\n    var l2$1 = _l2;\n    var l1$1 = _l1;\n    var accu = _accu;\n\n    if (l1$1) {\n      if (l2$1) {\n        _l2 = l2$1[1];\n        _l1 = l1$1[1];\n        _accu =\n        /* :: */\n        [Curry._2(f, l1$1[0], l2$1[0]), accu];\n        continue;\n      }\n\n      throw [Caml_builtin_exceptions.invalid_argument, \"List.rev_map2\"];\n    }\n\n    if (l2$1) {\n      throw [Caml_builtin_exceptions.invalid_argument, \"List.rev_map2\"];\n    }\n\n    return accu;\n  }\n\n  ;\n}\n\nfunction iter2(f, _l1, _l2) {\n  while (true) {\n    var l2 = _l2;\n    var l1 = _l1;\n\n    if (l1) {\n      if (l2) {\n        Curry._2(f, l1[0], l2[0]);\n\n        _l2 = l2[1];\n        _l1 = l1[1];\n        continue;\n      }\n\n      throw [Caml_builtin_exceptions.invalid_argument, \"List.iter2\"];\n    }\n\n    if (!l2) {\n      return;\n    }\n\n    throw [Caml_builtin_exceptions.invalid_argument, \"List.iter2\"];\n  }\n\n  ;\n}\n\nfunction fold_left2(f, _accu, _l1, _l2) {\n  while (true) {\n    var l2 = _l2;\n    var l1 = _l1;\n    var accu = _accu;\n\n    if (l1) {\n      if (l2) {\n        _l2 = l2[1];\n        _l1 = l1[1];\n        _accu = Curry._3(f, accu, l1[0], l2[0]);\n        continue;\n      }\n\n      throw [Caml_builtin_exceptions.invalid_argument, \"List.fold_left2\"];\n    }\n\n    if (l2) {\n      throw [Caml_builtin_exceptions.invalid_argument, \"List.fold_left2\"];\n    }\n\n    return accu;\n  }\n\n  ;\n}\n\nfunction fold_right2(f, l1, l2, accu) {\n  if (l1) {\n    if (l2) {\n      return Curry._3(f, l1[0], l2[0], fold_right2(f, l1[1], l2[1], accu));\n    }\n\n    throw [Caml_builtin_exceptions.invalid_argument, \"List.fold_right2\"];\n  }\n\n  if (l2) {\n    throw [Caml_builtin_exceptions.invalid_argument, \"List.fold_right2\"];\n  }\n\n  return accu;\n}\n\nfunction for_all(p, _param) {\n  while (true) {\n    var param = _param;\n\n    if (!param) {\n      return true;\n    }\n\n    if (!Curry._1(p, param[0])) {\n      return false;\n    }\n\n    _param = param[1];\n    continue;\n  }\n\n  ;\n}\n\nfunction exists(p, _param) {\n  while (true) {\n    var param = _param;\n\n    if (!param) {\n      return false;\n    }\n\n    if (Curry._1(p, param[0])) {\n      return true;\n    }\n\n    _param = param[1];\n    continue;\n  }\n\n  ;\n}\n\nfunction for_all2(p, _l1, _l2) {\n  while (true) {\n    var l2 = _l2;\n    var l1 = _l1;\n\n    if (l1) {\n      if (l2) {\n        if (!Curry._2(p, l1[0], l2[0])) {\n          return false;\n        }\n\n        _l2 = l2[1];\n        _l1 = l1[1];\n        continue;\n      }\n\n      throw [Caml_builtin_exceptions.invalid_argument, \"List.for_all2\"];\n    }\n\n    if (!l2) {\n      return true;\n    }\n\n    throw [Caml_builtin_exceptions.invalid_argument, \"List.for_all2\"];\n  }\n\n  ;\n}\n\nfunction exists2(p, _l1, _l2) {\n  while (true) {\n    var l2 = _l2;\n    var l1 = _l1;\n\n    if (l1) {\n      if (l2) {\n        if (Curry._2(p, l1[0], l2[0])) {\n          return true;\n        }\n\n        _l2 = l2[1];\n        _l1 = l1[1];\n        continue;\n      }\n\n      throw [Caml_builtin_exceptions.invalid_argument, \"List.exists2\"];\n    }\n\n    if (!l2) {\n      return false;\n    }\n\n    throw [Caml_builtin_exceptions.invalid_argument, \"List.exists2\"];\n  }\n\n  ;\n}\n\nfunction mem(x, _param) {\n  while (true) {\n    var param = _param;\n\n    if (!param) {\n      return false;\n    }\n\n    if (Caml_obj.caml_equal(param[0], x)) {\n      return true;\n    }\n\n    _param = param[1];\n    continue;\n  }\n\n  ;\n}\n\nfunction memq(x, _param) {\n  while (true) {\n    var param = _param;\n\n    if (!param) {\n      return false;\n    }\n\n    if (param[0] === x) {\n      return true;\n    }\n\n    _param = param[1];\n    continue;\n  }\n\n  ;\n}\n\nfunction assoc(x, _param) {\n  while (true) {\n    var param = _param;\n\n    if (param) {\n      var match = param[0];\n\n      if (Caml_obj.caml_equal(match[0], x)) {\n        return match[1];\n      }\n\n      _param = param[1];\n      continue;\n    }\n\n    throw Caml_builtin_exceptions.not_found;\n  }\n\n  ;\n}\n\nfunction assoc_opt(x, _param) {\n  while (true) {\n    var param = _param;\n\n    if (!param) {\n      return;\n    }\n\n    var match = param[0];\n\n    if (Caml_obj.caml_equal(match[0], x)) {\n      return Caml_option.some(match[1]);\n    }\n\n    _param = param[1];\n    continue;\n  }\n\n  ;\n}\n\nfunction assq(x, _param) {\n  while (true) {\n    var param = _param;\n\n    if (param) {\n      var match = param[0];\n\n      if (match[0] === x) {\n        return match[1];\n      }\n\n      _param = param[1];\n      continue;\n    }\n\n    throw Caml_builtin_exceptions.not_found;\n  }\n\n  ;\n}\n\nfunction assq_opt(x, _param) {\n  while (true) {\n    var param = _param;\n\n    if (!param) {\n      return;\n    }\n\n    var match = param[0];\n\n    if (match[0] === x) {\n      return Caml_option.some(match[1]);\n    }\n\n    _param = param[1];\n    continue;\n  }\n\n  ;\n}\n\nfunction mem_assoc(x, _param) {\n  while (true) {\n    var param = _param;\n\n    if (!param) {\n      return false;\n    }\n\n    if (Caml_obj.caml_equal(param[0][0], x)) {\n      return true;\n    }\n\n    _param = param[1];\n    continue;\n  }\n\n  ;\n}\n\nfunction mem_assq(x, _param) {\n  while (true) {\n    var param = _param;\n\n    if (!param) {\n      return false;\n    }\n\n    if (param[0][0] === x) {\n      return true;\n    }\n\n    _param = param[1];\n    continue;\n  }\n\n  ;\n}\n\nfunction remove_assoc(x, param) {\n  if (!param) {\n    return (\n      /* [] */\n      0\n    );\n  }\n\n  var l = param[1];\n  var pair = param[0];\n\n  if (Caml_obj.caml_equal(pair[0], x)) {\n    return l;\n  } else {\n    return (\n      /* :: */\n      [pair, remove_assoc(x, l)]\n    );\n  }\n}\n\nfunction remove_assq(x, param) {\n  if (!param) {\n    return (\n      /* [] */\n      0\n    );\n  }\n\n  var l = param[1];\n  var pair = param[0];\n\n  if (pair[0] === x) {\n    return l;\n  } else {\n    return (\n      /* :: */\n      [pair, remove_assq(x, l)]\n    );\n  }\n}\n\nfunction find(p, _param) {\n  while (true) {\n    var param = _param;\n\n    if (param) {\n      var x = param[0];\n\n      if (Curry._1(p, x)) {\n        return x;\n      }\n\n      _param = param[1];\n      continue;\n    }\n\n    throw Caml_builtin_exceptions.not_found;\n  }\n\n  ;\n}\n\nfunction find_opt(p, _param) {\n  while (true) {\n    var param = _param;\n\n    if (!param) {\n      return;\n    }\n\n    var x = param[0];\n\n    if (Curry._1(p, x)) {\n      return Caml_option.some(x);\n    }\n\n    _param = param[1];\n    continue;\n  }\n\n  ;\n}\n\nfunction find_all(p) {\n  return function (param) {\n    var _accu =\n    /* [] */\n    0;\n    var _param = param;\n\n    while (true) {\n      var param$1 = _param;\n      var accu = _accu;\n\n      if (!param$1) {\n        return rev_append(accu,\n        /* [] */\n        0);\n      }\n\n      var l = param$1[1];\n      var x = param$1[0];\n\n      if (Curry._1(p, x)) {\n        _param = l;\n        _accu =\n        /* :: */\n        [x, accu];\n        continue;\n      }\n\n      _param = l;\n      continue;\n    }\n\n    ;\n  };\n}\n\nfunction partition(p, l) {\n  var _yes =\n  /* [] */\n  0;\n  var _no =\n  /* [] */\n  0;\n  var _param = l;\n\n  while (true) {\n    var param = _param;\n    var no = _no;\n    var yes = _yes;\n\n    if (!param) {\n      return (\n        /* tuple */\n        [rev_append(yes,\n        /* [] */\n        0), rev_append(no,\n        /* [] */\n        0)]\n      );\n    }\n\n    var l$1 = param[1];\n    var x = param[0];\n\n    if (Curry._1(p, x)) {\n      _param = l$1;\n      _yes =\n      /* :: */\n      [x, yes];\n      continue;\n    }\n\n    _param = l$1;\n    _no =\n    /* :: */\n    [x, no];\n    continue;\n  }\n\n  ;\n}\n\nfunction split(param) {\n  if (!param) {\n    return (\n      /* tuple */\n      [\n      /* [] */\n      0,\n      /* [] */\n      0]\n    );\n  }\n\n  var match = param[0];\n  var match$1 = split(param[1]);\n  return (\n    /* tuple */\n    [\n    /* :: */\n    [match[0], match$1[0]],\n    /* :: */\n    [match[1], match$1[1]]]\n  );\n}\n\nfunction combine(l1, l2) {\n  if (l1) {\n    if (l2) {\n      return (\n        /* :: */\n        [\n        /* tuple */\n        [l1[0], l2[0]], combine(l1[1], l2[1])]\n      );\n    }\n\n    throw [Caml_builtin_exceptions.invalid_argument, \"List.combine\"];\n  }\n\n  if (!l2) {\n    return (\n      /* [] */\n      0\n    );\n  }\n\n  throw [Caml_builtin_exceptions.invalid_argument, \"List.combine\"];\n}\n\nfunction merge(cmp, l1, l2) {\n  if (!l1) {\n    return l2;\n  }\n\n  if (!l2) {\n    return l1;\n  }\n\n  var h2 = l2[0];\n  var h1 = l1[0];\n\n  if (Curry._2(cmp, h1, h2) <= 0) {\n    return (\n      /* :: */\n      [h1, merge(cmp, l1[1], l2)]\n    );\n  } else {\n    return (\n      /* :: */\n      [h2, merge(cmp, l1, l2[1])]\n    );\n  }\n}\n\nfunction chop(_k, _l) {\n  while (true) {\n    var l = _l;\n    var k = _k;\n\n    if (k === 0) {\n      return l;\n    }\n\n    if (l) {\n      _l = l[1];\n      _k = k - 1 | 0;\n      continue;\n    }\n\n    throw [Caml_builtin_exceptions.assert_failure,\n    /* tuple */\n    [\"list.ml\", 262, 11]];\n  }\n\n  ;\n}\n\nfunction stable_sort(cmp, l) {\n  var sort = function sort(n, l) {\n    if (n !== 2) {\n      if (n === 3 && l) {\n        var match = l[1];\n\n        if (match) {\n          var match$1 = match[1];\n\n          if (match$1) {\n            var x3 = match$1[0];\n            var x2 = match[0];\n            var x1 = l[0];\n\n            if (Curry._2(cmp, x1, x2) <= 0) {\n              if (Curry._2(cmp, x2, x3) <= 0) {\n                return (\n                  /* :: */\n                  [x1,\n                  /* :: */\n                  [x2,\n                  /* :: */\n                  [x3,\n                  /* [] */\n                  0]]]\n                );\n              } else if (Curry._2(cmp, x1, x3) <= 0) {\n                return (\n                  /* :: */\n                  [x1,\n                  /* :: */\n                  [x3,\n                  /* :: */\n                  [x2,\n                  /* [] */\n                  0]]]\n                );\n              } else {\n                return (\n                  /* :: */\n                  [x3,\n                  /* :: */\n                  [x1,\n                  /* :: */\n                  [x2,\n                  /* [] */\n                  0]]]\n                );\n              }\n            } else if (Curry._2(cmp, x1, x3) <= 0) {\n              return (\n                /* :: */\n                [x2,\n                /* :: */\n                [x1,\n                /* :: */\n                [x3,\n                /* [] */\n                0]]]\n              );\n            } else if (Curry._2(cmp, x2, x3) <= 0) {\n              return (\n                /* :: */\n                [x2,\n                /* :: */\n                [x3,\n                /* :: */\n                [x1,\n                /* [] */\n                0]]]\n              );\n            } else {\n              return (\n                /* :: */\n                [x3,\n                /* :: */\n                [x2,\n                /* :: */\n                [x1,\n                /* [] */\n                0]]]\n              );\n            }\n          }\n        }\n      }\n    } else if (l) {\n      var match$2 = l[1];\n\n      if (match$2) {\n        var x2$1 = match$2[0];\n        var x1$1 = l[0];\n\n        if (Curry._2(cmp, x1$1, x2$1) <= 0) {\n          return (\n            /* :: */\n            [x1$1,\n            /* :: */\n            [x2$1,\n            /* [] */\n            0]]\n          );\n        } else {\n          return (\n            /* :: */\n            [x2$1,\n            /* :: */\n            [x1$1,\n            /* [] */\n            0]]\n          );\n        }\n      }\n    }\n\n    var n1 = n >> 1;\n    var n2 = n - n1 | 0;\n    var l2 = chop(n1, l);\n    var s1 = rev_sort(n1, l);\n    var s2 = rev_sort(n2, l2);\n    var _l1 = s1;\n    var _l2 = s2;\n    var _accu =\n    /* [] */\n    0;\n\n    while (true) {\n      var accu = _accu;\n      var l2$1 = _l2;\n      var l1 = _l1;\n\n      if (!l1) {\n        return rev_append(l2$1, accu);\n      }\n\n      if (!l2$1) {\n        return rev_append(l1, accu);\n      }\n\n      var h2 = l2$1[0];\n      var h1 = l1[0];\n\n      if (Curry._2(cmp, h1, h2) > 0) {\n        _accu =\n        /* :: */\n        [h1, accu];\n        _l1 = l1[1];\n        continue;\n      }\n\n      _accu =\n      /* :: */\n      [h2, accu];\n      _l2 = l2$1[1];\n      continue;\n    }\n\n    ;\n  };\n\n  var rev_sort = function rev_sort(n, l) {\n    if (n !== 2) {\n      if (n === 3 && l) {\n        var match = l[1];\n\n        if (match) {\n          var match$1 = match[1];\n\n          if (match$1) {\n            var x3 = match$1[0];\n            var x2 = match[0];\n            var x1 = l[0];\n\n            if (Curry._2(cmp, x1, x2) > 0) {\n              if (Curry._2(cmp, x2, x3) > 0) {\n                return (\n                  /* :: */\n                  [x1,\n                  /* :: */\n                  [x2,\n                  /* :: */\n                  [x3,\n                  /* [] */\n                  0]]]\n                );\n              } else if (Curry._2(cmp, x1, x3) > 0) {\n                return (\n                  /* :: */\n                  [x1,\n                  /* :: */\n                  [x3,\n                  /* :: */\n                  [x2,\n                  /* [] */\n                  0]]]\n                );\n              } else {\n                return (\n                  /* :: */\n                  [x3,\n                  /* :: */\n                  [x1,\n                  /* :: */\n                  [x2,\n                  /* [] */\n                  0]]]\n                );\n              }\n            } else if (Curry._2(cmp, x1, x3) > 0) {\n              return (\n                /* :: */\n                [x2,\n                /* :: */\n                [x1,\n                /* :: */\n                [x3,\n                /* [] */\n                0]]]\n              );\n            } else if (Curry._2(cmp, x2, x3) > 0) {\n              return (\n                /* :: */\n                [x2,\n                /* :: */\n                [x3,\n                /* :: */\n                [x1,\n                /* [] */\n                0]]]\n              );\n            } else {\n              return (\n                /* :: */\n                [x3,\n                /* :: */\n                [x2,\n                /* :: */\n                [x1,\n                /* [] */\n                0]]]\n              );\n            }\n          }\n        }\n      }\n    } else if (l) {\n      var match$2 = l[1];\n\n      if (match$2) {\n        var x2$1 = match$2[0];\n        var x1$1 = l[0];\n\n        if (Curry._2(cmp, x1$1, x2$1) > 0) {\n          return (\n            /* :: */\n            [x1$1,\n            /* :: */\n            [x2$1,\n            /* [] */\n            0]]\n          );\n        } else {\n          return (\n            /* :: */\n            [x2$1,\n            /* :: */\n            [x1$1,\n            /* [] */\n            0]]\n          );\n        }\n      }\n    }\n\n    var n1 = n >> 1;\n    var n2 = n - n1 | 0;\n    var l2 = chop(n1, l);\n    var s1 = sort(n1, l);\n    var s2 = sort(n2, l2);\n    var _l1 = s1;\n    var _l2 = s2;\n    var _accu =\n    /* [] */\n    0;\n\n    while (true) {\n      var accu = _accu;\n      var l2$1 = _l2;\n      var l1 = _l1;\n\n      if (!l1) {\n        return rev_append(l2$1, accu);\n      }\n\n      if (!l2$1) {\n        return rev_append(l1, accu);\n      }\n\n      var h2 = l2$1[0];\n      var h1 = l1[0];\n\n      if (Curry._2(cmp, h1, h2) <= 0) {\n        _accu =\n        /* :: */\n        [h1, accu];\n        _l1 = l1[1];\n        continue;\n      }\n\n      _accu =\n      /* :: */\n      [h2, accu];\n      _l2 = l2$1[1];\n      continue;\n    }\n\n    ;\n  };\n\n  var len = length(l);\n\n  if (len < 2) {\n    return l;\n  } else {\n    return sort(len, l);\n  }\n}\n\nfunction sort_uniq(cmp, l) {\n  var sort = function sort(n, l) {\n    if (n !== 2) {\n      if (n === 3 && l) {\n        var match = l[1];\n\n        if (match) {\n          var match$1 = match[1];\n\n          if (match$1) {\n            var x3 = match$1[0];\n            var x2 = match[0];\n            var x1 = l[0];\n\n            var c = Curry._2(cmp, x1, x2);\n\n            if (c === 0) {\n              var c$1 = Curry._2(cmp, x2, x3);\n\n              if (c$1 === 0) {\n                return (\n                  /* :: */\n                  [x2,\n                  /* [] */\n                  0]\n                );\n              } else if (c$1 < 0) {\n                return (\n                  /* :: */\n                  [x2,\n                  /* :: */\n                  [x3,\n                  /* [] */\n                  0]]\n                );\n              } else {\n                return (\n                  /* :: */\n                  [x3,\n                  /* :: */\n                  [x2,\n                  /* [] */\n                  0]]\n                );\n              }\n            }\n\n            if (c < 0) {\n              var c$2 = Curry._2(cmp, x2, x3);\n\n              if (c$2 === 0) {\n                return (\n                  /* :: */\n                  [x1,\n                  /* :: */\n                  [x2,\n                  /* [] */\n                  0]]\n                );\n              }\n\n              if (c$2 < 0) {\n                return (\n                  /* :: */\n                  [x1,\n                  /* :: */\n                  [x2,\n                  /* :: */\n                  [x3,\n                  /* [] */\n                  0]]]\n                );\n              }\n\n              var c$3 = Curry._2(cmp, x1, x3);\n\n              if (c$3 === 0) {\n                return (\n                  /* :: */\n                  [x1,\n                  /* :: */\n                  [x2,\n                  /* [] */\n                  0]]\n                );\n              } else if (c$3 < 0) {\n                return (\n                  /* :: */\n                  [x1,\n                  /* :: */\n                  [x3,\n                  /* :: */\n                  [x2,\n                  /* [] */\n                  0]]]\n                );\n              } else {\n                return (\n                  /* :: */\n                  [x3,\n                  /* :: */\n                  [x1,\n                  /* :: */\n                  [x2,\n                  /* [] */\n                  0]]]\n                );\n              }\n            }\n\n            var c$4 = Curry._2(cmp, x1, x3);\n\n            if (c$4 === 0) {\n              return (\n                /* :: */\n                [x2,\n                /* :: */\n                [x1,\n                /* [] */\n                0]]\n              );\n            }\n\n            if (c$4 < 0) {\n              return (\n                /* :: */\n                [x2,\n                /* :: */\n                [x1,\n                /* :: */\n                [x3,\n                /* [] */\n                0]]]\n              );\n            }\n\n            var c$5 = Curry._2(cmp, x2, x3);\n\n            if (c$5 === 0) {\n              return (\n                /* :: */\n                [x2,\n                /* :: */\n                [x1,\n                /* [] */\n                0]]\n              );\n            } else if (c$5 < 0) {\n              return (\n                /* :: */\n                [x2,\n                /* :: */\n                [x3,\n                /* :: */\n                [x1,\n                /* [] */\n                0]]]\n              );\n            } else {\n              return (\n                /* :: */\n                [x3,\n                /* :: */\n                [x2,\n                /* :: */\n                [x1,\n                /* [] */\n                0]]]\n              );\n            }\n          }\n        }\n      }\n    } else if (l) {\n      var match$2 = l[1];\n\n      if (match$2) {\n        var x2$1 = match$2[0];\n        var x1$1 = l[0];\n\n        var c$6 = Curry._2(cmp, x1$1, x2$1);\n\n        if (c$6 === 0) {\n          return (\n            /* :: */\n            [x1$1,\n            /* [] */\n            0]\n          );\n        } else if (c$6 < 0) {\n          return (\n            /* :: */\n            [x1$1,\n            /* :: */\n            [x2$1,\n            /* [] */\n            0]]\n          );\n        } else {\n          return (\n            /* :: */\n            [x2$1,\n            /* :: */\n            [x1$1,\n            /* [] */\n            0]]\n          );\n        }\n      }\n    }\n\n    var n1 = n >> 1;\n    var n2 = n - n1 | 0;\n    var l2 = chop(n1, l);\n    var s1 = rev_sort(n1, l);\n    var s2 = rev_sort(n2, l2);\n    var _l1 = s1;\n    var _l2 = s2;\n    var _accu =\n    /* [] */\n    0;\n\n    while (true) {\n      var accu = _accu;\n      var l2$1 = _l2;\n      var l1 = _l1;\n\n      if (!l1) {\n        return rev_append(l2$1, accu);\n      }\n\n      if (!l2$1) {\n        return rev_append(l1, accu);\n      }\n\n      var t2 = l2$1[1];\n      var h2 = l2$1[0];\n      var t1 = l1[1];\n      var h1 = l1[0];\n\n      var c$7 = Curry._2(cmp, h1, h2);\n\n      if (c$7 === 0) {\n        _accu =\n        /* :: */\n        [h1, accu];\n        _l2 = t2;\n        _l1 = t1;\n        continue;\n      }\n\n      if (c$7 > 0) {\n        _accu =\n        /* :: */\n        [h1, accu];\n        _l1 = t1;\n        continue;\n      }\n\n      _accu =\n      /* :: */\n      [h2, accu];\n      _l2 = t2;\n      continue;\n    }\n\n    ;\n  };\n\n  var rev_sort = function rev_sort(n, l) {\n    if (n !== 2) {\n      if (n === 3 && l) {\n        var match = l[1];\n\n        if (match) {\n          var match$1 = match[1];\n\n          if (match$1) {\n            var x3 = match$1[0];\n            var x2 = match[0];\n            var x1 = l[0];\n\n            var c = Curry._2(cmp, x1, x2);\n\n            if (c === 0) {\n              var c$1 = Curry._2(cmp, x2, x3);\n\n              if (c$1 === 0) {\n                return (\n                  /* :: */\n                  [x2,\n                  /* [] */\n                  0]\n                );\n              } else if (c$1 > 0) {\n                return (\n                  /* :: */\n                  [x2,\n                  /* :: */\n                  [x3,\n                  /* [] */\n                  0]]\n                );\n              } else {\n                return (\n                  /* :: */\n                  [x3,\n                  /* :: */\n                  [x2,\n                  /* [] */\n                  0]]\n                );\n              }\n            }\n\n            if (c > 0) {\n              var c$2 = Curry._2(cmp, x2, x3);\n\n              if (c$2 === 0) {\n                return (\n                  /* :: */\n                  [x1,\n                  /* :: */\n                  [x2,\n                  /* [] */\n                  0]]\n                );\n              }\n\n              if (c$2 > 0) {\n                return (\n                  /* :: */\n                  [x1,\n                  /* :: */\n                  [x2,\n                  /* :: */\n                  [x3,\n                  /* [] */\n                  0]]]\n                );\n              }\n\n              var c$3 = Curry._2(cmp, x1, x3);\n\n              if (c$3 === 0) {\n                return (\n                  /* :: */\n                  [x1,\n                  /* :: */\n                  [x2,\n                  /* [] */\n                  0]]\n                );\n              } else if (c$3 > 0) {\n                return (\n                  /* :: */\n                  [x1,\n                  /* :: */\n                  [x3,\n                  /* :: */\n                  [x2,\n                  /* [] */\n                  0]]]\n                );\n              } else {\n                return (\n                  /* :: */\n                  [x3,\n                  /* :: */\n                  [x1,\n                  /* :: */\n                  [x2,\n                  /* [] */\n                  0]]]\n                );\n              }\n            }\n\n            var c$4 = Curry._2(cmp, x1, x3);\n\n            if (c$4 === 0) {\n              return (\n                /* :: */\n                [x2,\n                /* :: */\n                [x1,\n                /* [] */\n                0]]\n              );\n            }\n\n            if (c$4 > 0) {\n              return (\n                /* :: */\n                [x2,\n                /* :: */\n                [x1,\n                /* :: */\n                [x3,\n                /* [] */\n                0]]]\n              );\n            }\n\n            var c$5 = Curry._2(cmp, x2, x3);\n\n            if (c$5 === 0) {\n              return (\n                /* :: */\n                [x2,\n                /* :: */\n                [x1,\n                /* [] */\n                0]]\n              );\n            } else if (c$5 > 0) {\n              return (\n                /* :: */\n                [x2,\n                /* :: */\n                [x3,\n                /* :: */\n                [x1,\n                /* [] */\n                0]]]\n              );\n            } else {\n              return (\n                /* :: */\n                [x3,\n                /* :: */\n                [x2,\n                /* :: */\n                [x1,\n                /* [] */\n                0]]]\n              );\n            }\n          }\n        }\n      }\n    } else if (l) {\n      var match$2 = l[1];\n\n      if (match$2) {\n        var x2$1 = match$2[0];\n        var x1$1 = l[0];\n\n        var c$6 = Curry._2(cmp, x1$1, x2$1);\n\n        if (c$6 === 0) {\n          return (\n            /* :: */\n            [x1$1,\n            /* [] */\n            0]\n          );\n        } else if (c$6 > 0) {\n          return (\n            /* :: */\n            [x1$1,\n            /* :: */\n            [x2$1,\n            /* [] */\n            0]]\n          );\n        } else {\n          return (\n            /* :: */\n            [x2$1,\n            /* :: */\n            [x1$1,\n            /* [] */\n            0]]\n          );\n        }\n      }\n    }\n\n    var n1 = n >> 1;\n    var n2 = n - n1 | 0;\n    var l2 = chop(n1, l);\n    var s1 = sort(n1, l);\n    var s2 = sort(n2, l2);\n    var _l1 = s1;\n    var _l2 = s2;\n    var _accu =\n    /* [] */\n    0;\n\n    while (true) {\n      var accu = _accu;\n      var l2$1 = _l2;\n      var l1 = _l1;\n\n      if (!l1) {\n        return rev_append(l2$1, accu);\n      }\n\n      if (!l2$1) {\n        return rev_append(l1, accu);\n      }\n\n      var t2 = l2$1[1];\n      var h2 = l2$1[0];\n      var t1 = l1[1];\n      var h1 = l1[0];\n\n      var c$7 = Curry._2(cmp, h1, h2);\n\n      if (c$7 === 0) {\n        _accu =\n        /* :: */\n        [h1, accu];\n        _l2 = t2;\n        _l1 = t1;\n        continue;\n      }\n\n      if (c$7 < 0) {\n        _accu =\n        /* :: */\n        [h1, accu];\n        _l1 = t1;\n        continue;\n      }\n\n      _accu =\n      /* :: */\n      [h2, accu];\n      _l2 = t2;\n      continue;\n    }\n\n    ;\n  };\n\n  var len = length(l);\n\n  if (len < 2) {\n    return l;\n  } else {\n    return sort(len, l);\n  }\n}\n\nfunction compare_lengths(_l1, _l2) {\n  while (true) {\n    var l2 = _l2;\n    var l1 = _l1;\n\n    if (!l1) {\n      if (l2) {\n        return -1;\n      } else {\n        return 0;\n      }\n    }\n\n    if (!l2) {\n      return 1;\n    }\n\n    _l2 = l2[1];\n    _l1 = l1[1];\n    continue;\n  }\n\n  ;\n}\n\nfunction compare_length_with(_l, _n) {\n  while (true) {\n    var n = _n;\n    var l = _l;\n\n    if (!l) {\n      if (n === 0) {\n        return 0;\n      } else if (n > 0) {\n        return -1;\n      } else {\n        return 1;\n      }\n    }\n\n    if (n <= 0) {\n      return 1;\n    }\n\n    _n = n - 1 | 0;\n    _l = l[1];\n    continue;\n  }\n\n  ;\n}\n\nvar append = Pervasives.$at;\nvar concat = flatten;\nvar filter = find_all;\nvar sort = stable_sort;\nvar fast_sort = stable_sort;\nexport { length, compare_lengths, compare_length_with, cons, hd, tl, nth, nth_opt, rev, init, append, rev_append, concat, flatten, iter, iteri, map, mapi$1 as mapi, rev_map, fold_left, fold_right, iter2, map2, rev_map2, fold_left2, fold_right2, for_all, exists, for_all2, exists2, mem, memq, find, find_opt, filter, find_all, partition, assoc, assoc_opt, assq, assq_opt, mem_assoc, mem_assq, remove_assoc, remove_assq, split, combine, sort, stable_sort, fast_sort, sort_uniq, merge };\n/* No side effect */","map":{"version":3,"sources":["/Users/Yves/Projects/Concenix/AdminPanel/node_modules/bs-platform/lib/es6/list.js"],"names":["Curry","Caml_obj","Pervasives","Caml_option","Caml_builtin_exceptions","length","l","_len","_param","param","len","cons","a","hd","failure","tl","nth","n","invalid_argument","_l","_n","n$1","l$1","nth_opt","some","rev_append","_l1","_l2","l2","l1","rev","init_tailrec_aux","_acc","_i","f","i","acc","_1","init_aux","r","init","flatten","$at","map","mapi","_2","mapi$1","rev_map","_accu","accu","iter","iteri","fold_left","fold_right","map2","rev_map2","l2$1","l1$1","iter2","fold_left2","_3","fold_right2","for_all","p","exists","for_all2","exists2","mem","x","caml_equal","memq","assoc","match","not_found","assoc_opt","assq","assq_opt","mem_assoc","mem_assq","remove_assoc","pair","remove_assq","find","find_opt","find_all","param$1","partition","_yes","_no","no","yes","split","match$1","combine","merge","cmp","h2","h1","chop","_k","k","assert_failure","stable_sort","sort","x3","x2","x1","match$2","x2$1","x1$1","n1","n2","s1","rev_sort","s2","sort_uniq","c","c$1","c$2","c$3","c$4","c$5","c$6","t2","t1","c$7","compare_lengths","compare_length_with","append","concat","filter","fast_sort"],"mappings":"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","sourcesContent":["\n\nimport * as Curry from \"./curry.js\";\nimport * as Caml_obj from \"./caml_obj.js\";\nimport * as Pervasives from \"./pervasives.js\";\nimport * as Caml_option from \"./caml_option.js\";\nimport * as Caml_builtin_exceptions from \"./caml_builtin_exceptions.js\";\n\nfunction length(l) {\n  var _len = 0;\n  var _param = l;\n  while(true) {\n    var param = _param;\n    var len = _len;\n    if (!param) {\n      return len;\n    }\n    _param = param[1];\n    _len = len + 1 | 0;\n    continue ;\n  };\n}\n\nfunction cons(a, l) {\n  return /* :: */[\n          a,\n          l\n        ];\n}\n\nfunction hd(param) {\n  if (param) {\n    return param[0];\n  }\n  throw [\n        Caml_builtin_exceptions.failure,\n        \"hd\"\n      ];\n}\n\nfunction tl(param) {\n  if (param) {\n    return param[1];\n  }\n  throw [\n        Caml_builtin_exceptions.failure,\n        \"tl\"\n      ];\n}\n\nfunction nth(l, n) {\n  if (n < 0) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"List.nth\"\n        ];\n  }\n  var _l = l;\n  var _n = n;\n  while(true) {\n    var n$1 = _n;\n    var l$1 = _l;\n    if (l$1) {\n      if (n$1 === 0) {\n        return l$1[0];\n      }\n      _n = n$1 - 1 | 0;\n      _l = l$1[1];\n      continue ;\n    }\n    throw [\n          Caml_builtin_exceptions.failure,\n          \"nth\"\n        ];\n  };\n}\n\nfunction nth_opt(l, n) {\n  if (n < 0) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"List.nth\"\n        ];\n  }\n  var _l = l;\n  var _n = n;\n  while(true) {\n    var n$1 = _n;\n    var l$1 = _l;\n    if (!l$1) {\n      return ;\n    }\n    if (n$1 === 0) {\n      return Caml_option.some(l$1[0]);\n    }\n    _n = n$1 - 1 | 0;\n    _l = l$1[1];\n    continue ;\n  };\n}\n\nfunction rev_append(_l1, _l2) {\n  while(true) {\n    var l2 = _l2;\n    var l1 = _l1;\n    if (!l1) {\n      return l2;\n    }\n    _l2 = /* :: */[\n      l1[0],\n      l2\n    ];\n    _l1 = l1[1];\n    continue ;\n  };\n}\n\nfunction rev(l) {\n  return rev_append(l, /* [] */0);\n}\n\nfunction init_tailrec_aux(_acc, _i, n, f) {\n  while(true) {\n    var i = _i;\n    var acc = _acc;\n    if (i >= n) {\n      return acc;\n    }\n    _i = i + 1 | 0;\n    _acc = /* :: */[\n      Curry._1(f, i),\n      acc\n    ];\n    continue ;\n  };\n}\n\nfunction init_aux(i, n, f) {\n  if (i >= n) {\n    return /* [] */0;\n  }\n  var r = Curry._1(f, i);\n  return /* :: */[\n          r,\n          init_aux(i + 1 | 0, n, f)\n        ];\n}\n\nfunction init(len, f) {\n  if (len < 0) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"List.init\"\n        ];\n  }\n  if (len > 10000) {\n    return rev_append(init_tailrec_aux(/* [] */0, 0, len, f), /* [] */0);\n  } else {\n    return init_aux(0, len, f);\n  }\n}\n\nfunction flatten(param) {\n  if (param) {\n    return Pervasives.$at(param[0], flatten(param[1]));\n  } else {\n    return /* [] */0;\n  }\n}\n\nfunction map(f, param) {\n  if (!param) {\n    return /* [] */0;\n  }\n  var r = Curry._1(f, param[0]);\n  return /* :: */[\n          r,\n          map(f, param[1])\n        ];\n}\n\nfunction mapi(i, f, param) {\n  if (!param) {\n    return /* [] */0;\n  }\n  var r = Curry._2(f, i, param[0]);\n  return /* :: */[\n          r,\n          mapi(i + 1 | 0, f, param[1])\n        ];\n}\n\nfunction mapi$1(f, l) {\n  return mapi(0, f, l);\n}\n\nfunction rev_map(f, l) {\n  var _accu = /* [] */0;\n  var _param = l;\n  while(true) {\n    var param = _param;\n    var accu = _accu;\n    if (!param) {\n      return accu;\n    }\n    _param = param[1];\n    _accu = /* :: */[\n      Curry._1(f, param[0]),\n      accu\n    ];\n    continue ;\n  };\n}\n\nfunction iter(f, _param) {\n  while(true) {\n    var param = _param;\n    if (!param) {\n      return ;\n    }\n    Curry._1(f, param[0]);\n    _param = param[1];\n    continue ;\n  };\n}\n\nfunction iteri(f, l) {\n  var _i = 0;\n  var _param = l;\n  while(true) {\n    var param = _param;\n    var i = _i;\n    if (!param) {\n      return ;\n    }\n    Curry._2(f, i, param[0]);\n    _param = param[1];\n    _i = i + 1 | 0;\n    continue ;\n  };\n}\n\nfunction fold_left(f, _accu, _l) {\n  while(true) {\n    var l = _l;\n    var accu = _accu;\n    if (!l) {\n      return accu;\n    }\n    _l = l[1];\n    _accu = Curry._2(f, accu, l[0]);\n    continue ;\n  };\n}\n\nfunction fold_right(f, l, accu) {\n  if (l) {\n    return Curry._2(f, l[0], fold_right(f, l[1], accu));\n  } else {\n    return accu;\n  }\n}\n\nfunction map2(f, l1, l2) {\n  if (l1) {\n    if (l2) {\n      var r = Curry._2(f, l1[0], l2[0]);\n      return /* :: */[\n              r,\n              map2(f, l1[1], l2[1])\n            ];\n    }\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"List.map2\"\n        ];\n  }\n  if (!l2) {\n    return /* [] */0;\n  }\n  throw [\n        Caml_builtin_exceptions.invalid_argument,\n        \"List.map2\"\n      ];\n}\n\nfunction rev_map2(f, l1, l2) {\n  var _accu = /* [] */0;\n  var _l1 = l1;\n  var _l2 = l2;\n  while(true) {\n    var l2$1 = _l2;\n    var l1$1 = _l1;\n    var accu = _accu;\n    if (l1$1) {\n      if (l2$1) {\n        _l2 = l2$1[1];\n        _l1 = l1$1[1];\n        _accu = /* :: */[\n          Curry._2(f, l1$1[0], l2$1[0]),\n          accu\n        ];\n        continue ;\n      }\n      throw [\n            Caml_builtin_exceptions.invalid_argument,\n            \"List.rev_map2\"\n          ];\n    }\n    if (l2$1) {\n      throw [\n            Caml_builtin_exceptions.invalid_argument,\n            \"List.rev_map2\"\n          ];\n    }\n    return accu;\n  };\n}\n\nfunction iter2(f, _l1, _l2) {\n  while(true) {\n    var l2 = _l2;\n    var l1 = _l1;\n    if (l1) {\n      if (l2) {\n        Curry._2(f, l1[0], l2[0]);\n        _l2 = l2[1];\n        _l1 = l1[1];\n        continue ;\n      }\n      throw [\n            Caml_builtin_exceptions.invalid_argument,\n            \"List.iter2\"\n          ];\n    }\n    if (!l2) {\n      return ;\n    }\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"List.iter2\"\n        ];\n  };\n}\n\nfunction fold_left2(f, _accu, _l1, _l2) {\n  while(true) {\n    var l2 = _l2;\n    var l1 = _l1;\n    var accu = _accu;\n    if (l1) {\n      if (l2) {\n        _l2 = l2[1];\n        _l1 = l1[1];\n        _accu = Curry._3(f, accu, l1[0], l2[0]);\n        continue ;\n      }\n      throw [\n            Caml_builtin_exceptions.invalid_argument,\n            \"List.fold_left2\"\n          ];\n    }\n    if (l2) {\n      throw [\n            Caml_builtin_exceptions.invalid_argument,\n            \"List.fold_left2\"\n          ];\n    }\n    return accu;\n  };\n}\n\nfunction fold_right2(f, l1, l2, accu) {\n  if (l1) {\n    if (l2) {\n      return Curry._3(f, l1[0], l2[0], fold_right2(f, l1[1], l2[1], accu));\n    }\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"List.fold_right2\"\n        ];\n  }\n  if (l2) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"List.fold_right2\"\n        ];\n  }\n  return accu;\n}\n\nfunction for_all(p, _param) {\n  while(true) {\n    var param = _param;\n    if (!param) {\n      return true;\n    }\n    if (!Curry._1(p, param[0])) {\n      return false;\n    }\n    _param = param[1];\n    continue ;\n  };\n}\n\nfunction exists(p, _param) {\n  while(true) {\n    var param = _param;\n    if (!param) {\n      return false;\n    }\n    if (Curry._1(p, param[0])) {\n      return true;\n    }\n    _param = param[1];\n    continue ;\n  };\n}\n\nfunction for_all2(p, _l1, _l2) {\n  while(true) {\n    var l2 = _l2;\n    var l1 = _l1;\n    if (l1) {\n      if (l2) {\n        if (!Curry._2(p, l1[0], l2[0])) {\n          return false;\n        }\n        _l2 = l2[1];\n        _l1 = l1[1];\n        continue ;\n      }\n      throw [\n            Caml_builtin_exceptions.invalid_argument,\n            \"List.for_all2\"\n          ];\n    }\n    if (!l2) {\n      return true;\n    }\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"List.for_all2\"\n        ];\n  };\n}\n\nfunction exists2(p, _l1, _l2) {\n  while(true) {\n    var l2 = _l2;\n    var l1 = _l1;\n    if (l1) {\n      if (l2) {\n        if (Curry._2(p, l1[0], l2[0])) {\n          return true;\n        }\n        _l2 = l2[1];\n        _l1 = l1[1];\n        continue ;\n      }\n      throw [\n            Caml_builtin_exceptions.invalid_argument,\n            \"List.exists2\"\n          ];\n    }\n    if (!l2) {\n      return false;\n    }\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"List.exists2\"\n        ];\n  };\n}\n\nfunction mem(x, _param) {\n  while(true) {\n    var param = _param;\n    if (!param) {\n      return false;\n    }\n    if (Caml_obj.caml_equal(param[0], x)) {\n      return true;\n    }\n    _param = param[1];\n    continue ;\n  };\n}\n\nfunction memq(x, _param) {\n  while(true) {\n    var param = _param;\n    if (!param) {\n      return false;\n    }\n    if (param[0] === x) {\n      return true;\n    }\n    _param = param[1];\n    continue ;\n  };\n}\n\nfunction assoc(x, _param) {\n  while(true) {\n    var param = _param;\n    if (param) {\n      var match = param[0];\n      if (Caml_obj.caml_equal(match[0], x)) {\n        return match[1];\n      }\n      _param = param[1];\n      continue ;\n    }\n    throw Caml_builtin_exceptions.not_found;\n  };\n}\n\nfunction assoc_opt(x, _param) {\n  while(true) {\n    var param = _param;\n    if (!param) {\n      return ;\n    }\n    var match = param[0];\n    if (Caml_obj.caml_equal(match[0], x)) {\n      return Caml_option.some(match[1]);\n    }\n    _param = param[1];\n    continue ;\n  };\n}\n\nfunction assq(x, _param) {\n  while(true) {\n    var param = _param;\n    if (param) {\n      var match = param[0];\n      if (match[0] === x) {\n        return match[1];\n      }\n      _param = param[1];\n      continue ;\n    }\n    throw Caml_builtin_exceptions.not_found;\n  };\n}\n\nfunction assq_opt(x, _param) {\n  while(true) {\n    var param = _param;\n    if (!param) {\n      return ;\n    }\n    var match = param[0];\n    if (match[0] === x) {\n      return Caml_option.some(match[1]);\n    }\n    _param = param[1];\n    continue ;\n  };\n}\n\nfunction mem_assoc(x, _param) {\n  while(true) {\n    var param = _param;\n    if (!param) {\n      return false;\n    }\n    if (Caml_obj.caml_equal(param[0][0], x)) {\n      return true;\n    }\n    _param = param[1];\n    continue ;\n  };\n}\n\nfunction mem_assq(x, _param) {\n  while(true) {\n    var param = _param;\n    if (!param) {\n      return false;\n    }\n    if (param[0][0] === x) {\n      return true;\n    }\n    _param = param[1];\n    continue ;\n  };\n}\n\nfunction remove_assoc(x, param) {\n  if (!param) {\n    return /* [] */0;\n  }\n  var l = param[1];\n  var pair = param[0];\n  if (Caml_obj.caml_equal(pair[0], x)) {\n    return l;\n  } else {\n    return /* :: */[\n            pair,\n            remove_assoc(x, l)\n          ];\n  }\n}\n\nfunction remove_assq(x, param) {\n  if (!param) {\n    return /* [] */0;\n  }\n  var l = param[1];\n  var pair = param[0];\n  if (pair[0] === x) {\n    return l;\n  } else {\n    return /* :: */[\n            pair,\n            remove_assq(x, l)\n          ];\n  }\n}\n\nfunction find(p, _param) {\n  while(true) {\n    var param = _param;\n    if (param) {\n      var x = param[0];\n      if (Curry._1(p, x)) {\n        return x;\n      }\n      _param = param[1];\n      continue ;\n    }\n    throw Caml_builtin_exceptions.not_found;\n  };\n}\n\nfunction find_opt(p, _param) {\n  while(true) {\n    var param = _param;\n    if (!param) {\n      return ;\n    }\n    var x = param[0];\n    if (Curry._1(p, x)) {\n      return Caml_option.some(x);\n    }\n    _param = param[1];\n    continue ;\n  };\n}\n\nfunction find_all(p) {\n  return (function (param) {\n      var _accu = /* [] */0;\n      var _param = param;\n      while(true) {\n        var param$1 = _param;\n        var accu = _accu;\n        if (!param$1) {\n          return rev_append(accu, /* [] */0);\n        }\n        var l = param$1[1];\n        var x = param$1[0];\n        if (Curry._1(p, x)) {\n          _param = l;\n          _accu = /* :: */[\n            x,\n            accu\n          ];\n          continue ;\n        }\n        _param = l;\n        continue ;\n      };\n    });\n}\n\nfunction partition(p, l) {\n  var _yes = /* [] */0;\n  var _no = /* [] */0;\n  var _param = l;\n  while(true) {\n    var param = _param;\n    var no = _no;\n    var yes = _yes;\n    if (!param) {\n      return /* tuple */[\n              rev_append(yes, /* [] */0),\n              rev_append(no, /* [] */0)\n            ];\n    }\n    var l$1 = param[1];\n    var x = param[0];\n    if (Curry._1(p, x)) {\n      _param = l$1;\n      _yes = /* :: */[\n        x,\n        yes\n      ];\n      continue ;\n    }\n    _param = l$1;\n    _no = /* :: */[\n      x,\n      no\n    ];\n    continue ;\n  };\n}\n\nfunction split(param) {\n  if (!param) {\n    return /* tuple */[\n            /* [] */0,\n            /* [] */0\n          ];\n  }\n  var match = param[0];\n  var match$1 = split(param[1]);\n  return /* tuple */[\n          /* :: */[\n            match[0],\n            match$1[0]\n          ],\n          /* :: */[\n            match[1],\n            match$1[1]\n          ]\n        ];\n}\n\nfunction combine(l1, l2) {\n  if (l1) {\n    if (l2) {\n      return /* :: */[\n              /* tuple */[\n                l1[0],\n                l2[0]\n              ],\n              combine(l1[1], l2[1])\n            ];\n    }\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"List.combine\"\n        ];\n  }\n  if (!l2) {\n    return /* [] */0;\n  }\n  throw [\n        Caml_builtin_exceptions.invalid_argument,\n        \"List.combine\"\n      ];\n}\n\nfunction merge(cmp, l1, l2) {\n  if (!l1) {\n    return l2;\n  }\n  if (!l2) {\n    return l1;\n  }\n  var h2 = l2[0];\n  var h1 = l1[0];\n  if (Curry._2(cmp, h1, h2) <= 0) {\n    return /* :: */[\n            h1,\n            merge(cmp, l1[1], l2)\n          ];\n  } else {\n    return /* :: */[\n            h2,\n            merge(cmp, l1, l2[1])\n          ];\n  }\n}\n\nfunction chop(_k, _l) {\n  while(true) {\n    var l = _l;\n    var k = _k;\n    if (k === 0) {\n      return l;\n    }\n    if (l) {\n      _l = l[1];\n      _k = k - 1 | 0;\n      continue ;\n    }\n    throw [\n          Caml_builtin_exceptions.assert_failure,\n          /* tuple */[\n            \"list.ml\",\n            262,\n            11\n          ]\n        ];\n  };\n}\n\nfunction stable_sort(cmp, l) {\n  var sort = function (n, l) {\n    if (n !== 2) {\n      if (n === 3 && l) {\n        var match = l[1];\n        if (match) {\n          var match$1 = match[1];\n          if (match$1) {\n            var x3 = match$1[0];\n            var x2 = match[0];\n            var x1 = l[0];\n            if (Curry._2(cmp, x1, x2) <= 0) {\n              if (Curry._2(cmp, x2, x3) <= 0) {\n                return /* :: */[\n                        x1,\n                        /* :: */[\n                          x2,\n                          /* :: */[\n                            x3,\n                            /* [] */0\n                          ]\n                        ]\n                      ];\n              } else if (Curry._2(cmp, x1, x3) <= 0) {\n                return /* :: */[\n                        x1,\n                        /* :: */[\n                          x3,\n                          /* :: */[\n                            x2,\n                            /* [] */0\n                          ]\n                        ]\n                      ];\n              } else {\n                return /* :: */[\n                        x3,\n                        /* :: */[\n                          x1,\n                          /* :: */[\n                            x2,\n                            /* [] */0\n                          ]\n                        ]\n                      ];\n              }\n            } else if (Curry._2(cmp, x1, x3) <= 0) {\n              return /* :: */[\n                      x2,\n                      /* :: */[\n                        x1,\n                        /* :: */[\n                          x3,\n                          /* [] */0\n                        ]\n                      ]\n                    ];\n            } else if (Curry._2(cmp, x2, x3) <= 0) {\n              return /* :: */[\n                      x2,\n                      /* :: */[\n                        x3,\n                        /* :: */[\n                          x1,\n                          /* [] */0\n                        ]\n                      ]\n                    ];\n            } else {\n              return /* :: */[\n                      x3,\n                      /* :: */[\n                        x2,\n                        /* :: */[\n                          x1,\n                          /* [] */0\n                        ]\n                      ]\n                    ];\n            }\n          }\n          \n        }\n        \n      }\n      \n    } else if (l) {\n      var match$2 = l[1];\n      if (match$2) {\n        var x2$1 = match$2[0];\n        var x1$1 = l[0];\n        if (Curry._2(cmp, x1$1, x2$1) <= 0) {\n          return /* :: */[\n                  x1$1,\n                  /* :: */[\n                    x2$1,\n                    /* [] */0\n                  ]\n                ];\n        } else {\n          return /* :: */[\n                  x2$1,\n                  /* :: */[\n                    x1$1,\n                    /* [] */0\n                  ]\n                ];\n        }\n      }\n      \n    }\n    var n1 = (n >> 1);\n    var n2 = n - n1 | 0;\n    var l2 = chop(n1, l);\n    var s1 = rev_sort(n1, l);\n    var s2 = rev_sort(n2, l2);\n    var _l1 = s1;\n    var _l2 = s2;\n    var _accu = /* [] */0;\n    while(true) {\n      var accu = _accu;\n      var l2$1 = _l2;\n      var l1 = _l1;\n      if (!l1) {\n        return rev_append(l2$1, accu);\n      }\n      if (!l2$1) {\n        return rev_append(l1, accu);\n      }\n      var h2 = l2$1[0];\n      var h1 = l1[0];\n      if (Curry._2(cmp, h1, h2) > 0) {\n        _accu = /* :: */[\n          h1,\n          accu\n        ];\n        _l1 = l1[1];\n        continue ;\n      }\n      _accu = /* :: */[\n        h2,\n        accu\n      ];\n      _l2 = l2$1[1];\n      continue ;\n    };\n  };\n  var rev_sort = function (n, l) {\n    if (n !== 2) {\n      if (n === 3 && l) {\n        var match = l[1];\n        if (match) {\n          var match$1 = match[1];\n          if (match$1) {\n            var x3 = match$1[0];\n            var x2 = match[0];\n            var x1 = l[0];\n            if (Curry._2(cmp, x1, x2) > 0) {\n              if (Curry._2(cmp, x2, x3) > 0) {\n                return /* :: */[\n                        x1,\n                        /* :: */[\n                          x2,\n                          /* :: */[\n                            x3,\n                            /* [] */0\n                          ]\n                        ]\n                      ];\n              } else if (Curry._2(cmp, x1, x3) > 0) {\n                return /* :: */[\n                        x1,\n                        /* :: */[\n                          x3,\n                          /* :: */[\n                            x2,\n                            /* [] */0\n                          ]\n                        ]\n                      ];\n              } else {\n                return /* :: */[\n                        x3,\n                        /* :: */[\n                          x1,\n                          /* :: */[\n                            x2,\n                            /* [] */0\n                          ]\n                        ]\n                      ];\n              }\n            } else if (Curry._2(cmp, x1, x3) > 0) {\n              return /* :: */[\n                      x2,\n                      /* :: */[\n                        x1,\n                        /* :: */[\n                          x3,\n                          /* [] */0\n                        ]\n                      ]\n                    ];\n            } else if (Curry._2(cmp, x2, x3) > 0) {\n              return /* :: */[\n                      x2,\n                      /* :: */[\n                        x3,\n                        /* :: */[\n                          x1,\n                          /* [] */0\n                        ]\n                      ]\n                    ];\n            } else {\n              return /* :: */[\n                      x3,\n                      /* :: */[\n                        x2,\n                        /* :: */[\n                          x1,\n                          /* [] */0\n                        ]\n                      ]\n                    ];\n            }\n          }\n          \n        }\n        \n      }\n      \n    } else if (l) {\n      var match$2 = l[1];\n      if (match$2) {\n        var x2$1 = match$2[0];\n        var x1$1 = l[0];\n        if (Curry._2(cmp, x1$1, x2$1) > 0) {\n          return /* :: */[\n                  x1$1,\n                  /* :: */[\n                    x2$1,\n                    /* [] */0\n                  ]\n                ];\n        } else {\n          return /* :: */[\n                  x2$1,\n                  /* :: */[\n                    x1$1,\n                    /* [] */0\n                  ]\n                ];\n        }\n      }\n      \n    }\n    var n1 = (n >> 1);\n    var n2 = n - n1 | 0;\n    var l2 = chop(n1, l);\n    var s1 = sort(n1, l);\n    var s2 = sort(n2, l2);\n    var _l1 = s1;\n    var _l2 = s2;\n    var _accu = /* [] */0;\n    while(true) {\n      var accu = _accu;\n      var l2$1 = _l2;\n      var l1 = _l1;\n      if (!l1) {\n        return rev_append(l2$1, accu);\n      }\n      if (!l2$1) {\n        return rev_append(l1, accu);\n      }\n      var h2 = l2$1[0];\n      var h1 = l1[0];\n      if (Curry._2(cmp, h1, h2) <= 0) {\n        _accu = /* :: */[\n          h1,\n          accu\n        ];\n        _l1 = l1[1];\n        continue ;\n      }\n      _accu = /* :: */[\n        h2,\n        accu\n      ];\n      _l2 = l2$1[1];\n      continue ;\n    };\n  };\n  var len = length(l);\n  if (len < 2) {\n    return l;\n  } else {\n    return sort(len, l);\n  }\n}\n\nfunction sort_uniq(cmp, l) {\n  var sort = function (n, l) {\n    if (n !== 2) {\n      if (n === 3 && l) {\n        var match = l[1];\n        if (match) {\n          var match$1 = match[1];\n          if (match$1) {\n            var x3 = match$1[0];\n            var x2 = match[0];\n            var x1 = l[0];\n            var c = Curry._2(cmp, x1, x2);\n            if (c === 0) {\n              var c$1 = Curry._2(cmp, x2, x3);\n              if (c$1 === 0) {\n                return /* :: */[\n                        x2,\n                        /* [] */0\n                      ];\n              } else if (c$1 < 0) {\n                return /* :: */[\n                        x2,\n                        /* :: */[\n                          x3,\n                          /* [] */0\n                        ]\n                      ];\n              } else {\n                return /* :: */[\n                        x3,\n                        /* :: */[\n                          x2,\n                          /* [] */0\n                        ]\n                      ];\n              }\n            }\n            if (c < 0) {\n              var c$2 = Curry._2(cmp, x2, x3);\n              if (c$2 === 0) {\n                return /* :: */[\n                        x1,\n                        /* :: */[\n                          x2,\n                          /* [] */0\n                        ]\n                      ];\n              }\n              if (c$2 < 0) {\n                return /* :: */[\n                        x1,\n                        /* :: */[\n                          x2,\n                          /* :: */[\n                            x3,\n                            /* [] */0\n                          ]\n                        ]\n                      ];\n              }\n              var c$3 = Curry._2(cmp, x1, x3);\n              if (c$3 === 0) {\n                return /* :: */[\n                        x1,\n                        /* :: */[\n                          x2,\n                          /* [] */0\n                        ]\n                      ];\n              } else if (c$3 < 0) {\n                return /* :: */[\n                        x1,\n                        /* :: */[\n                          x3,\n                          /* :: */[\n                            x2,\n                            /* [] */0\n                          ]\n                        ]\n                      ];\n              } else {\n                return /* :: */[\n                        x3,\n                        /* :: */[\n                          x1,\n                          /* :: */[\n                            x2,\n                            /* [] */0\n                          ]\n                        ]\n                      ];\n              }\n            }\n            var c$4 = Curry._2(cmp, x1, x3);\n            if (c$4 === 0) {\n              return /* :: */[\n                      x2,\n                      /* :: */[\n                        x1,\n                        /* [] */0\n                      ]\n                    ];\n            }\n            if (c$4 < 0) {\n              return /* :: */[\n                      x2,\n                      /* :: */[\n                        x1,\n                        /* :: */[\n                          x3,\n                          /* [] */0\n                        ]\n                      ]\n                    ];\n            }\n            var c$5 = Curry._2(cmp, x2, x3);\n            if (c$5 === 0) {\n              return /* :: */[\n                      x2,\n                      /* :: */[\n                        x1,\n                        /* [] */0\n                      ]\n                    ];\n            } else if (c$5 < 0) {\n              return /* :: */[\n                      x2,\n                      /* :: */[\n                        x3,\n                        /* :: */[\n                          x1,\n                          /* [] */0\n                        ]\n                      ]\n                    ];\n            } else {\n              return /* :: */[\n                      x3,\n                      /* :: */[\n                        x2,\n                        /* :: */[\n                          x1,\n                          /* [] */0\n                        ]\n                      ]\n                    ];\n            }\n          }\n          \n        }\n        \n      }\n      \n    } else if (l) {\n      var match$2 = l[1];\n      if (match$2) {\n        var x2$1 = match$2[0];\n        var x1$1 = l[0];\n        var c$6 = Curry._2(cmp, x1$1, x2$1);\n        if (c$6 === 0) {\n          return /* :: */[\n                  x1$1,\n                  /* [] */0\n                ];\n        } else if (c$6 < 0) {\n          return /* :: */[\n                  x1$1,\n                  /* :: */[\n                    x2$1,\n                    /* [] */0\n                  ]\n                ];\n        } else {\n          return /* :: */[\n                  x2$1,\n                  /* :: */[\n                    x1$1,\n                    /* [] */0\n                  ]\n                ];\n        }\n      }\n      \n    }\n    var n1 = (n >> 1);\n    var n2 = n - n1 | 0;\n    var l2 = chop(n1, l);\n    var s1 = rev_sort(n1, l);\n    var s2 = rev_sort(n2, l2);\n    var _l1 = s1;\n    var _l2 = s2;\n    var _accu = /* [] */0;\n    while(true) {\n      var accu = _accu;\n      var l2$1 = _l2;\n      var l1 = _l1;\n      if (!l1) {\n        return rev_append(l2$1, accu);\n      }\n      if (!l2$1) {\n        return rev_append(l1, accu);\n      }\n      var t2 = l2$1[1];\n      var h2 = l2$1[0];\n      var t1 = l1[1];\n      var h1 = l1[0];\n      var c$7 = Curry._2(cmp, h1, h2);\n      if (c$7 === 0) {\n        _accu = /* :: */[\n          h1,\n          accu\n        ];\n        _l2 = t2;\n        _l1 = t1;\n        continue ;\n      }\n      if (c$7 > 0) {\n        _accu = /* :: */[\n          h1,\n          accu\n        ];\n        _l1 = t1;\n        continue ;\n      }\n      _accu = /* :: */[\n        h2,\n        accu\n      ];\n      _l2 = t2;\n      continue ;\n    };\n  };\n  var rev_sort = function (n, l) {\n    if (n !== 2) {\n      if (n === 3 && l) {\n        var match = l[1];\n        if (match) {\n          var match$1 = match[1];\n          if (match$1) {\n            var x3 = match$1[0];\n            var x2 = match[0];\n            var x1 = l[0];\n            var c = Curry._2(cmp, x1, x2);\n            if (c === 0) {\n              var c$1 = Curry._2(cmp, x2, x3);\n              if (c$1 === 0) {\n                return /* :: */[\n                        x2,\n                        /* [] */0\n                      ];\n              } else if (c$1 > 0) {\n                return /* :: */[\n                        x2,\n                        /* :: */[\n                          x3,\n                          /* [] */0\n                        ]\n                      ];\n              } else {\n                return /* :: */[\n                        x3,\n                        /* :: */[\n                          x2,\n                          /* [] */0\n                        ]\n                      ];\n              }\n            }\n            if (c > 0) {\n              var c$2 = Curry._2(cmp, x2, x3);\n              if (c$2 === 0) {\n                return /* :: */[\n                        x1,\n                        /* :: */[\n                          x2,\n                          /* [] */0\n                        ]\n                      ];\n              }\n              if (c$2 > 0) {\n                return /* :: */[\n                        x1,\n                        /* :: */[\n                          x2,\n                          /* :: */[\n                            x3,\n                            /* [] */0\n                          ]\n                        ]\n                      ];\n              }\n              var c$3 = Curry._2(cmp, x1, x3);\n              if (c$3 === 0) {\n                return /* :: */[\n                        x1,\n                        /* :: */[\n                          x2,\n                          /* [] */0\n                        ]\n                      ];\n              } else if (c$3 > 0) {\n                return /* :: */[\n                        x1,\n                        /* :: */[\n                          x3,\n                          /* :: */[\n                            x2,\n                            /* [] */0\n                          ]\n                        ]\n                      ];\n              } else {\n                return /* :: */[\n                        x3,\n                        /* :: */[\n                          x1,\n                          /* :: */[\n                            x2,\n                            /* [] */0\n                          ]\n                        ]\n                      ];\n              }\n            }\n            var c$4 = Curry._2(cmp, x1, x3);\n            if (c$4 === 0) {\n              return /* :: */[\n                      x2,\n                      /* :: */[\n                        x1,\n                        /* [] */0\n                      ]\n                    ];\n            }\n            if (c$4 > 0) {\n              return /* :: */[\n                      x2,\n                      /* :: */[\n                        x1,\n                        /* :: */[\n                          x3,\n                          /* [] */0\n                        ]\n                      ]\n                    ];\n            }\n            var c$5 = Curry._2(cmp, x2, x3);\n            if (c$5 === 0) {\n              return /* :: */[\n                      x2,\n                      /* :: */[\n                        x1,\n                        /* [] */0\n                      ]\n                    ];\n            } else if (c$5 > 0) {\n              return /* :: */[\n                      x2,\n                      /* :: */[\n                        x3,\n                        /* :: */[\n                          x1,\n                          /* [] */0\n                        ]\n                      ]\n                    ];\n            } else {\n              return /* :: */[\n                      x3,\n                      /* :: */[\n                        x2,\n                        /* :: */[\n                          x1,\n                          /* [] */0\n                        ]\n                      ]\n                    ];\n            }\n          }\n          \n        }\n        \n      }\n      \n    } else if (l) {\n      var match$2 = l[1];\n      if (match$2) {\n        var x2$1 = match$2[0];\n        var x1$1 = l[0];\n        var c$6 = Curry._2(cmp, x1$1, x2$1);\n        if (c$6 === 0) {\n          return /* :: */[\n                  x1$1,\n                  /* [] */0\n                ];\n        } else if (c$6 > 0) {\n          return /* :: */[\n                  x1$1,\n                  /* :: */[\n                    x2$1,\n                    /* [] */0\n                  ]\n                ];\n        } else {\n          return /* :: */[\n                  x2$1,\n                  /* :: */[\n                    x1$1,\n                    /* [] */0\n                  ]\n                ];\n        }\n      }\n      \n    }\n    var n1 = (n >> 1);\n    var n2 = n - n1 | 0;\n    var l2 = chop(n1, l);\n    var s1 = sort(n1, l);\n    var s2 = sort(n2, l2);\n    var _l1 = s1;\n    var _l2 = s2;\n    var _accu = /* [] */0;\n    while(true) {\n      var accu = _accu;\n      var l2$1 = _l2;\n      var l1 = _l1;\n      if (!l1) {\n        return rev_append(l2$1, accu);\n      }\n      if (!l2$1) {\n        return rev_append(l1, accu);\n      }\n      var t2 = l2$1[1];\n      var h2 = l2$1[0];\n      var t1 = l1[1];\n      var h1 = l1[0];\n      var c$7 = Curry._2(cmp, h1, h2);\n      if (c$7 === 0) {\n        _accu = /* :: */[\n          h1,\n          accu\n        ];\n        _l2 = t2;\n        _l1 = t1;\n        continue ;\n      }\n      if (c$7 < 0) {\n        _accu = /* :: */[\n          h1,\n          accu\n        ];\n        _l1 = t1;\n        continue ;\n      }\n      _accu = /* :: */[\n        h2,\n        accu\n      ];\n      _l2 = t2;\n      continue ;\n    };\n  };\n  var len = length(l);\n  if (len < 2) {\n    return l;\n  } else {\n    return sort(len, l);\n  }\n}\n\nfunction compare_lengths(_l1, _l2) {\n  while(true) {\n    var l2 = _l2;\n    var l1 = _l1;\n    if (!l1) {\n      if (l2) {\n        return -1;\n      } else {\n        return 0;\n      }\n    }\n    if (!l2) {\n      return 1;\n    }\n    _l2 = l2[1];\n    _l1 = l1[1];\n    continue ;\n  };\n}\n\nfunction compare_length_with(_l, _n) {\n  while(true) {\n    var n = _n;\n    var l = _l;\n    if (!l) {\n      if (n === 0) {\n        return 0;\n      } else if (n > 0) {\n        return -1;\n      } else {\n        return 1;\n      }\n    }\n    if (n <= 0) {\n      return 1;\n    }\n    _n = n - 1 | 0;\n    _l = l[1];\n    continue ;\n  };\n}\n\nvar append = Pervasives.$at;\n\nvar concat = flatten;\n\nvar filter = find_all;\n\nvar sort = stable_sort;\n\nvar fast_sort = stable_sort;\n\nexport {\n  length ,\n  compare_lengths ,\n  compare_length_with ,\n  cons ,\n  hd ,\n  tl ,\n  nth ,\n  nth_opt ,\n  rev ,\n  init ,\n  append ,\n  rev_append ,\n  concat ,\n  flatten ,\n  iter ,\n  iteri ,\n  map ,\n  mapi$1 as mapi,\n  rev_map ,\n  fold_left ,\n  fold_right ,\n  iter2 ,\n  map2 ,\n  rev_map2 ,\n  fold_left2 ,\n  fold_right2 ,\n  for_all ,\n  exists ,\n  for_all2 ,\n  exists2 ,\n  mem ,\n  memq ,\n  find ,\n  find_opt ,\n  filter ,\n  find_all ,\n  partition ,\n  assoc ,\n  assoc_opt ,\n  assq ,\n  assq_opt ,\n  mem_assoc ,\n  mem_assq ,\n  remove_assoc ,\n  remove_assq ,\n  split ,\n  combine ,\n  sort ,\n  stable_sort ,\n  fast_sort ,\n  sort_uniq ,\n  merge ,\n  \n}\n/* No side effect */\n"]},"metadata":{},"sourceType":"module"}