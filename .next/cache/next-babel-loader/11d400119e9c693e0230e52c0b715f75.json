{"ast":null,"code":"function caml_int_compare(x, y) {\n  if (x < y) {\n    return -1;\n  } else if (x === y) {\n    return 0;\n  } else {\n    return 1;\n  }\n}\n\nfunction caml_bool_compare(x, y) {\n  if (x) {\n    if (y) {\n      return 0;\n    } else {\n      return 1;\n    }\n  } else if (y) {\n    return -1;\n  } else {\n    return 0;\n  }\n}\n\nfunction caml_float_compare(x, y) {\n  if (x === y) {\n    return 0;\n  } else if (x < y) {\n    return -1;\n  } else if (x > y || x === x) {\n    return 1;\n  } else if (y === y) {\n    return -1;\n  } else {\n    return 0;\n  }\n}\n\nfunction caml_string_compare(s1, s2) {\n  if (s1 === s2) {\n    return 0;\n  } else if (s1 < s2) {\n    return -1;\n  } else {\n    return 1;\n  }\n}\n\nfunction caml_bytes_compare_aux(s1, s2, _off, len, def) {\n  while (true) {\n    var off = _off;\n\n    if (off >= len) {\n      return def;\n    }\n\n    var a = s1[off];\n    var b = s2[off];\n\n    if (a > b) {\n      return 1;\n    }\n\n    if (a < b) {\n      return -1;\n    }\n\n    _off = off + 1 | 0;\n    continue;\n  }\n\n  ;\n}\n\nfunction caml_bytes_compare(s1, s2) {\n  var len1 = s1.length;\n  var len2 = s2.length;\n\n  if (len1 === len2) {\n    return caml_bytes_compare_aux(s1, s2, 0, len1, 0);\n  } else if (len1 < len2) {\n    return caml_bytes_compare_aux(s1, s2, 0, len1, -1);\n  } else {\n    return caml_bytes_compare_aux(s1, s2, 0, len2, 1);\n  }\n}\n\nfunction caml_bytes_equal(s1, s2) {\n  var len1 = s1.length;\n  var len2 = s2.length;\n\n  if (len1 === len2) {\n    var _off = 0;\n\n    while (true) {\n      var off = _off;\n\n      if (off === len1) {\n        return true;\n      }\n\n      var a = s1[off];\n      var b = s2[off];\n\n      if (a !== b) {\n        return false;\n      }\n\n      _off = off + 1 | 0;\n      continue;\n    }\n\n    ;\n  } else {\n    return false;\n  }\n}\n\nfunction caml_bool_min(x, y) {\n  if (x) {\n    return y;\n  } else {\n    return x;\n  }\n}\n\nfunction caml_int_min(x, y) {\n  if (x < y) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nfunction caml_float_min(x, y) {\n  if (x < y) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nfunction caml_string_min(x, y) {\n  if (x < y) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nfunction caml_nativeint_min(x, y) {\n  if (x < y) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nfunction caml_int32_min(x, y) {\n  if (x < y) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nfunction caml_bool_max(x, y) {\n  if (x) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nfunction caml_int_max(x, y) {\n  if (x > y) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nfunction caml_float_max(x, y) {\n  if (x > y) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nfunction caml_string_max(x, y) {\n  if (x > y) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nfunction caml_nativeint_max(x, y) {\n  if (x > y) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nfunction caml_int32_max(x, y) {\n  if (x > y) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nvar caml_nativeint_compare = caml_int_compare;\nvar caml_int32_compare = caml_int_compare;\nexport { caml_bytes_compare, caml_bytes_equal, caml_int_compare, caml_bool_compare, caml_float_compare, caml_nativeint_compare, caml_string_compare, caml_int32_compare, caml_bool_min, caml_int_min, caml_float_min, caml_string_min, caml_nativeint_min, caml_int32_min, caml_bool_max, caml_int_max, caml_float_max, caml_string_max, caml_nativeint_max, caml_int32_max };\n/* No side effect */","map":{"version":3,"sources":["/Users/Yves/Projects/Concenix/AdminPanel/node_modules/bs-platform/lib/es6/caml_primitive.js"],"names":["caml_int_compare","x","y","caml_bool_compare","caml_float_compare","caml_string_compare","s1","s2","caml_bytes_compare_aux","_off","len","def","off","a","b","caml_bytes_compare","len1","length","len2","caml_bytes_equal","caml_bool_min","caml_int_min","caml_float_min","caml_string_min","caml_nativeint_min","caml_int32_min","caml_bool_max","caml_int_max","caml_float_max","caml_string_max","caml_nativeint_max","caml_int32_max","caml_nativeint_compare","caml_int32_compare"],"mappings":"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","sourcesContent":["\n\n\nfunction caml_int_compare(x, y) {\n  if (x < y) {\n    return -1;\n  } else if (x === y) {\n    return 0;\n  } else {\n    return 1;\n  }\n}\n\nfunction caml_bool_compare(x, y) {\n  if (x) {\n    if (y) {\n      return 0;\n    } else {\n      return 1;\n    }\n  } else if (y) {\n    return -1;\n  } else {\n    return 0;\n  }\n}\n\nfunction caml_float_compare(x, y) {\n  if (x === y) {\n    return 0;\n  } else if (x < y) {\n    return -1;\n  } else if (x > y || x === x) {\n    return 1;\n  } else if (y === y) {\n    return -1;\n  } else {\n    return 0;\n  }\n}\n\nfunction caml_string_compare(s1, s2) {\n  if (s1 === s2) {\n    return 0;\n  } else if (s1 < s2) {\n    return -1;\n  } else {\n    return 1;\n  }\n}\n\nfunction caml_bytes_compare_aux(s1, s2, _off, len, def) {\n  while(true) {\n    var off = _off;\n    if (off >= len) {\n      return def;\n    }\n    var a = s1[off];\n    var b = s2[off];\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    _off = off + 1 | 0;\n    continue ;\n  };\n}\n\nfunction caml_bytes_compare(s1, s2) {\n  var len1 = s1.length;\n  var len2 = s2.length;\n  if (len1 === len2) {\n    return caml_bytes_compare_aux(s1, s2, 0, len1, 0);\n  } else if (len1 < len2) {\n    return caml_bytes_compare_aux(s1, s2, 0, len1, -1);\n  } else {\n    return caml_bytes_compare_aux(s1, s2, 0, len2, 1);\n  }\n}\n\nfunction caml_bytes_equal(s1, s2) {\n  var len1 = s1.length;\n  var len2 = s2.length;\n  if (len1 === len2) {\n    var _off = 0;\n    while(true) {\n      var off = _off;\n      if (off === len1) {\n        return true;\n      }\n      var a = s1[off];\n      var b = s2[off];\n      if (a !== b) {\n        return false;\n      }\n      _off = off + 1 | 0;\n      continue ;\n    };\n  } else {\n    return false;\n  }\n}\n\nfunction caml_bool_min(x, y) {\n  if (x) {\n    return y;\n  } else {\n    return x;\n  }\n}\n\nfunction caml_int_min(x, y) {\n  if (x < y) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nfunction caml_float_min(x, y) {\n  if (x < y) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nfunction caml_string_min(x, y) {\n  if (x < y) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nfunction caml_nativeint_min(x, y) {\n  if (x < y) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nfunction caml_int32_min(x, y) {\n  if (x < y) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nfunction caml_bool_max(x, y) {\n  if (x) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nfunction caml_int_max(x, y) {\n  if (x > y) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nfunction caml_float_max(x, y) {\n  if (x > y) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nfunction caml_string_max(x, y) {\n  if (x > y) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nfunction caml_nativeint_max(x, y) {\n  if (x > y) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nfunction caml_int32_max(x, y) {\n  if (x > y) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nvar caml_nativeint_compare = caml_int_compare;\n\nvar caml_int32_compare = caml_int_compare;\n\nexport {\n  caml_bytes_compare ,\n  caml_bytes_equal ,\n  caml_int_compare ,\n  caml_bool_compare ,\n  caml_float_compare ,\n  caml_nativeint_compare ,\n  caml_string_compare ,\n  caml_int32_compare ,\n  caml_bool_min ,\n  caml_int_min ,\n  caml_float_min ,\n  caml_string_min ,\n  caml_nativeint_min ,\n  caml_int32_min ,\n  caml_bool_max ,\n  caml_int_max ,\n  caml_float_max ,\n  caml_string_max ,\n  caml_nativeint_max ,\n  caml_int32_max ,\n  \n}\n/* No side effect */\n"]},"metadata":{},"sourceType":"module"}