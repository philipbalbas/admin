{"ast":null,"code":"import * as Curry from \"./curry.js\";\nvar stdout = {\n  buffer: \"\",\n  output: function (param, s) {\n    var v = s.length - 1 | 0;\n\n    if (typeof process !== \"undefined\" && process.stdout && process.stdout.write) {\n      return process.stdout.write(s);\n    } else if (s[v] === \"\\n\") {\n      console.log(s.slice(0, v));\n      return;\n    } else {\n      console.log(s);\n      return;\n    }\n  }\n};\nvar stderr = {\n  buffer: \"\",\n  output: function (param, s) {\n    var v = s.length - 1 | 0;\n\n    if (s[v] === \"\\n\") {\n      console.log(s.slice(0, v));\n      return;\n    } else {\n      console.log(s);\n      return;\n    }\n  }\n};\n\nfunction caml_ml_flush(oc) {\n  if (oc.buffer !== \"\") {\n    Curry._2(oc.output, oc, oc.buffer);\n\n    oc.buffer = \"\";\n    return;\n  }\n}\n\nfunction caml_ml_output(oc, str, offset, len) {\n  var str$1 = offset === 0 && len === str.length ? str : str.slice(offset, len);\n\n  if (typeof process !== \"undefined\" && process.stdout && process.stdout.write && oc === stdout) {\n    return process.stdout.write(str$1);\n  }\n\n  var id = str$1.lastIndexOf(\"\\n\");\n\n  if (id < 0) {\n    oc.buffer = oc.buffer + str$1;\n    return;\n  } else {\n    oc.buffer = oc.buffer + str$1.slice(0, id + 1 | 0);\n    caml_ml_flush(oc);\n    oc.buffer = oc.buffer + str$1.slice(id + 1 | 0);\n    return;\n  }\n}\n\nfunction caml_ml_output_char(oc, $$char) {\n  return caml_ml_output(oc, String.fromCharCode($$char), 0, 1);\n}\n\nfunction caml_ml_out_channels_list(param) {\n  return (\n    /* :: */\n    [stdout,\n    /* :: */\n    [stderr,\n    /* [] */\n    0]]\n  );\n}\n\nvar stdin;\nexport { stdin, stdout, stderr, caml_ml_flush, caml_ml_output, caml_ml_output_char, caml_ml_out_channels_list };\n/* No side effect */","map":{"version":3,"sources":["/Users/Yves/Projects/Concenix/AdminPanel/node_modules/bs-platform/lib/es6/caml_io.js"],"names":["Curry","stdout","buffer","output","param","s","v","length","process","write","console","log","slice","stderr","caml_ml_flush","oc","_2","caml_ml_output","str","offset","len","str$1","id","lastIndexOf","caml_ml_output_char","$$char","String","fromCharCode","caml_ml_out_channels_list","stdin"],"mappings":"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","sourcesContent":["\n\nimport * as Curry from \"./curry.js\";\n\nvar stdout = {\n  buffer: \"\",\n  output: (function (param, s) {\n      var v = s.length - 1 | 0;\n      if (((typeof process !== \"undefined\") && process.stdout && process.stdout.write)) {\n        return process.stdout.write(s);\n      } else if (s[v] === \"\\n\") {\n        console.log(s.slice(0, v));\n        return ;\n      } else {\n        console.log(s);\n        return ;\n      }\n    })\n};\n\nvar stderr = {\n  buffer: \"\",\n  output: (function (param, s) {\n      var v = s.length - 1 | 0;\n      if (s[v] === \"\\n\") {\n        console.log(s.slice(0, v));\n        return ;\n      } else {\n        console.log(s);\n        return ;\n      }\n    })\n};\n\nfunction caml_ml_flush(oc) {\n  if (oc.buffer !== \"\") {\n    Curry._2(oc.output, oc, oc.buffer);\n    oc.buffer = \"\";\n    return ;\n  }\n  \n}\n\nfunction caml_ml_output(oc, str, offset, len) {\n  var str$1 = offset === 0 && len === str.length ? str : str.slice(offset, len);\n  if (((typeof process !== \"undefined\") && process.stdout && process.stdout.write) && oc === stdout) {\n    return process.stdout.write(str$1);\n  }\n  var id = str$1.lastIndexOf(\"\\n\");\n  if (id < 0) {\n    oc.buffer = oc.buffer + str$1;\n    return ;\n  } else {\n    oc.buffer = oc.buffer + str$1.slice(0, id + 1 | 0);\n    caml_ml_flush(oc);\n    oc.buffer = oc.buffer + str$1.slice(id + 1 | 0);\n    return ;\n  }\n}\n\nfunction caml_ml_output_char(oc, $$char) {\n  return caml_ml_output(oc, String.fromCharCode($$char), 0, 1);\n}\n\nfunction caml_ml_out_channels_list(param) {\n  return /* :: */[\n          stdout,\n          /* :: */[\n            stderr,\n            /* [] */0\n          ]\n        ];\n}\n\nvar stdin;\n\nexport {\n  stdin ,\n  stdout ,\n  stderr ,\n  caml_ml_flush ,\n  caml_ml_output ,\n  caml_ml_output_char ,\n  caml_ml_out_channels_list ,\n  \n}\n/* No side effect */\n"]},"metadata":{},"sourceType":"module"}