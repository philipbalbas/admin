{"ast":null,"code":"import * as Caml_int32 from \"./caml_int32.js\";\nimport * as Caml_int64 from \"./caml_int64.js\";\nimport * as Caml_builtin_exceptions from \"./caml_builtin_exceptions.js\";\n\nfunction parse_digit(c) {\n  if (c >= 65) {\n    if (c >= 97) {\n      if (c >= 123) {\n        return -1;\n      } else {\n        return c - 87 | 0;\n      }\n    } else if (c >= 91) {\n      return -1;\n    } else {\n      return c - 55 | 0;\n    }\n  } else if (c > 57 || c < 48) {\n    return -1;\n  } else {\n    return c -\n    /* \"0\" */\n    48 | 0;\n  }\n}\n\nfunction int_of_string_base(param) {\n  switch (param) {\n    case\n    /* Oct */\n    0:\n      return 8;\n\n    case\n    /* Hex */\n    1:\n      return 16;\n\n    case\n    /* Dec */\n    2:\n      return 10;\n\n    case\n    /* Bin */\n    3:\n      return 2;\n  }\n}\n\nfunction parse_sign_and_base(s) {\n  var sign = 1;\n  var base =\n  /* Dec */\n  2;\n  var i = 0;\n  var match = s.charCodeAt(i);\n\n  switch (match) {\n    case 43:\n      i = i + 1 | 0;\n      break;\n\n    case 44:\n      break;\n\n    case 45:\n      sign = -1;\n      i = i + 1 | 0;\n      break;\n\n    default:\n  }\n\n  if (s[i] === \"0\") {\n    var match$1 = s.charCodeAt(i + 1 | 0);\n\n    if (match$1 >= 89) {\n      if (match$1 >= 111) {\n        if (match$1 < 121) {\n          switch (match$1 - 111 | 0) {\n            case 0:\n              base =\n              /* Oct */\n              0;\n              i = i + 2 | 0;\n              break;\n\n            case 6:\n              i = i + 2 | 0;\n              break;\n\n            case 1:\n            case 2:\n            case 3:\n            case 4:\n            case 5:\n            case 7:\n            case 8:\n              break;\n\n            case 9:\n              base =\n              /* Hex */\n              1;\n              i = i + 2 | 0;\n              break;\n          }\n        }\n      } else if (match$1 === 98) {\n        base =\n        /* Bin */\n        3;\n        i = i + 2 | 0;\n      }\n    } else if (match$1 !== 66) {\n      if (match$1 >= 79) {\n        switch (match$1 - 79 | 0) {\n          case 0:\n            base =\n            /* Oct */\n            0;\n            i = i + 2 | 0;\n            break;\n\n          case 6:\n            i = i + 2 | 0;\n            break;\n\n          case 1:\n          case 2:\n          case 3:\n          case 4:\n          case 5:\n          case 7:\n          case 8:\n            break;\n\n          case 9:\n            base =\n            /* Hex */\n            1;\n            i = i + 2 | 0;\n            break;\n        }\n      }\n    } else {\n      base =\n      /* Bin */\n      3;\n      i = i + 2 | 0;\n    }\n  }\n\n  return (\n    /* tuple */\n    [i, sign, base]\n  );\n}\n\nfunction caml_int_of_string(s) {\n  var match = parse_sign_and_base(s);\n  var i = match[0];\n  var base = int_of_string_base(match[2]);\n  var threshold = 4294967295;\n  var len = s.length;\n  var c = i < len ? s.charCodeAt(i) :\n  /* \"\\000\" */\n  0;\n  var d = parse_digit(c);\n\n  if (d < 0 || d >= base) {\n    throw [Caml_builtin_exceptions.failure, \"int_of_string\"];\n  }\n\n  var aux = function aux(_acc, _k) {\n    while (true) {\n      var k = _k;\n      var acc = _acc;\n\n      if (k === len) {\n        return acc;\n      }\n\n      var a = s.charCodeAt(k);\n\n      if (a ===\n      /* \"_\" */\n      95) {\n        _k = k + 1 | 0;\n        continue;\n      }\n\n      var v = parse_digit(a);\n\n      if (v < 0 || v >= base) {\n        throw [Caml_builtin_exceptions.failure, \"int_of_string\"];\n      }\n\n      var acc$1 = base * acc + v;\n\n      if (acc$1 > threshold) {\n        throw [Caml_builtin_exceptions.failure, \"int_of_string\"];\n      }\n\n      _k = k + 1 | 0;\n      _acc = acc$1;\n      continue;\n    }\n\n    ;\n  };\n\n  var res = match[1] * aux(d, i + 1 | 0);\n  var or_res = res | 0;\n\n  if (base === 10 && res !== or_res) {\n    throw [Caml_builtin_exceptions.failure, \"int_of_string\"];\n  }\n\n  return or_res;\n}\n\nfunction caml_int64_of_string(s) {\n  var match = parse_sign_and_base(s);\n  var hbase = match[2];\n  var i = match[0];\n  var base = Caml_int64.of_int32(int_of_string_base(hbase));\n  var sign = Caml_int64.of_int32(match[1]);\n  var threshold;\n\n  switch (hbase) {\n    case\n    /* Oct */\n    0:\n      threshold = Caml_int64.mk(-1, 536870911);\n      break;\n\n    case\n    /* Hex */\n    1:\n      threshold = Caml_int64.mk(-1, 268435455);\n      break;\n\n    case\n    /* Dec */\n    2:\n      threshold = Caml_int64.mk(-1717986919, 429496729);\n      break;\n\n    case\n    /* Bin */\n    3:\n      threshold = Caml_int64.max_int;\n      break;\n  }\n\n  var len = s.length;\n  var c = i < len ? s.charCodeAt(i) :\n  /* \"\\000\" */\n  0;\n  var d = Caml_int64.of_int32(parse_digit(c));\n\n  if (Caml_int64.lt(d, Caml_int64.zero) || Caml_int64.ge(d, base)) {\n    throw [Caml_builtin_exceptions.failure, \"int64_of_string\"];\n  }\n\n  var aux = function aux(_acc, _k) {\n    while (true) {\n      var k = _k;\n      var acc = _acc;\n\n      if (k === len) {\n        return acc;\n      }\n\n      var a = s.charCodeAt(k);\n\n      if (a ===\n      /* \"_\" */\n      95) {\n        _k = k + 1 | 0;\n        continue;\n      }\n\n      var v = Caml_int64.of_int32(parse_digit(a));\n\n      if (Caml_int64.lt(v, Caml_int64.zero) || Caml_int64.ge(v, base) || Caml_int64.gt(acc, threshold)) {\n        throw [Caml_builtin_exceptions.failure, \"int64_of_string\"];\n      }\n\n      var acc$1 = Caml_int64.add(Caml_int64.mul(base, acc), v);\n      _k = k + 1 | 0;\n      _acc = acc$1;\n      continue;\n    }\n\n    ;\n  };\n\n  var res = Caml_int64.mul(sign, aux(d, i + 1 | 0));\n  var or_res = Caml_int64.or_(res, Caml_int64.zero);\n\n  if (Caml_int64.eq(base, Caml_int64.mk(10, 0)) && Caml_int64.neq(res, or_res)) {\n    throw [Caml_builtin_exceptions.failure, \"int64_of_string\"];\n  }\n\n  return or_res;\n}\n\nfunction int_of_base(param) {\n  switch (param) {\n    case\n    /* Oct */\n    0:\n      return 8;\n\n    case\n    /* Hex */\n    1:\n      return 16;\n\n    case\n    /* Dec */\n    2:\n      return 10;\n  }\n}\n\nfunction lowercase(c) {\n  if (c >=\n  /* \"A\" */\n  65 && c <=\n  /* \"Z\" */\n  90 || c >=\n  /* \"\\192\" */\n  192 && c <=\n  /* \"\\214\" */\n  214 || c >=\n  /* \"\\216\" */\n  216 && c <=\n  /* \"\\222\" */\n  222) {\n    return c + 32 | 0;\n  } else {\n    return c;\n  }\n}\n\nfunction parse_format(fmt) {\n  var len = fmt.length;\n\n  if (len > 31) {\n    throw [Caml_builtin_exceptions.invalid_argument, \"format_int: format too long\"];\n  }\n\n  var f = {\n    justify: \"+\",\n    signstyle: \"-\",\n    filter: \" \",\n    alternate: false,\n    base:\n    /* Dec */\n    2,\n    signedconv: false,\n    width: 0,\n    uppercase: false,\n    sign: 1,\n    prec: -1,\n    conv: \"f\"\n  };\n  var _i = 0;\n\n  while (true) {\n    var i = _i;\n\n    if (i >= len) {\n      return f;\n    }\n\n    var c = fmt.charCodeAt(i);\n    var exit = 0;\n\n    if (c >= 69) {\n      if (c >= 88) {\n        if (c >= 121) {\n          exit = 1;\n        } else {\n          switch (c - 88 | 0) {\n            case 0:\n              f.base =\n              /* Hex */\n              1;\n              f.uppercase = true;\n              _i = i + 1 | 0;\n              continue;\n\n            case 13:\n            case 14:\n            case 15:\n              exit = 5;\n              break;\n\n            case 12:\n            case 17:\n              exit = 4;\n              break;\n\n            case 23:\n              f.base =\n              /* Oct */\n              0;\n              _i = i + 1 | 0;\n              continue;\n\n            case 29:\n              f.base =\n              /* Dec */\n              2;\n              _i = i + 1 | 0;\n              continue;\n\n            case 1:\n            case 2:\n            case 3:\n            case 4:\n            case 5:\n            case 6:\n            case 7:\n            case 8:\n            case 9:\n            case 10:\n            case 11:\n            case 16:\n            case 18:\n            case 19:\n            case 20:\n            case 21:\n            case 22:\n            case 24:\n            case 25:\n            case 26:\n            case 27:\n            case 28:\n            case 30:\n            case 31:\n              exit = 1;\n              break;\n\n            case 32:\n              f.base =\n              /* Hex */\n              1;\n              _i = i + 1 | 0;\n              continue;\n          }\n        }\n      } else if (c >= 72) {\n        exit = 1;\n      } else {\n        f.signedconv = true;\n        f.uppercase = true;\n        f.conv = String.fromCharCode(lowercase(c));\n        _i = i + 1 | 0;\n        continue;\n      }\n    } else {\n      switch (c) {\n        case 35:\n          f.alternate = true;\n          _i = i + 1 | 0;\n          continue;\n\n        case 32:\n        case 43:\n          exit = 2;\n          break;\n\n        case 45:\n          f.justify = \"-\";\n          _i = i + 1 | 0;\n          continue;\n\n        case 46:\n          f.prec = 0;\n          var j = i + 1 | 0;\n\n          while (function (j) {\n            return function () {\n              var w = fmt.charCodeAt(j) -\n              /* \"0\" */\n              48 | 0;\n              return w >= 0 && w <= 9;\n            };\n          }(j)()) {\n            f.prec = (Caml_int32.imul(f.prec, 10) + fmt.charCodeAt(j) | 0) -\n            /* \"0\" */\n            48 | 0;\n            j = j + 1 | 0;\n          }\n\n          ;\n          _i = j;\n          continue;\n\n        case 33:\n        case 34:\n        case 36:\n        case 37:\n        case 38:\n        case 39:\n        case 40:\n        case 41:\n        case 42:\n        case 44:\n        case 47:\n          exit = 1;\n          break;\n\n        case 48:\n          f.filter = \"0\";\n          _i = i + 1 | 0;\n          continue;\n\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n          exit = 3;\n          break;\n\n        default:\n          exit = 1;\n      }\n    }\n\n    switch (exit) {\n      case 1:\n        _i = i + 1 | 0;\n        continue;\n\n      case 2:\n        f.signstyle = String.fromCharCode(c);\n        _i = i + 1 | 0;\n        continue;\n\n      case 3:\n        f.width = 0;\n        var j$1 = i;\n\n        while (function (j$1) {\n          return function () {\n            var w = fmt.charCodeAt(j$1) -\n            /* \"0\" */\n            48 | 0;\n            return w >= 0 && w <= 9;\n          };\n        }(j$1)()) {\n          f.width = (Caml_int32.imul(f.width, 10) + fmt.charCodeAt(j$1) | 0) -\n          /* \"0\" */\n          48 | 0;\n          j$1 = j$1 + 1 | 0;\n        }\n\n        ;\n        _i = j$1;\n        continue;\n\n      case 4:\n        f.signedconv = true;\n        f.base =\n        /* Dec */\n        2;\n        _i = i + 1 | 0;\n        continue;\n\n      case 5:\n        f.signedconv = true;\n        f.conv = String.fromCharCode(c);\n        _i = i + 1 | 0;\n        continue;\n    }\n  }\n\n  ;\n}\n\nfunction finish_formatting(config, rawbuffer) {\n  var justify = config.justify;\n  var signstyle = config.signstyle;\n  var filter = config.filter;\n  var alternate = config.alternate;\n  var base = config.base;\n  var signedconv = config.signedconv;\n  var width = config.width;\n  var uppercase = config.uppercase;\n  var sign = config.sign;\n  var len = rawbuffer.length;\n\n  if (signedconv && (sign < 0 || signstyle !== \"-\")) {\n    len = len + 1 | 0;\n  }\n\n  if (alternate) {\n    if (base ===\n    /* Oct */\n    0) {\n      len = len + 1 | 0;\n    } else if (base ===\n    /* Hex */\n    1) {\n      len = len + 2 | 0;\n    }\n  }\n\n  var buffer = \"\";\n\n  if (justify === \"+\" && filter === \" \") {\n    for (var _for = len; _for < width; ++_for) {\n      buffer = buffer + filter;\n    }\n  }\n\n  if (signedconv) {\n    if (sign < 0) {\n      buffer = buffer + \"-\";\n    } else if (signstyle !== \"-\") {\n      buffer = buffer + signstyle;\n    }\n  }\n\n  if (alternate && base ===\n  /* Oct */\n  0) {\n    buffer = buffer + \"0\";\n  }\n\n  if (alternate && base ===\n  /* Hex */\n  1) {\n    buffer = buffer + \"0x\";\n  }\n\n  if (justify === \"+\" && filter === \"0\") {\n    for (var _for$1 = len; _for$1 < width; ++_for$1) {\n      buffer = buffer + filter;\n    }\n  }\n\n  buffer = uppercase ? buffer + rawbuffer.toUpperCase() : buffer + rawbuffer;\n\n  if (justify === \"-\") {\n    for (var _for$2 = len; _for$2 < width; ++_for$2) {\n      buffer = buffer + \" \";\n    }\n  }\n\n  return buffer;\n}\n\nfunction caml_format_int(fmt, i) {\n  if (fmt === \"%d\") {\n    return String(i);\n  }\n\n  var f = parse_format(fmt);\n  var i$1 = i < 0 ? f.signedconv ? (f.sign = -1, -i) : i >>> 0 : i;\n  var s = i$1.toString(int_of_base(f.base));\n\n  if (f.prec >= 0) {\n    f.filter = \" \";\n    var n = f.prec - s.length | 0;\n\n    if (n > 0) {\n      s = \"0\".repeat(n) + s;\n    }\n  }\n\n  return finish_formatting(f, s);\n}\n\nfunction dec_of_pos_int64(x) {\n  if (!Caml_int64.lt(x, Caml_int64.zero)) {\n    return Caml_int64.to_string(x);\n  }\n\n  var wbase = Caml_int64.mk(10, 0);\n  var y = Caml_int64.discard_sign(x);\n  var match = Caml_int64.div_mod(y, wbase);\n  var match$1 = Caml_int64.div_mod(Caml_int64.add(Caml_int64.mk(8, 0), match[1]), wbase);\n  var quotient = Caml_int64.add(Caml_int64.add(Caml_int64.mk(-858993460, 214748364), match[0]), match$1[0]);\n  return Caml_int64.to_string(quotient) + \"0123456789\"[Caml_int64.to_int32(match$1[1])];\n}\n\nfunction oct_of_int64(x) {\n  var s = \"\";\n  var wbase = Caml_int64.mk(8, 0);\n  var cvtbl = \"01234567\";\n\n  if (Caml_int64.lt(x, Caml_int64.zero)) {\n    var y = Caml_int64.discard_sign(x);\n    var match = Caml_int64.div_mod(y, wbase);\n    var quotient = Caml_int64.add(Caml_int64.mk(0, 268435456), match[0]);\n    var modulus = match[1];\n    s = cvtbl[Caml_int64.to_int32(modulus)] + s;\n\n    while (Caml_int64.neq(quotient, Caml_int64.zero)) {\n      var match$1 = Caml_int64.div_mod(quotient, wbase);\n      quotient = match$1[0];\n      modulus = match$1[1];\n      s = cvtbl[Caml_int64.to_int32(modulus)] + s;\n    }\n\n    ;\n  } else {\n    var match$2 = Caml_int64.div_mod(x, wbase);\n    var quotient$1 = match$2[0];\n    var modulus$1 = match$2[1];\n    s = cvtbl[Caml_int64.to_int32(modulus$1)] + s;\n\n    while (Caml_int64.neq(quotient$1, Caml_int64.zero)) {\n      var match$3 = Caml_int64.div_mod(quotient$1, wbase);\n      quotient$1 = match$3[0];\n      modulus$1 = match$3[1];\n      s = cvtbl[Caml_int64.to_int32(modulus$1)] + s;\n    }\n\n    ;\n  }\n\n  return s;\n}\n\nfunction caml_int64_format(fmt, x) {\n  if (fmt === \"%d\") {\n    return Caml_int64.to_string(x);\n  }\n\n  var f = parse_format(fmt);\n  var x$1 = f.signedconv && Caml_int64.lt(x, Caml_int64.zero) ? (f.sign = -1, Caml_int64.neg(x)) : x;\n  var match = f.base;\n  var s;\n\n  switch (match) {\n    case\n    /* Oct */\n    0:\n      s = oct_of_int64(x$1);\n      break;\n\n    case\n    /* Hex */\n    1:\n      s = Caml_int64.to_hex(x$1);\n      break;\n\n    case\n    /* Dec */\n    2:\n      s = dec_of_pos_int64(x$1);\n      break;\n  }\n\n  var fill_s;\n\n  if (f.prec >= 0) {\n    f.filter = \" \";\n    var n = f.prec - s.length | 0;\n    fill_s = n > 0 ? \"0\".repeat(n) + s : s;\n  } else {\n    fill_s = s;\n  }\n\n  return finish_formatting(f, fill_s);\n}\n\nfunction caml_format_float(fmt, x) {\n  var f = parse_format(fmt);\n  var prec = f.prec < 0 ? 6 : f.prec;\n  var x$1 = x < 0 ? (f.sign = -1, -x) : x;\n  var s = \"\";\n\n  if (isNaN(x$1)) {\n    s = \"nan\";\n    f.filter = \" \";\n  } else if (isFinite(x$1)) {\n    var match = f.conv;\n\n    switch (match) {\n      case \"e\":\n        s = x$1.toExponential(prec);\n        var i = s.length;\n\n        if (s[i - 3 | 0] === \"e\") {\n          s = s.slice(0, i - 1 | 0) + (\"0\" + s.slice(i - 1 | 0));\n        }\n\n        break;\n\n      case \"f\":\n        s = x$1.toFixed(prec);\n        break;\n\n      case \"g\":\n        var prec$1 = prec !== 0 ? prec : 1;\n        s = x$1.toExponential(prec$1 - 1 | 0);\n        var j = s.indexOf(\"e\");\n        var exp = Number(s.slice(j + 1 | 0)) | 0;\n\n        if (exp < -4 || x$1 >= 1e21 || x$1.toFixed().length > prec$1) {\n          var i$1 = j - 1 | 0;\n\n          while (s[i$1] === \"0\") {\n            i$1 = i$1 - 1 | 0;\n          }\n\n          ;\n\n          if (s[i$1] === \".\") {\n            i$1 = i$1 - 1 | 0;\n          }\n\n          s = s.slice(0, i$1 + 1 | 0) + s.slice(j);\n          var i$2 = s.length;\n\n          if (s[i$2 - 3 | 0] === \"e\") {\n            s = s.slice(0, i$2 - 1 | 0) + (\"0\" + s.slice(i$2 - 1 | 0));\n          }\n        } else {\n          var p = prec$1;\n\n          if (exp < 0) {\n            p = p - (exp + 1 | 0) | 0;\n            s = x$1.toFixed(p);\n          } else {\n            while (function () {\n              s = x$1.toFixed(p);\n              return s.length > (prec$1 + 1 | 0);\n            }()) {\n              p = p - 1 | 0;\n            }\n\n            ;\n          }\n\n          if (p !== 0) {\n            var k = s.length - 1 | 0;\n\n            while (s[k] === \"0\") {\n              k = k - 1 | 0;\n            }\n\n            ;\n\n            if (s[k] === \".\") {\n              k = k - 1 | 0;\n            }\n\n            s = s.slice(0, k + 1 | 0);\n          }\n        }\n\n        break;\n\n      default:\n    }\n  } else {\n    s = \"inf\";\n    f.filter = \" \";\n  }\n\n  return finish_formatting(f, s);\n}\n\nvar caml_hexstring_of_float = function caml_hexstring_of_float(x, prec, style) {\n  if (!isFinite(x)) {\n    if (isNaN(x)) return \"nan\";\n    return x > 0 ? \"infinity\" : \"-infinity\";\n  }\n\n  var sign = x == 0 && 1 / x == -Infinity ? 1 : x >= 0 ? 0 : 1;\n  if (sign) x = -x;\n  var exp = 0;\n\n  if (x == 0) {} else if (x < 1) {\n    while (x < 1 && exp > -1022) {\n      x *= 2;\n      exp--;\n    }\n  } else {\n    while (x >= 2) {\n      x /= 2;\n      exp++;\n    }\n  }\n\n  var exp_sign = exp < 0 ? '' : '+';\n  var sign_str = '';\n  if (sign) sign_str = '-';else {\n    switch (style) {\n      case 43\n      /* '+' */\n      :\n        sign_str = '+';\n        break;\n\n      case 32\n      /* ' ' */\n      :\n        sign_str = ' ';\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  if (prec >= 0 && prec < 13) {\n    /* If a precision is given, and is small, round mantissa accordingly */\n    var cst = Math.pow(2, prec * 4);\n    x = Math.round(x * cst) / cst;\n  }\n\n  var x_str = x.toString(16);\n\n  if (prec >= 0) {\n    var idx = x_str.indexOf('.');\n\n    if (idx < 0) {\n      x_str += '.' + '0'.repeat(prec);\n    } else {\n      var size = idx + 1 + prec;\n      if (x_str.length < size) x_str += '0'.repeat(size - x_str.length);else x_str = x_str.substr(0, size);\n    }\n  }\n\n  return sign_str + '0x' + x_str + 'p' + exp_sign + exp.toString(10);\n};\n\nvar float_of_string = function float_of_string(s, exn) {\n  var res = +s;\n  if (s.length > 0 && res === res) return res;\n  s = s.replace(/_/g, \"\");\n  res = +s;\n\n  if (s.length > 0 && res === res || /^[+-]?nan$/i.test(s)) {\n    return res;\n  }\n\n  ;\n  var m = /^ *([+-]?)0x([0-9a-f]+)\\.?([0-9a-f]*)p([+-]?[0-9]+)/i.exec(s); //            1        2             3           4\n\n  if (m) {\n    var m3 = m[3].replace(/0+$/, '');\n    var mantissa = parseInt(m[1] + m[2] + m3, 16);\n    var exponent = (m[4] | 0) - 4 * m3.length;\n    res = mantissa * Math.pow(2, exponent);\n    return res;\n  }\n\n  if (/^\\+?inf(inity)?$/i.test(s)) return Infinity;\n  if (/^-inf(inity)?$/i.test(s)) return -Infinity;\n  throw exn;\n};\n\nfunction caml_float_of_string(s) {\n  return float_of_string(s, [Caml_builtin_exceptions.failure, \"float_of_string\"]);\n}\n\nvar caml_nativeint_format = caml_format_int;\nvar caml_int32_format = caml_format_int;\nvar caml_int32_of_string = caml_int_of_string;\nvar caml_nativeint_of_string = caml_int_of_string;\nexport { caml_format_float, caml_hexstring_of_float, caml_format_int, caml_nativeint_format, caml_int32_format, caml_float_of_string, caml_int64_format, caml_int_of_string, caml_int32_of_string, caml_int64_of_string, caml_nativeint_of_string };\n/* No side effect */","map":{"version":3,"sources":["/Users/Yves/Projects/Concenix/AdminPanel/node_modules/bs-platform/lib/es6/caml_format.js"],"names":["Caml_int32","Caml_int64","Caml_builtin_exceptions","parse_digit","c","int_of_string_base","param","parse_sign_and_base","s","sign","base","i","match","charCodeAt","match$1","caml_int_of_string","threshold","len","length","d","failure","aux","_acc","_k","k","acc","a","v","acc$1","res","or_res","caml_int64_of_string","hbase","of_int32","mk","max_int","lt","zero","ge","gt","add","mul","or_","eq","neq","int_of_base","lowercase","parse_format","fmt","invalid_argument","f","justify","signstyle","filter","alternate","signedconv","width","uppercase","prec","conv","_i","exit","String","fromCharCode","j","w","imul","j$1","finish_formatting","config","rawbuffer","buffer","_for","_for$1","toUpperCase","_for$2","caml_format_int","i$1","toString","n","repeat","dec_of_pos_int64","x","to_string","wbase","y","discard_sign","div_mod","quotient","to_int32","oct_of_int64","cvtbl","modulus","match$2","quotient$1","modulus$1","match$3","caml_int64_format","x$1","neg","to_hex","fill_s","caml_format_float","isNaN","isFinite","toExponential","slice","toFixed","prec$1","indexOf","exp","Number","i$2","p","caml_hexstring_of_float","style","Infinity","exp_sign","sign_str","cst","Math","pow","round","x_str","idx","size","substr","float_of_string","exn","replace","test","m","exec","m3","mantissa","parseInt","exponent","caml_float_of_string","caml_nativeint_format","caml_int32_format","caml_int32_of_string","caml_nativeint_of_string"],"mappings":"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","sourcesContent":["\n\nimport * as Caml_int32 from \"./caml_int32.js\";\nimport * as Caml_int64 from \"./caml_int64.js\";\nimport * as Caml_builtin_exceptions from \"./caml_builtin_exceptions.js\";\n\nfunction parse_digit(c) {\n  if (c >= 65) {\n    if (c >= 97) {\n      if (c >= 123) {\n        return -1;\n      } else {\n        return c - 87 | 0;\n      }\n    } else if (c >= 91) {\n      return -1;\n    } else {\n      return c - 55 | 0;\n    }\n  } else if (c > 57 || c < 48) {\n    return -1;\n  } else {\n    return c - /* \"0\" */48 | 0;\n  }\n}\n\nfunction int_of_string_base(param) {\n  switch (param) {\n    case /* Oct */0 :\n        return 8;\n    case /* Hex */1 :\n        return 16;\n    case /* Dec */2 :\n        return 10;\n    case /* Bin */3 :\n        return 2;\n    \n  }\n}\n\nfunction parse_sign_and_base(s) {\n  var sign = 1;\n  var base = /* Dec */2;\n  var i = 0;\n  var match = s.charCodeAt(i);\n  switch (match) {\n    case 43 :\n        i = i + 1 | 0;\n        break;\n    case 44 :\n        break;\n    case 45 :\n        sign = -1;\n        i = i + 1 | 0;\n        break;\n    default:\n      \n  }\n  if (s[i] === \"0\") {\n    var match$1 = s.charCodeAt(i + 1 | 0);\n    if (match$1 >= 89) {\n      if (match$1 >= 111) {\n        if (match$1 < 121) {\n          switch (match$1 - 111 | 0) {\n            case 0 :\n                base = /* Oct */0;\n                i = i + 2 | 0;\n                break;\n            case 6 :\n                i = i + 2 | 0;\n                break;\n            case 1 :\n            case 2 :\n            case 3 :\n            case 4 :\n            case 5 :\n            case 7 :\n            case 8 :\n                break;\n            case 9 :\n                base = /* Hex */1;\n                i = i + 2 | 0;\n                break;\n            \n          }\n        }\n        \n      } else if (match$1 === 98) {\n        base = /* Bin */3;\n        i = i + 2 | 0;\n      }\n      \n    } else if (match$1 !== 66) {\n      if (match$1 >= 79) {\n        switch (match$1 - 79 | 0) {\n          case 0 :\n              base = /* Oct */0;\n              i = i + 2 | 0;\n              break;\n          case 6 :\n              i = i + 2 | 0;\n              break;\n          case 1 :\n          case 2 :\n          case 3 :\n          case 4 :\n          case 5 :\n          case 7 :\n          case 8 :\n              break;\n          case 9 :\n              base = /* Hex */1;\n              i = i + 2 | 0;\n              break;\n          \n        }\n      }\n      \n    } else {\n      base = /* Bin */3;\n      i = i + 2 | 0;\n    }\n  }\n  return /* tuple */[\n          i,\n          sign,\n          base\n        ];\n}\n\nfunction caml_int_of_string(s) {\n  var match = parse_sign_and_base(s);\n  var i = match[0];\n  var base = int_of_string_base(match[2]);\n  var threshold = 4294967295;\n  var len = s.length;\n  var c = i < len ? s.charCodeAt(i) : /* \"\\000\" */0;\n  var d = parse_digit(c);\n  if (d < 0 || d >= base) {\n    throw [\n          Caml_builtin_exceptions.failure,\n          \"int_of_string\"\n        ];\n  }\n  var aux = function (_acc, _k) {\n    while(true) {\n      var k = _k;\n      var acc = _acc;\n      if (k === len) {\n        return acc;\n      }\n      var a = s.charCodeAt(k);\n      if (a === /* \"_\" */95) {\n        _k = k + 1 | 0;\n        continue ;\n      }\n      var v = parse_digit(a);\n      if (v < 0 || v >= base) {\n        throw [\n              Caml_builtin_exceptions.failure,\n              \"int_of_string\"\n            ];\n      }\n      var acc$1 = base * acc + v;\n      if (acc$1 > threshold) {\n        throw [\n              Caml_builtin_exceptions.failure,\n              \"int_of_string\"\n            ];\n      }\n      _k = k + 1 | 0;\n      _acc = acc$1;\n      continue ;\n    };\n  };\n  var res = match[1] * aux(d, i + 1 | 0);\n  var or_res = res | 0;\n  if (base === 10 && res !== or_res) {\n    throw [\n          Caml_builtin_exceptions.failure,\n          \"int_of_string\"\n        ];\n  }\n  return or_res;\n}\n\nfunction caml_int64_of_string(s) {\n  var match = parse_sign_and_base(s);\n  var hbase = match[2];\n  var i = match[0];\n  var base = Caml_int64.of_int32(int_of_string_base(hbase));\n  var sign = Caml_int64.of_int32(match[1]);\n  var threshold;\n  switch (hbase) {\n    case /* Oct */0 :\n        threshold = Caml_int64.mk(-1, 536870911);\n        break;\n    case /* Hex */1 :\n        threshold = Caml_int64.mk(-1, 268435455);\n        break;\n    case /* Dec */2 :\n        threshold = Caml_int64.mk(-1717986919, 429496729);\n        break;\n    case /* Bin */3 :\n        threshold = Caml_int64.max_int;\n        break;\n    \n  }\n  var len = s.length;\n  var c = i < len ? s.charCodeAt(i) : /* \"\\000\" */0;\n  var d = Caml_int64.of_int32(parse_digit(c));\n  if (Caml_int64.lt(d, Caml_int64.zero) || Caml_int64.ge(d, base)) {\n    throw [\n          Caml_builtin_exceptions.failure,\n          \"int64_of_string\"\n        ];\n  }\n  var aux = function (_acc, _k) {\n    while(true) {\n      var k = _k;\n      var acc = _acc;\n      if (k === len) {\n        return acc;\n      }\n      var a = s.charCodeAt(k);\n      if (a === /* \"_\" */95) {\n        _k = k + 1 | 0;\n        continue ;\n      }\n      var v = Caml_int64.of_int32(parse_digit(a));\n      if (Caml_int64.lt(v, Caml_int64.zero) || Caml_int64.ge(v, base) || Caml_int64.gt(acc, threshold)) {\n        throw [\n              Caml_builtin_exceptions.failure,\n              \"int64_of_string\"\n            ];\n      }\n      var acc$1 = Caml_int64.add(Caml_int64.mul(base, acc), v);\n      _k = k + 1 | 0;\n      _acc = acc$1;\n      continue ;\n    };\n  };\n  var res = Caml_int64.mul(sign, aux(d, i + 1 | 0));\n  var or_res = Caml_int64.or_(res, Caml_int64.zero);\n  if (Caml_int64.eq(base, Caml_int64.mk(10, 0)) && Caml_int64.neq(res, or_res)) {\n    throw [\n          Caml_builtin_exceptions.failure,\n          \"int64_of_string\"\n        ];\n  }\n  return or_res;\n}\n\nfunction int_of_base(param) {\n  switch (param) {\n    case /* Oct */0 :\n        return 8;\n    case /* Hex */1 :\n        return 16;\n    case /* Dec */2 :\n        return 10;\n    \n  }\n}\n\nfunction lowercase(c) {\n  if (c >= /* \"A\" */65 && c <= /* \"Z\" */90 || c >= /* \"\\192\" */192 && c <= /* \"\\214\" */214 || c >= /* \"\\216\" */216 && c <= /* \"\\222\" */222) {\n    return c + 32 | 0;\n  } else {\n    return c;\n  }\n}\n\nfunction parse_format(fmt) {\n  var len = fmt.length;\n  if (len > 31) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"format_int: format too long\"\n        ];\n  }\n  var f = {\n    justify: \"+\",\n    signstyle: \"-\",\n    filter: \" \",\n    alternate: false,\n    base: /* Dec */2,\n    signedconv: false,\n    width: 0,\n    uppercase: false,\n    sign: 1,\n    prec: -1,\n    conv: \"f\"\n  };\n  var _i = 0;\n  while(true) {\n    var i = _i;\n    if (i >= len) {\n      return f;\n    }\n    var c = fmt.charCodeAt(i);\n    var exit = 0;\n    if (c >= 69) {\n      if (c >= 88) {\n        if (c >= 121) {\n          exit = 1;\n        } else {\n          switch (c - 88 | 0) {\n            case 0 :\n                f.base = /* Hex */1;\n                f.uppercase = true;\n                _i = i + 1 | 0;\n                continue ;\n            case 13 :\n            case 14 :\n            case 15 :\n                exit = 5;\n                break;\n            case 12 :\n            case 17 :\n                exit = 4;\n                break;\n            case 23 :\n                f.base = /* Oct */0;\n                _i = i + 1 | 0;\n                continue ;\n            case 29 :\n                f.base = /* Dec */2;\n                _i = i + 1 | 0;\n                continue ;\n            case 1 :\n            case 2 :\n            case 3 :\n            case 4 :\n            case 5 :\n            case 6 :\n            case 7 :\n            case 8 :\n            case 9 :\n            case 10 :\n            case 11 :\n            case 16 :\n            case 18 :\n            case 19 :\n            case 20 :\n            case 21 :\n            case 22 :\n            case 24 :\n            case 25 :\n            case 26 :\n            case 27 :\n            case 28 :\n            case 30 :\n            case 31 :\n                exit = 1;\n                break;\n            case 32 :\n                f.base = /* Hex */1;\n                _i = i + 1 | 0;\n                continue ;\n            \n          }\n        }\n      } else if (c >= 72) {\n        exit = 1;\n      } else {\n        f.signedconv = true;\n        f.uppercase = true;\n        f.conv = String.fromCharCode(lowercase(c));\n        _i = i + 1 | 0;\n        continue ;\n      }\n    } else {\n      switch (c) {\n        case 35 :\n            f.alternate = true;\n            _i = i + 1 | 0;\n            continue ;\n        case 32 :\n        case 43 :\n            exit = 2;\n            break;\n        case 45 :\n            f.justify = \"-\";\n            _i = i + 1 | 0;\n            continue ;\n        case 46 :\n            f.prec = 0;\n            var j = i + 1 | 0;\n            while((function(j){\n                return function () {\n                  var w = fmt.charCodeAt(j) - /* \"0\" */48 | 0;\n                  return w >= 0 && w <= 9;\n                }\n                }(j))()) {\n              f.prec = (Caml_int32.imul(f.prec, 10) + fmt.charCodeAt(j) | 0) - /* \"0\" */48 | 0;\n              j = j + 1 | 0;\n            };\n            _i = j;\n            continue ;\n        case 33 :\n        case 34 :\n        case 36 :\n        case 37 :\n        case 38 :\n        case 39 :\n        case 40 :\n        case 41 :\n        case 42 :\n        case 44 :\n        case 47 :\n            exit = 1;\n            break;\n        case 48 :\n            f.filter = \"0\";\n            _i = i + 1 | 0;\n            continue ;\n        case 49 :\n        case 50 :\n        case 51 :\n        case 52 :\n        case 53 :\n        case 54 :\n        case 55 :\n        case 56 :\n        case 57 :\n            exit = 3;\n            break;\n        default:\n          exit = 1;\n      }\n    }\n    switch (exit) {\n      case 1 :\n          _i = i + 1 | 0;\n          continue ;\n      case 2 :\n          f.signstyle = String.fromCharCode(c);\n          _i = i + 1 | 0;\n          continue ;\n      case 3 :\n          f.width = 0;\n          var j$1 = i;\n          while((function(j$1){\n              return function () {\n                var w = fmt.charCodeAt(j$1) - /* \"0\" */48 | 0;\n                return w >= 0 && w <= 9;\n              }\n              }(j$1))()) {\n            f.width = (Caml_int32.imul(f.width, 10) + fmt.charCodeAt(j$1) | 0) - /* \"0\" */48 | 0;\n            j$1 = j$1 + 1 | 0;\n          };\n          _i = j$1;\n          continue ;\n      case 4 :\n          f.signedconv = true;\n          f.base = /* Dec */2;\n          _i = i + 1 | 0;\n          continue ;\n      case 5 :\n          f.signedconv = true;\n          f.conv = String.fromCharCode(c);\n          _i = i + 1 | 0;\n          continue ;\n      \n    }\n  };\n}\n\nfunction finish_formatting(config, rawbuffer) {\n  var justify = config.justify;\n  var signstyle = config.signstyle;\n  var filter = config.filter;\n  var alternate = config.alternate;\n  var base = config.base;\n  var signedconv = config.signedconv;\n  var width = config.width;\n  var uppercase = config.uppercase;\n  var sign = config.sign;\n  var len = rawbuffer.length;\n  if (signedconv && (sign < 0 || signstyle !== \"-\")) {\n    len = len + 1 | 0;\n  }\n  if (alternate) {\n    if (base === /* Oct */0) {\n      len = len + 1 | 0;\n    } else if (base === /* Hex */1) {\n      len = len + 2 | 0;\n    }\n    \n  }\n  var buffer = \"\";\n  if (justify === \"+\" && filter === \" \") {\n    for(var _for = len; _for < width; ++_for){\n      buffer = buffer + filter;\n    }\n  }\n  if (signedconv) {\n    if (sign < 0) {\n      buffer = buffer + \"-\";\n    } else if (signstyle !== \"-\") {\n      buffer = buffer + signstyle;\n    }\n    \n  }\n  if (alternate && base === /* Oct */0) {\n    buffer = buffer + \"0\";\n  }\n  if (alternate && base === /* Hex */1) {\n    buffer = buffer + \"0x\";\n  }\n  if (justify === \"+\" && filter === \"0\") {\n    for(var _for$1 = len; _for$1 < width; ++_for$1){\n      buffer = buffer + filter;\n    }\n  }\n  buffer = uppercase ? buffer + rawbuffer.toUpperCase() : buffer + rawbuffer;\n  if (justify === \"-\") {\n    for(var _for$2 = len; _for$2 < width; ++_for$2){\n      buffer = buffer + \" \";\n    }\n  }\n  return buffer;\n}\n\nfunction caml_format_int(fmt, i) {\n  if (fmt === \"%d\") {\n    return String(i);\n  }\n  var f = parse_format(fmt);\n  var i$1 = i < 0 ? (\n      f.signedconv ? (f.sign = -1, -i) : (i >>> 0)\n    ) : i;\n  var s = i$1.toString(int_of_base(f.base));\n  if (f.prec >= 0) {\n    f.filter = \" \";\n    var n = f.prec - s.length | 0;\n    if (n > 0) {\n      s = \"0\".repeat(n) + s;\n    }\n    \n  }\n  return finish_formatting(f, s);\n}\n\nfunction dec_of_pos_int64(x) {\n  if (!Caml_int64.lt(x, Caml_int64.zero)) {\n    return Caml_int64.to_string(x);\n  }\n  var wbase = Caml_int64.mk(10, 0);\n  var y = Caml_int64.discard_sign(x);\n  var match = Caml_int64.div_mod(y, wbase);\n  var match$1 = Caml_int64.div_mod(Caml_int64.add(Caml_int64.mk(8, 0), match[1]), wbase);\n  var quotient = Caml_int64.add(Caml_int64.add(Caml_int64.mk(-858993460, 214748364), match[0]), match$1[0]);\n  return Caml_int64.to_string(quotient) + \"0123456789\"[Caml_int64.to_int32(match$1[1])];\n}\n\nfunction oct_of_int64(x) {\n  var s = \"\";\n  var wbase = Caml_int64.mk(8, 0);\n  var cvtbl = \"01234567\";\n  if (Caml_int64.lt(x, Caml_int64.zero)) {\n    var y = Caml_int64.discard_sign(x);\n    var match = Caml_int64.div_mod(y, wbase);\n    var quotient = Caml_int64.add(Caml_int64.mk(0, 268435456), match[0]);\n    var modulus = match[1];\n    s = cvtbl[Caml_int64.to_int32(modulus)] + s;\n    while(Caml_int64.neq(quotient, Caml_int64.zero)) {\n      var match$1 = Caml_int64.div_mod(quotient, wbase);\n      quotient = match$1[0];\n      modulus = match$1[1];\n      s = cvtbl[Caml_int64.to_int32(modulus)] + s;\n    };\n  } else {\n    var match$2 = Caml_int64.div_mod(x, wbase);\n    var quotient$1 = match$2[0];\n    var modulus$1 = match$2[1];\n    s = cvtbl[Caml_int64.to_int32(modulus$1)] + s;\n    while(Caml_int64.neq(quotient$1, Caml_int64.zero)) {\n      var match$3 = Caml_int64.div_mod(quotient$1, wbase);\n      quotient$1 = match$3[0];\n      modulus$1 = match$3[1];\n      s = cvtbl[Caml_int64.to_int32(modulus$1)] + s;\n    };\n  }\n  return s;\n}\n\nfunction caml_int64_format(fmt, x) {\n  if (fmt === \"%d\") {\n    return Caml_int64.to_string(x);\n  }\n  var f = parse_format(fmt);\n  var x$1 = f.signedconv && Caml_int64.lt(x, Caml_int64.zero) ? (f.sign = -1, Caml_int64.neg(x)) : x;\n  var match = f.base;\n  var s;\n  switch (match) {\n    case /* Oct */0 :\n        s = oct_of_int64(x$1);\n        break;\n    case /* Hex */1 :\n        s = Caml_int64.to_hex(x$1);\n        break;\n    case /* Dec */2 :\n        s = dec_of_pos_int64(x$1);\n        break;\n    \n  }\n  var fill_s;\n  if (f.prec >= 0) {\n    f.filter = \" \";\n    var n = f.prec - s.length | 0;\n    fill_s = n > 0 ? \"0\".repeat(n) + s : s;\n  } else {\n    fill_s = s;\n  }\n  return finish_formatting(f, fill_s);\n}\n\nfunction caml_format_float(fmt, x) {\n  var f = parse_format(fmt);\n  var prec = f.prec < 0 ? 6 : f.prec;\n  var x$1 = x < 0 ? (f.sign = -1, -x) : x;\n  var s = \"\";\n  if (isNaN(x$1)) {\n    s = \"nan\";\n    f.filter = \" \";\n  } else if (isFinite(x$1)) {\n    var match = f.conv;\n    switch (match) {\n      case \"e\" :\n          s = x$1.toExponential(prec);\n          var i = s.length;\n          if (s[i - 3 | 0] === \"e\") {\n            s = s.slice(0, i - 1 | 0) + (\"0\" + s.slice(i - 1 | 0));\n          }\n          break;\n      case \"f\" :\n          s = x$1.toFixed(prec);\n          break;\n      case \"g\" :\n          var prec$1 = prec !== 0 ? prec : 1;\n          s = x$1.toExponential(prec$1 - 1 | 0);\n          var j = s.indexOf(\"e\");\n          var exp = Number(s.slice(j + 1 | 0)) | 0;\n          if (exp < -4 || x$1 >= 1e21 || x$1.toFixed().length > prec$1) {\n            var i$1 = j - 1 | 0;\n            while(s[i$1] === \"0\") {\n              i$1 = i$1 - 1 | 0;\n            };\n            if (s[i$1] === \".\") {\n              i$1 = i$1 - 1 | 0;\n            }\n            s = s.slice(0, i$1 + 1 | 0) + s.slice(j);\n            var i$2 = s.length;\n            if (s[i$2 - 3 | 0] === \"e\") {\n              s = s.slice(0, i$2 - 1 | 0) + (\"0\" + s.slice(i$2 - 1 | 0));\n            }\n            \n          } else {\n            var p = prec$1;\n            if (exp < 0) {\n              p = p - (exp + 1 | 0) | 0;\n              s = x$1.toFixed(p);\n            } else {\n              while((function () {\n                      s = x$1.toFixed(p);\n                      return s.length > (prec$1 + 1 | 0);\n                    })()) {\n                p = p - 1 | 0;\n              };\n            }\n            if (p !== 0) {\n              var k = s.length - 1 | 0;\n              while(s[k] === \"0\") {\n                k = k - 1 | 0;\n              };\n              if (s[k] === \".\") {\n                k = k - 1 | 0;\n              }\n              s = s.slice(0, k + 1 | 0);\n            }\n            \n          }\n          break;\n      default:\n        \n    }\n  } else {\n    s = \"inf\";\n    f.filter = \" \";\n  }\n  return finish_formatting(f, s);\n}\n\nvar caml_hexstring_of_float = (function(x,prec,style){\n  if (!isFinite(x)) {\n    if (isNaN(x)) return \"nan\";\n    return x > 0 ? \"infinity\":\"-infinity\";\n  }\n  var sign = (x==0 && 1/x == -Infinity)?1:(x>=0)?0:1;\n  if(sign) x = -x;\n  var exp = 0;\n  if (x == 0) { }\n  else if (x < 1) {\n    while (x < 1 && exp > -1022)  { x *= 2; exp-- }\n  } else {\n    while (x >= 2) { x /= 2; exp++ }\n  }\n  var exp_sign = exp < 0 ? '' : '+';\n  var sign_str = '';\n  if (sign) sign_str = '-'\n  else {\n    switch(style){\n    case 43 /* '+' */: sign_str = '+'; break;\n    case 32 /* ' ' */: sign_str = ' '; break;\n    default: break;\n    }\n  }\n  if (prec >= 0 && prec < 13) {\n    /* If a precision is given, and is small, round mantissa accordingly */\n      var cst = Math.pow(2,prec * 4);\n      x = Math.round(x * cst) / cst;\n  }\n  var x_str = x.toString(16);\n  if(prec >= 0){\n      var idx = x_str.indexOf('.');\n    if(idx<0) {\n      x_str += '.' +  '0'.repeat(prec);\n    }\n    else {\n      var size = idx+1+prec;\n      if(x_str.length < size)\n        x_str += '0'.repeat(size - x_str.length);\n      else\n        x_str = x_str.substr(0,size);\n    }\n  }\n  return  (sign_str + '0x' + x_str + 'p' + exp_sign + exp.toString(10));\n});\n\nvar float_of_string = (function(s,exn){\n\n    var res = +s;\n    if ((s.length > 0) && (res === res))\n        return res;\n    s = s.replace(/_/g, \"\");\n    res = +s;\n    if (((s.length > 0) && (res === res)) || /^[+-]?nan$/i.test(s)) {\n        return res;\n    };\n    var m = /^ *([+-]?)0x([0-9a-f]+)\\.?([0-9a-f]*)p([+-]?[0-9]+)/i.exec(s);\n    //            1        2             3           4\n    if(m){\n        var m3 = m[3].replace(/0+$/,'');\n        var mantissa = parseInt(m[1] + m[2] + m3, 16);\n        var exponent = (m[4]|0) - 4*m3.length;\n        res = mantissa * Math.pow(2, exponent);\n        return res;\n    }\n    if (/^\\+?inf(inity)?$/i.test(s))\n        return Infinity;\n    if (/^-inf(inity)?$/i.test(s))\n        return -Infinity;\n    throw exn;\n});\n\nfunction caml_float_of_string(s) {\n  return float_of_string(s, [\n              Caml_builtin_exceptions.failure,\n              \"float_of_string\"\n            ]);\n}\n\nvar caml_nativeint_format = caml_format_int;\n\nvar caml_int32_format = caml_format_int;\n\nvar caml_int32_of_string = caml_int_of_string;\n\nvar caml_nativeint_of_string = caml_int_of_string;\n\nexport {\n  caml_format_float ,\n  caml_hexstring_of_float ,\n  caml_format_int ,\n  caml_nativeint_format ,\n  caml_int32_format ,\n  caml_float_of_string ,\n  caml_int64_format ,\n  caml_int_of_string ,\n  caml_int32_of_string ,\n  caml_int64_of_string ,\n  caml_nativeint_of_string ,\n  \n}\n/* No side effect */\n"]},"metadata":{},"sourceType":"module"}