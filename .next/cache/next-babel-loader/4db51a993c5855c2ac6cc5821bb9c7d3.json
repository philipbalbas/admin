{"ast":null,"code":"import * as Caml_builtin_exceptions from \"./caml_builtin_exceptions.js\";\n\nfunction get(s, i) {\n  if (i < 0 || i >= s.length) {\n    throw [Caml_builtin_exceptions.invalid_argument, \"index out of bounds\"];\n  }\n\n  return s[i];\n}\n\nfunction caml_fill_bytes(s, i, l, c) {\n  if (l <= 0) {\n    return;\n  }\n\n  for (var k = i, k_finish = l + i | 0; k < k_finish; ++k) {\n    s[k] = c;\n  }\n}\n\nfunction caml_create_bytes(len) {\n  if (len < 0) {\n    throw [Caml_builtin_exceptions.invalid_argument, \"String.create\"];\n  }\n\n  var result = new Array(len);\n\n  for (var i = 0; i < len; ++i) {\n    result[i] =\n    /* \"\\000\" */\n    0;\n  }\n\n  return result;\n}\n\nfunction caml_blit_bytes(s1, i1, s2, i2, len) {\n  if (len <= 0) {\n    return;\n  }\n\n  if (s1 === s2) {\n    if (i1 < i2) {\n      var range_a = (s1.length - i2 | 0) - 1 | 0;\n      var range_b = len - 1 | 0;\n      var range = range_a > range_b ? range_b : range_a;\n\n      for (var j = range; j >= 0; --j) {\n        s1[i2 + j | 0] = s1[i1 + j | 0];\n      }\n\n      return;\n    }\n\n    if (i1 <= i2) {\n      return;\n    }\n\n    var range_a$1 = (s1.length - i1 | 0) - 1 | 0;\n    var range_b$1 = len - 1 | 0;\n    var range$1 = range_a$1 > range_b$1 ? range_b$1 : range_a$1;\n\n    for (var k = 0; k <= range$1; ++k) {\n      s1[i2 + k | 0] = s1[i1 + k | 0];\n    }\n\n    return;\n  }\n\n  var off1 = s1.length - i1 | 0;\n\n  if (len <= off1) {\n    for (var i = 0; i < len; ++i) {\n      s2[i2 + i | 0] = s1[i1 + i | 0];\n    }\n\n    return;\n  }\n\n  for (var i$1 = 0; i$1 < off1; ++i$1) {\n    s2[i2 + i$1 | 0] = s1[i1 + i$1 | 0];\n  }\n\n  for (var i$2 = off1; i$2 < len; ++i$2) {\n    s2[i2 + i$2 | 0] =\n    /* \"\\000\" */\n    0;\n  }\n}\n\nfunction bytes_to_string(a) {\n  var i = 0;\n  var len = a.length;\n  var s = \"\";\n  var s_len = len;\n\n  if (i === 0 && len <= 4096 && len === a.length) {\n    return String.fromCharCode.apply(null, a);\n  }\n\n  var offset = 0;\n\n  while (s_len > 0) {\n    var next = s_len < 1024 ? s_len : 1024;\n    var tmp_bytes = new Array(next);\n    caml_blit_bytes(a, offset, tmp_bytes, 0, next);\n    s = s + String.fromCharCode.apply(null, tmp_bytes);\n    s_len = s_len - next | 0;\n    offset = offset + next | 0;\n  }\n\n  ;\n  return s;\n}\n\nfunction caml_blit_string(s1, i1, s2, i2, len) {\n  if (len <= 0) {\n    return;\n  }\n\n  var off1 = s1.length - i1 | 0;\n\n  if (len <= off1) {\n    for (var i = 0; i < len; ++i) {\n      s2[i2 + i | 0] = s1.charCodeAt(i1 + i | 0);\n    }\n\n    return;\n  }\n\n  for (var i$1 = 0; i$1 < off1; ++i$1) {\n    s2[i2 + i$1 | 0] = s1.charCodeAt(i1 + i$1 | 0);\n  }\n\n  for (var i$2 = off1; i$2 < len; ++i$2) {\n    s2[i2 + i$2 | 0] =\n    /* \"\\000\" */\n    0;\n  }\n}\n\nfunction bytes_of_string(s) {\n  var len = s.length;\n  var res = new Array(len);\n\n  for (var i = 0; i < len; ++i) {\n    res[i] = s.charCodeAt(i);\n  }\n\n  return res;\n}\n\nexport { caml_create_bytes, caml_fill_bytes, get, bytes_to_string, caml_blit_bytes, caml_blit_string, bytes_of_string };\n/* No side effect */","map":{"version":3,"sources":["/Users/Yves/Projects/Concenix/AdminPanel/node_modules/bs-platform/lib/es6/caml_bytes.js"],"names":["Caml_builtin_exceptions","get","s","i","length","invalid_argument","caml_fill_bytes","l","c","k","k_finish","caml_create_bytes","len","result","Array","caml_blit_bytes","s1","i1","s2","i2","range_a","range_b","range","j","range_a$1","range_b$1","range$1","off1","i$1","i$2","bytes_to_string","a","s_len","String","fromCharCode","apply","offset","next","tmp_bytes","caml_blit_string","charCodeAt","bytes_of_string","res"],"mappings":"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","sourcesContent":["\n\nimport * as Caml_builtin_exceptions from \"./caml_builtin_exceptions.js\";\n\nfunction get(s, i) {\n  if (i < 0 || i >= s.length) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"index out of bounds\"\n        ];\n  }\n  return s[i];\n}\n\nfunction caml_fill_bytes(s, i, l, c) {\n  if (l <= 0) {\n    return ;\n  }\n  for(var k = i ,k_finish = l + i | 0; k < k_finish; ++k){\n    s[k] = c;\n  }\n  \n}\n\nfunction caml_create_bytes(len) {\n  if (len < 0) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"String.create\"\n        ];\n  }\n  var result = new Array(len);\n  for(var i = 0; i < len; ++i){\n    result[i] = /* \"\\000\" */0;\n  }\n  return result;\n}\n\nfunction caml_blit_bytes(s1, i1, s2, i2, len) {\n  if (len <= 0) {\n    return ;\n  }\n  if (s1 === s2) {\n    if (i1 < i2) {\n      var range_a = (s1.length - i2 | 0) - 1 | 0;\n      var range_b = len - 1 | 0;\n      var range = range_a > range_b ? range_b : range_a;\n      for(var j = range; j >= 0; --j){\n        s1[i2 + j | 0] = s1[i1 + j | 0];\n      }\n      return ;\n    }\n    if (i1 <= i2) {\n      return ;\n    }\n    var range_a$1 = (s1.length - i1 | 0) - 1 | 0;\n    var range_b$1 = len - 1 | 0;\n    var range$1 = range_a$1 > range_b$1 ? range_b$1 : range_a$1;\n    for(var k = 0; k <= range$1; ++k){\n      s1[i2 + k | 0] = s1[i1 + k | 0];\n    }\n    return ;\n  }\n  var off1 = s1.length - i1 | 0;\n  if (len <= off1) {\n    for(var i = 0; i < len; ++i){\n      s2[i2 + i | 0] = s1[i1 + i | 0];\n    }\n    return ;\n  }\n  for(var i$1 = 0; i$1 < off1; ++i$1){\n    s2[i2 + i$1 | 0] = s1[i1 + i$1 | 0];\n  }\n  for(var i$2 = off1; i$2 < len; ++i$2){\n    s2[i2 + i$2 | 0] = /* \"\\000\" */0;\n  }\n  \n}\n\nfunction bytes_to_string(a) {\n  var i = 0;\n  var len = a.length;\n  var s = \"\";\n  var s_len = len;\n  if (i === 0 && len <= 4096 && len === a.length) {\n    return String.fromCharCode.apply(null, a);\n  }\n  var offset = 0;\n  while(s_len > 0) {\n    var next = s_len < 1024 ? s_len : 1024;\n    var tmp_bytes = new Array(next);\n    caml_blit_bytes(a, offset, tmp_bytes, 0, next);\n    s = s + String.fromCharCode.apply(null, tmp_bytes);\n    s_len = s_len - next | 0;\n    offset = offset + next | 0;\n  };\n  return s;\n}\n\nfunction caml_blit_string(s1, i1, s2, i2, len) {\n  if (len <= 0) {\n    return ;\n  }\n  var off1 = s1.length - i1 | 0;\n  if (len <= off1) {\n    for(var i = 0; i < len; ++i){\n      s2[i2 + i | 0] = s1.charCodeAt(i1 + i | 0);\n    }\n    return ;\n  }\n  for(var i$1 = 0; i$1 < off1; ++i$1){\n    s2[i2 + i$1 | 0] = s1.charCodeAt(i1 + i$1 | 0);\n  }\n  for(var i$2 = off1; i$2 < len; ++i$2){\n    s2[i2 + i$2 | 0] = /* \"\\000\" */0;\n  }\n  \n}\n\nfunction bytes_of_string(s) {\n  var len = s.length;\n  var res = new Array(len);\n  for(var i = 0; i < len; ++i){\n    res[i] = s.charCodeAt(i);\n  }\n  return res;\n}\n\nexport {\n  caml_create_bytes ,\n  caml_fill_bytes ,\n  get ,\n  bytes_to_string ,\n  caml_blit_bytes ,\n  caml_blit_string ,\n  bytes_of_string ,\n  \n}\n/* No side effect */\n"]},"metadata":{},"sourceType":"module"}