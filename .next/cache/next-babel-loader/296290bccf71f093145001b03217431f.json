{"ast":null,"code":"import * as Block from \"./block.js\";\n\nfunction erase_rel(rest) {\n  if (typeof rest === \"number\") {\n    return (\n      /* End_of_fmtty */\n      0\n    );\n  }\n\n  switch (rest.tag | 0) {\n    case\n    /* Char_ty */\n    0:\n      return (\n        /* Char_ty */\n        Block.__(0, [erase_rel(rest[0])])\n      );\n\n    case\n    /* String_ty */\n    1:\n      return (\n        /* String_ty */\n        Block.__(1, [erase_rel(rest[0])])\n      );\n\n    case\n    /* Int_ty */\n    2:\n      return (\n        /* Int_ty */\n        Block.__(2, [erase_rel(rest[0])])\n      );\n\n    case\n    /* Int32_ty */\n    3:\n      return (\n        /* Int32_ty */\n        Block.__(3, [erase_rel(rest[0])])\n      );\n\n    case\n    /* Nativeint_ty */\n    4:\n      return (\n        /* Nativeint_ty */\n        Block.__(4, [erase_rel(rest[0])])\n      );\n\n    case\n    /* Int64_ty */\n    5:\n      return (\n        /* Int64_ty */\n        Block.__(5, [erase_rel(rest[0])])\n      );\n\n    case\n    /* Float_ty */\n    6:\n      return (\n        /* Float_ty */\n        Block.__(6, [erase_rel(rest[0])])\n      );\n\n    case\n    /* Bool_ty */\n    7:\n      return (\n        /* Bool_ty */\n        Block.__(7, [erase_rel(rest[0])])\n      );\n\n    case\n    /* Format_arg_ty */\n    8:\n      return (\n        /* Format_arg_ty */\n        Block.__(8, [rest[0], erase_rel(rest[1])])\n      );\n\n    case\n    /* Format_subst_ty */\n    9:\n      var ty1 = rest[0];\n      return (\n        /* Format_subst_ty */\n        Block.__(9, [ty1, ty1, erase_rel(rest[2])])\n      );\n\n    case\n    /* Alpha_ty */\n    10:\n      return (\n        /* Alpha_ty */\n        Block.__(10, [erase_rel(rest[0])])\n      );\n\n    case\n    /* Theta_ty */\n    11:\n      return (\n        /* Theta_ty */\n        Block.__(11, [erase_rel(rest[0])])\n      );\n\n    case\n    /* Any_ty */\n    12:\n      return (\n        /* Any_ty */\n        Block.__(12, [erase_rel(rest[0])])\n      );\n\n    case\n    /* Reader_ty */\n    13:\n      return (\n        /* Reader_ty */\n        Block.__(13, [erase_rel(rest[0])])\n      );\n\n    case\n    /* Ignored_reader_ty */\n    14:\n      return (\n        /* Ignored_reader_ty */\n        Block.__(14, [erase_rel(rest[0])])\n      );\n  }\n}\n\nfunction concat_fmtty(fmtty1, fmtty2) {\n  if (typeof fmtty1 === \"number\") {\n    return fmtty2;\n  }\n\n  switch (fmtty1.tag | 0) {\n    case\n    /* Char_ty */\n    0:\n      return (\n        /* Char_ty */\n        Block.__(0, [concat_fmtty(fmtty1[0], fmtty2)])\n      );\n\n    case\n    /* String_ty */\n    1:\n      return (\n        /* String_ty */\n        Block.__(1, [concat_fmtty(fmtty1[0], fmtty2)])\n      );\n\n    case\n    /* Int_ty */\n    2:\n      return (\n        /* Int_ty */\n        Block.__(2, [concat_fmtty(fmtty1[0], fmtty2)])\n      );\n\n    case\n    /* Int32_ty */\n    3:\n      return (\n        /* Int32_ty */\n        Block.__(3, [concat_fmtty(fmtty1[0], fmtty2)])\n      );\n\n    case\n    /* Nativeint_ty */\n    4:\n      return (\n        /* Nativeint_ty */\n        Block.__(4, [concat_fmtty(fmtty1[0], fmtty2)])\n      );\n\n    case\n    /* Int64_ty */\n    5:\n      return (\n        /* Int64_ty */\n        Block.__(5, [concat_fmtty(fmtty1[0], fmtty2)])\n      );\n\n    case\n    /* Float_ty */\n    6:\n      return (\n        /* Float_ty */\n        Block.__(6, [concat_fmtty(fmtty1[0], fmtty2)])\n      );\n\n    case\n    /* Bool_ty */\n    7:\n      return (\n        /* Bool_ty */\n        Block.__(7, [concat_fmtty(fmtty1[0], fmtty2)])\n      );\n\n    case\n    /* Format_arg_ty */\n    8:\n      return (\n        /* Format_arg_ty */\n        Block.__(8, [fmtty1[0], concat_fmtty(fmtty1[1], fmtty2)])\n      );\n\n    case\n    /* Format_subst_ty */\n    9:\n      return (\n        /* Format_subst_ty */\n        Block.__(9, [fmtty1[0], fmtty1[1], concat_fmtty(fmtty1[2], fmtty2)])\n      );\n\n    case\n    /* Alpha_ty */\n    10:\n      return (\n        /* Alpha_ty */\n        Block.__(10, [concat_fmtty(fmtty1[0], fmtty2)])\n      );\n\n    case\n    /* Theta_ty */\n    11:\n      return (\n        /* Theta_ty */\n        Block.__(11, [concat_fmtty(fmtty1[0], fmtty2)])\n      );\n\n    case\n    /* Any_ty */\n    12:\n      return (\n        /* Any_ty */\n        Block.__(12, [concat_fmtty(fmtty1[0], fmtty2)])\n      );\n\n    case\n    /* Reader_ty */\n    13:\n      return (\n        /* Reader_ty */\n        Block.__(13, [concat_fmtty(fmtty1[0], fmtty2)])\n      );\n\n    case\n    /* Ignored_reader_ty */\n    14:\n      return (\n        /* Ignored_reader_ty */\n        Block.__(14, [concat_fmtty(fmtty1[0], fmtty2)])\n      );\n  }\n}\n\nfunction concat_fmt(fmt1, fmt2) {\n  if (typeof fmt1 === \"number\") {\n    return fmt2;\n  }\n\n  switch (fmt1.tag | 0) {\n    case\n    /* Char */\n    0:\n      return (\n        /* Char */\n        Block.__(0, [concat_fmt(fmt1[0], fmt2)])\n      );\n\n    case\n    /* Caml_char */\n    1:\n      return (\n        /* Caml_char */\n        Block.__(1, [concat_fmt(fmt1[0], fmt2)])\n      );\n\n    case\n    /* String */\n    2:\n      return (\n        /* String */\n        Block.__(2, [fmt1[0], concat_fmt(fmt1[1], fmt2)])\n      );\n\n    case\n    /* Caml_string */\n    3:\n      return (\n        /* Caml_string */\n        Block.__(3, [fmt1[0], concat_fmt(fmt1[1], fmt2)])\n      );\n\n    case\n    /* Int */\n    4:\n      return (\n        /* Int */\n        Block.__(4, [fmt1[0], fmt1[1], fmt1[2], concat_fmt(fmt1[3], fmt2)])\n      );\n\n    case\n    /* Int32 */\n    5:\n      return (\n        /* Int32 */\n        Block.__(5, [fmt1[0], fmt1[1], fmt1[2], concat_fmt(fmt1[3], fmt2)])\n      );\n\n    case\n    /* Nativeint */\n    6:\n      return (\n        /* Nativeint */\n        Block.__(6, [fmt1[0], fmt1[1], fmt1[2], concat_fmt(fmt1[3], fmt2)])\n      );\n\n    case\n    /* Int64 */\n    7:\n      return (\n        /* Int64 */\n        Block.__(7, [fmt1[0], fmt1[1], fmt1[2], concat_fmt(fmt1[3], fmt2)])\n      );\n\n    case\n    /* Float */\n    8:\n      return (\n        /* Float */\n        Block.__(8, [fmt1[0], fmt1[1], fmt1[2], concat_fmt(fmt1[3], fmt2)])\n      );\n\n    case\n    /* Bool */\n    9:\n      return (\n        /* Bool */\n        Block.__(9, [fmt1[0], concat_fmt(fmt1[1], fmt2)])\n      );\n\n    case\n    /* Flush */\n    10:\n      return (\n        /* Flush */\n        Block.__(10, [concat_fmt(fmt1[0], fmt2)])\n      );\n\n    case\n    /* String_literal */\n    11:\n      return (\n        /* String_literal */\n        Block.__(11, [fmt1[0], concat_fmt(fmt1[1], fmt2)])\n      );\n\n    case\n    /* Char_literal */\n    12:\n      return (\n        /* Char_literal */\n        Block.__(12, [fmt1[0], concat_fmt(fmt1[1], fmt2)])\n      );\n\n    case\n    /* Format_arg */\n    13:\n      return (\n        /* Format_arg */\n        Block.__(13, [fmt1[0], fmt1[1], concat_fmt(fmt1[2], fmt2)])\n      );\n\n    case\n    /* Format_subst */\n    14:\n      return (\n        /* Format_subst */\n        Block.__(14, [fmt1[0], fmt1[1], concat_fmt(fmt1[2], fmt2)])\n      );\n\n    case\n    /* Alpha */\n    15:\n      return (\n        /* Alpha */\n        Block.__(15, [concat_fmt(fmt1[0], fmt2)])\n      );\n\n    case\n    /* Theta */\n    16:\n      return (\n        /* Theta */\n        Block.__(16, [concat_fmt(fmt1[0], fmt2)])\n      );\n\n    case\n    /* Formatting_lit */\n    17:\n      return (\n        /* Formatting_lit */\n        Block.__(17, [fmt1[0], concat_fmt(fmt1[1], fmt2)])\n      );\n\n    case\n    /* Formatting_gen */\n    18:\n      return (\n        /* Formatting_gen */\n        Block.__(18, [fmt1[0], concat_fmt(fmt1[1], fmt2)])\n      );\n\n    case\n    /* Reader */\n    19:\n      return (\n        /* Reader */\n        Block.__(19, [concat_fmt(fmt1[0], fmt2)])\n      );\n\n    case\n    /* Scan_char_set */\n    20:\n      return (\n        /* Scan_char_set */\n        Block.__(20, [fmt1[0], fmt1[1], concat_fmt(fmt1[2], fmt2)])\n      );\n\n    case\n    /* Scan_get_counter */\n    21:\n      return (\n        /* Scan_get_counter */\n        Block.__(21, [fmt1[0], concat_fmt(fmt1[1], fmt2)])\n      );\n\n    case\n    /* Scan_next_char */\n    22:\n      return (\n        /* Scan_next_char */\n        Block.__(22, [concat_fmt(fmt1[0], fmt2)])\n      );\n\n    case\n    /* Ignored_param */\n    23:\n      return (\n        /* Ignored_param */\n        Block.__(23, [fmt1[0], concat_fmt(fmt1[1], fmt2)])\n      );\n\n    case\n    /* Custom */\n    24:\n      return (\n        /* Custom */\n        Block.__(24, [fmt1[0], fmt1[1], concat_fmt(fmt1[2], fmt2)])\n      );\n  }\n}\n\nexport { concat_fmtty, erase_rel, concat_fmt };\n/* No side effect */","map":{"version":3,"sources":["/Users/Yves/Projects/Concenix/AdminPanel/node_modules/bs-platform/lib/es6/camlinternalFormatBasics.js"],"names":["Block","erase_rel","rest","tag","__","ty1","concat_fmtty","fmtty1","fmtty2","concat_fmt","fmt1","fmt2"],"mappings":"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","sourcesContent":["\n\nimport * as Block from \"./block.js\";\n\nfunction erase_rel(rest) {\n  if (typeof rest === \"number\") {\n    return /* End_of_fmtty */0;\n  }\n  switch (rest.tag | 0) {\n    case /* Char_ty */0 :\n        return /* Char_ty */Block.__(0, [erase_rel(rest[0])]);\n    case /* String_ty */1 :\n        return /* String_ty */Block.__(1, [erase_rel(rest[0])]);\n    case /* Int_ty */2 :\n        return /* Int_ty */Block.__(2, [erase_rel(rest[0])]);\n    case /* Int32_ty */3 :\n        return /* Int32_ty */Block.__(3, [erase_rel(rest[0])]);\n    case /* Nativeint_ty */4 :\n        return /* Nativeint_ty */Block.__(4, [erase_rel(rest[0])]);\n    case /* Int64_ty */5 :\n        return /* Int64_ty */Block.__(5, [erase_rel(rest[0])]);\n    case /* Float_ty */6 :\n        return /* Float_ty */Block.__(6, [erase_rel(rest[0])]);\n    case /* Bool_ty */7 :\n        return /* Bool_ty */Block.__(7, [erase_rel(rest[0])]);\n    case /* Format_arg_ty */8 :\n        return /* Format_arg_ty */Block.__(8, [\n                  rest[0],\n                  erase_rel(rest[1])\n                ]);\n    case /* Format_subst_ty */9 :\n        var ty1 = rest[0];\n        return /* Format_subst_ty */Block.__(9, [\n                  ty1,\n                  ty1,\n                  erase_rel(rest[2])\n                ]);\n    case /* Alpha_ty */10 :\n        return /* Alpha_ty */Block.__(10, [erase_rel(rest[0])]);\n    case /* Theta_ty */11 :\n        return /* Theta_ty */Block.__(11, [erase_rel(rest[0])]);\n    case /* Any_ty */12 :\n        return /* Any_ty */Block.__(12, [erase_rel(rest[0])]);\n    case /* Reader_ty */13 :\n        return /* Reader_ty */Block.__(13, [erase_rel(rest[0])]);\n    case /* Ignored_reader_ty */14 :\n        return /* Ignored_reader_ty */Block.__(14, [erase_rel(rest[0])]);\n    \n  }\n}\n\nfunction concat_fmtty(fmtty1, fmtty2) {\n  if (typeof fmtty1 === \"number\") {\n    return fmtty2;\n  }\n  switch (fmtty1.tag | 0) {\n    case /* Char_ty */0 :\n        return /* Char_ty */Block.__(0, [concat_fmtty(fmtty1[0], fmtty2)]);\n    case /* String_ty */1 :\n        return /* String_ty */Block.__(1, [concat_fmtty(fmtty1[0], fmtty2)]);\n    case /* Int_ty */2 :\n        return /* Int_ty */Block.__(2, [concat_fmtty(fmtty1[0], fmtty2)]);\n    case /* Int32_ty */3 :\n        return /* Int32_ty */Block.__(3, [concat_fmtty(fmtty1[0], fmtty2)]);\n    case /* Nativeint_ty */4 :\n        return /* Nativeint_ty */Block.__(4, [concat_fmtty(fmtty1[0], fmtty2)]);\n    case /* Int64_ty */5 :\n        return /* Int64_ty */Block.__(5, [concat_fmtty(fmtty1[0], fmtty2)]);\n    case /* Float_ty */6 :\n        return /* Float_ty */Block.__(6, [concat_fmtty(fmtty1[0], fmtty2)]);\n    case /* Bool_ty */7 :\n        return /* Bool_ty */Block.__(7, [concat_fmtty(fmtty1[0], fmtty2)]);\n    case /* Format_arg_ty */8 :\n        return /* Format_arg_ty */Block.__(8, [\n                  fmtty1[0],\n                  concat_fmtty(fmtty1[1], fmtty2)\n                ]);\n    case /* Format_subst_ty */9 :\n        return /* Format_subst_ty */Block.__(9, [\n                  fmtty1[0],\n                  fmtty1[1],\n                  concat_fmtty(fmtty1[2], fmtty2)\n                ]);\n    case /* Alpha_ty */10 :\n        return /* Alpha_ty */Block.__(10, [concat_fmtty(fmtty1[0], fmtty2)]);\n    case /* Theta_ty */11 :\n        return /* Theta_ty */Block.__(11, [concat_fmtty(fmtty1[0], fmtty2)]);\n    case /* Any_ty */12 :\n        return /* Any_ty */Block.__(12, [concat_fmtty(fmtty1[0], fmtty2)]);\n    case /* Reader_ty */13 :\n        return /* Reader_ty */Block.__(13, [concat_fmtty(fmtty1[0], fmtty2)]);\n    case /* Ignored_reader_ty */14 :\n        return /* Ignored_reader_ty */Block.__(14, [concat_fmtty(fmtty1[0], fmtty2)]);\n    \n  }\n}\n\nfunction concat_fmt(fmt1, fmt2) {\n  if (typeof fmt1 === \"number\") {\n    return fmt2;\n  }\n  switch (fmt1.tag | 0) {\n    case /* Char */0 :\n        return /* Char */Block.__(0, [concat_fmt(fmt1[0], fmt2)]);\n    case /* Caml_char */1 :\n        return /* Caml_char */Block.__(1, [concat_fmt(fmt1[0], fmt2)]);\n    case /* String */2 :\n        return /* String */Block.__(2, [\n                  fmt1[0],\n                  concat_fmt(fmt1[1], fmt2)\n                ]);\n    case /* Caml_string */3 :\n        return /* Caml_string */Block.__(3, [\n                  fmt1[0],\n                  concat_fmt(fmt1[1], fmt2)\n                ]);\n    case /* Int */4 :\n        return /* Int */Block.__(4, [\n                  fmt1[0],\n                  fmt1[1],\n                  fmt1[2],\n                  concat_fmt(fmt1[3], fmt2)\n                ]);\n    case /* Int32 */5 :\n        return /* Int32 */Block.__(5, [\n                  fmt1[0],\n                  fmt1[1],\n                  fmt1[2],\n                  concat_fmt(fmt1[3], fmt2)\n                ]);\n    case /* Nativeint */6 :\n        return /* Nativeint */Block.__(6, [\n                  fmt1[0],\n                  fmt1[1],\n                  fmt1[2],\n                  concat_fmt(fmt1[3], fmt2)\n                ]);\n    case /* Int64 */7 :\n        return /* Int64 */Block.__(7, [\n                  fmt1[0],\n                  fmt1[1],\n                  fmt1[2],\n                  concat_fmt(fmt1[3], fmt2)\n                ]);\n    case /* Float */8 :\n        return /* Float */Block.__(8, [\n                  fmt1[0],\n                  fmt1[1],\n                  fmt1[2],\n                  concat_fmt(fmt1[3], fmt2)\n                ]);\n    case /* Bool */9 :\n        return /* Bool */Block.__(9, [\n                  fmt1[0],\n                  concat_fmt(fmt1[1], fmt2)\n                ]);\n    case /* Flush */10 :\n        return /* Flush */Block.__(10, [concat_fmt(fmt1[0], fmt2)]);\n    case /* String_literal */11 :\n        return /* String_literal */Block.__(11, [\n                  fmt1[0],\n                  concat_fmt(fmt1[1], fmt2)\n                ]);\n    case /* Char_literal */12 :\n        return /* Char_literal */Block.__(12, [\n                  fmt1[0],\n                  concat_fmt(fmt1[1], fmt2)\n                ]);\n    case /* Format_arg */13 :\n        return /* Format_arg */Block.__(13, [\n                  fmt1[0],\n                  fmt1[1],\n                  concat_fmt(fmt1[2], fmt2)\n                ]);\n    case /* Format_subst */14 :\n        return /* Format_subst */Block.__(14, [\n                  fmt1[0],\n                  fmt1[1],\n                  concat_fmt(fmt1[2], fmt2)\n                ]);\n    case /* Alpha */15 :\n        return /* Alpha */Block.__(15, [concat_fmt(fmt1[0], fmt2)]);\n    case /* Theta */16 :\n        return /* Theta */Block.__(16, [concat_fmt(fmt1[0], fmt2)]);\n    case /* Formatting_lit */17 :\n        return /* Formatting_lit */Block.__(17, [\n                  fmt1[0],\n                  concat_fmt(fmt1[1], fmt2)\n                ]);\n    case /* Formatting_gen */18 :\n        return /* Formatting_gen */Block.__(18, [\n                  fmt1[0],\n                  concat_fmt(fmt1[1], fmt2)\n                ]);\n    case /* Reader */19 :\n        return /* Reader */Block.__(19, [concat_fmt(fmt1[0], fmt2)]);\n    case /* Scan_char_set */20 :\n        return /* Scan_char_set */Block.__(20, [\n                  fmt1[0],\n                  fmt1[1],\n                  concat_fmt(fmt1[2], fmt2)\n                ]);\n    case /* Scan_get_counter */21 :\n        return /* Scan_get_counter */Block.__(21, [\n                  fmt1[0],\n                  concat_fmt(fmt1[1], fmt2)\n                ]);\n    case /* Scan_next_char */22 :\n        return /* Scan_next_char */Block.__(22, [concat_fmt(fmt1[0], fmt2)]);\n    case /* Ignored_param */23 :\n        return /* Ignored_param */Block.__(23, [\n                  fmt1[0],\n                  concat_fmt(fmt1[1], fmt2)\n                ]);\n    case /* Custom */24 :\n        return /* Custom */Block.__(24, [\n                  fmt1[0],\n                  fmt1[1],\n                  concat_fmt(fmt1[2], fmt2)\n                ]);\n    \n  }\n}\n\nexport {\n  concat_fmtty ,\n  erase_rel ,\n  concat_fmt ,\n  \n}\n/* No side effect */\n"]},"metadata":{},"sourceType":"module"}