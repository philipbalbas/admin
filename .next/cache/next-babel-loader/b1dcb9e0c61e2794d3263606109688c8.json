{"ast":null,"code":"'use strict';\n\nvar Fetch = require(\"bs-fetch/src/Fetch.js\");\n\nvar Js_dict = require(\"bs-platform/lib/js/js_dict.js\");\n\nvar Caml_option = require(\"bs-platform/lib/js/caml_option.js\");\n\nvar ReasonRelay = require(\"reason-relay/src/ReasonRelay.bs.js\");\n\nvar Caml_exceptions = require(\"bs-platform/lib/js/caml_exceptions.js\");\n\nvar Caml_chrome_debugger = require(\"bs-platform/lib/js/caml_chrome_debugger.js\");\n\nvar Graphql_error = Caml_exceptions.create(\"RelayEnv-NextjsDefault.Graphql_error\");\n\nfunction fetchQuery(operation, variables, _cacheConfig) {\n  return fetch(\"http://localhost:4000/api\", Fetch.RequestInit.make(\n  /* Post */\n  2, {\n    \"content-type\": \"application/json\",\n    accept: \"application/json\"\n  }, Caml_option.some(JSON.stringify(Js_dict.fromList(\n  /* :: */\n  Caml_chrome_debugger.simpleVariant(\"::\", [\n  /* tuple */\n  [\"query\", operation.text],\n  /* :: */\n  Caml_chrome_debugger.simpleVariant(\"::\", [\n  /* tuple */\n  [\"variables\", variables],\n  /* [] */\n  0])])))), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(undefined)).then(function (resp) {\n    if (resp.ok) {\n      return resp.json();\n    } else {\n      return Promise.reject([Graphql_error, \"Request failed: \" + resp.statusText]);\n    }\n  });\n}\n\nvar network = ReasonRelay.Network.makePromiseBased(fetchQuery, undefined, undefined);\nvar environment = ReasonRelay.Environment.make(network, ReasonRelay.Store.make(ReasonRelay.RecordSource.make(undefined, undefined), undefined, undefined), undefined, undefined, undefined);\nexports.Graphql_error = Graphql_error;\nexports.fetchQuery = fetchQuery;\nexports.network = network;\nexports.environment = environment;\n/* network Not a pure module */","map":{"version":3,"sources":["/Users/Yves/Projects/Concenix/AdminPanel/common/RelayEnv.bs.js"],"names":["Fetch","require","Js_dict","Caml_option","ReasonRelay","Caml_exceptions","Caml_chrome_debugger","Graphql_error","create","fetchQuery","operation","variables","_cacheConfig","fetch","RequestInit","make","accept","some","JSON","stringify","fromList","simpleVariant","text","undefined","then","resp","ok","json","Promise","reject","statusText","network","Network","makePromiseBased","environment","Environment","Store","RecordSource","exports"],"mappings":"AAAA;;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,uBAAD,CAAnB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,+BAAD,CAArB;;AACA,IAAIE,WAAW,GAAGF,OAAO,CAAC,mCAAD,CAAzB;;AACA,IAAIG,WAAW,GAAGH,OAAO,CAAC,oCAAD,CAAzB;;AACA,IAAII,eAAe,GAAGJ,OAAO,CAAC,uCAAD,CAA7B;;AACA,IAAIK,oBAAoB,GAAGL,OAAO,CAAC,4CAAD,CAAlC;;AAEA,IAAIM,aAAa,GAAGF,eAAe,CAACG,MAAhB,CAAuB,sCAAvB,CAApB;;AAEA,SAASC,UAAT,CAAoBC,SAApB,EAA+BC,SAA/B,EAA0CC,YAA1C,EAAwD;AACtD,SAAOC,KAAK,CAAC,2BAAD,EAA8Bb,KAAK,CAACc,WAAN,CAAkBC,IAAlB;AAAuB;AAAU,GAAjC,EAAoC;AAC1D,oBAAgB,kBAD0C;AAE1DC,IAAAA,MAAM,EAAE;AAFkD,GAApC,EAGrBb,WAAW,CAACc,IAAZ,CAAiBC,IAAI,CAACC,SAAL,CAAejB,OAAO,CAACkB,QAAR;AAAiB;AAAQd,EAAAA,oBAAoB,CAACe,aAArB,CAAmC,IAAnC,EAAyC;AACrF;AAAW,GACT,OADS,EAETX,SAAS,CAACY,IAFD,CAD0E;AAKrF;AAAQhB,EAAAA,oBAAoB,CAACe,aAArB,CAAmC,IAAnC,EAAyC;AAC7C;AAAW,GACT,WADS,EAETV,SAFS,CADkC;AAK7C;AAAQ,GALqC,CAAzC,CAL6E,CAAzC,CAAzB,CAAf,CAAjB,CAHqB,EAeHY,SAfG,EAeQA,SAfR,EAemBA,SAfnB,EAe8BA,SAf9B,EAeyCA,SAfzC,EAeoDA,SAfpD,EAe+DA,SAf/D,EAe0EA,SAf1E,EAeqFA,SAfrF,CAA9B,CAAL,CAeoIC,IAfpI,CAe0I,UAAUC,IAAV,EAAgB;AACnJ,QAAIA,IAAI,CAACC,EAAT,EAAa;AACX,aAAOD,IAAI,CAACE,IAAL,EAAP;AACD,KAFD,MAEO;AACL,aAAOC,OAAO,CAACC,MAAR,CAAe,CACVtB,aADU,EAEV,qBAAqBkB,IAAI,CAACK,UAFhB,CAAf,CAAP;AAID;AACF,GAxBN,CAAP;AAyBD;;AAED,IAAIC,OAAO,GAAG3B,WAAW,CAAC4B,OAAZ,CAAoBC,gBAApB,CAAqCxB,UAArC,EAAiDc,SAAjD,EAA4DA,SAA5D,CAAd;AAEA,IAAIW,WAAW,GAAG9B,WAAW,CAAC+B,WAAZ,CAAwBpB,IAAxB,CAA6BgB,OAA7B,EAAsC3B,WAAW,CAACgC,KAAZ,CAAkBrB,IAAlB,CAAuBX,WAAW,CAACiC,YAAZ,CAAyBtB,IAAzB,CAA8BQ,SAA9B,EAAyCA,SAAzC,CAAvB,EAA4EA,SAA5E,EAAuFA,SAAvF,CAAtC,EAAyIA,SAAzI,EAAoJA,SAApJ,EAA+JA,SAA/J,CAAlB;AAEAe,OAAO,CAAC/B,aAAR,GAAwBA,aAAxB;AACA+B,OAAO,CAAC7B,UAAR,GAAqBA,UAArB;AACA6B,OAAO,CAACP,OAAR,GAAkBA,OAAlB;AACAO,OAAO,CAACJ,WAAR,GAAsBA,WAAtB;AACA","sourcesContent":["'use strict';\n\nvar Fetch = require(\"bs-fetch/src/Fetch.js\");\nvar Js_dict = require(\"bs-platform/lib/js/js_dict.js\");\nvar Caml_option = require(\"bs-platform/lib/js/caml_option.js\");\nvar ReasonRelay = require(\"reason-relay/src/ReasonRelay.bs.js\");\nvar Caml_exceptions = require(\"bs-platform/lib/js/caml_exceptions.js\");\nvar Caml_chrome_debugger = require(\"bs-platform/lib/js/caml_chrome_debugger.js\");\n\nvar Graphql_error = Caml_exceptions.create(\"RelayEnv-NextjsDefault.Graphql_error\");\n\nfunction fetchQuery(operation, variables, _cacheConfig) {\n  return fetch(\"http://localhost:4000/api\", Fetch.RequestInit.make(/* Post */2, {\n                      \"content-type\": \"application/json\",\n                      accept: \"application/json\"\n                    }, Caml_option.some(JSON.stringify(Js_dict.fromList(/* :: */Caml_chrome_debugger.simpleVariant(\"::\", [\n                                    /* tuple */[\n                                      \"query\",\n                                      operation.text\n                                    ],\n                                    /* :: */Caml_chrome_debugger.simpleVariant(\"::\", [\n                                        /* tuple */[\n                                          \"variables\",\n                                          variables\n                                        ],\n                                        /* [] */0\n                                      ])\n                                  ])))), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(undefined)).then((function (resp) {\n                if (resp.ok) {\n                  return resp.json();\n                } else {\n                  return Promise.reject([\n                              Graphql_error,\n                              \"Request failed: \" + resp.statusText\n                            ]);\n                }\n              }));\n}\n\nvar network = ReasonRelay.Network.makePromiseBased(fetchQuery, undefined, undefined);\n\nvar environment = ReasonRelay.Environment.make(network, ReasonRelay.Store.make(ReasonRelay.RecordSource.make(undefined, undefined), undefined, undefined), undefined, undefined, undefined);\n\nexports.Graphql_error = Graphql_error;\nexports.fetchQuery = fetchQuery;\nexports.network = network;\nexports.environment = environment;\n/* network Not a pure module */\n"]},"metadata":{},"sourceType":"script"}