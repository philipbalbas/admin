schema {
  query: RootQueryType
  mutation: RootMutationType
}

type Card implements Node {
  answers: [Choice!]
  choices: [Choice!]
  exams: [Exam!]

  """The ID of an object"""
  id: ID!
  level: CardLevel!
  question: String!
  rationale: String
  topic: Topic!
  type: CardType!
}

input CardAnswersUpsertInput {
  answerIds: [ID!]!
  cardId: ID!
}

input CardChoicesUpsertInput {
  cardId: ID!
  choiceIds: [ID!]!
}

input CardCreateInput {
  level: CardLevel!
  question: String!
  rationale: String
  topicId: ID!
  type: CardType!
}

input CardExamsUpsertInput {
  cardId: ID!
  examIds: [ID!]!
}

input CardFilter {
  categoryId: ID
  examId: ID
  level: CardLevel
  topicId: ID
}

enum CardLevel {
  ANALYSE
  APPLY
  CREATE
  EVALUATE
  REMEMBER
  UNDERSTAND
}

enum CardType {
  """Multiple Answers"""
  MULTIPLE

  """Single Answer"""
  SINGLE
}

input CardUpdateInput {
  id: ID!
  level: CardLevel
  question: String
  rationale: String
  topicId: ID
  type: CardType
}

type Category implements Node {
  description: String!
  exams: [Exam!]

  """The ID of an object"""
  id: ID!
  modules: [Module!]
  name: String!
}

input CategoryInputCreate {
  description: String!
  name: String!
}

input CategoryInputUpdate {
  description: String
  id: ID!
  name: String
}

type Choice implements Node {
  cards: [Card!]
  content: String!

  """The ID of an object"""
  id: ID!
}

input ChoiceCreateInput {
  content: String!
}

input ChoiceFilter {
  cardId: ID
  searchTerm: String
}

input ChoiceUpdateInput {
  content: String!
  id: ID!
}

input CreateCardInput {
  inputData: CardCreateInput!
}

type CreateCardPayload {
  result: Card
}

input CreateCategoryInput {
  inputData: CategoryInputCreate!
}

type CreateCategoryPayload {
  result: Category
}

input CreateChoiceInput {
  inputData: ChoiceCreateInput!
}

type CreateChoicePayload {
  result: Choice
}

input CreateExamInput {
  inputData: ExamCreateInput!
}

type CreateExamPayload {
  result: Exam
}

input CreateModuleInput {
  inputData: ModuleInput!
}

type CreateModulePayload {
  result: Module
}

input CreateNoteInput {
  inputData: NoteCreateInput!
}

type CreateNotePayload {
  result: Note
}

input CreateOrganizationInput {
  inputData: OrganizationInput!
}

type CreateOrganizationPayload {
  result: Organization
}

input CreatePageInput {
  inputData: PageCreateInput!
}

type CreatePagePayload {
  result: Page
}

input CreateSubjectInput {
  inputData: SubjectCreateInput!
}

type CreateSubjectPayload {
  result: Subject
}

input CreateTopicInput {
  inputData: TopicCreateInput!
}

type CreateTopicPayload {
  result: Topic
}

type Exam implements Node {
  cards: [Card!]
  category: Category!
  description: String!

  """The ID of an object"""
  id: ID!
  name: String!
  order: Int
  topics: [Topic!]
  type: ExamType!
}

input ExamCardsUpsertInput {
  cardIds: [ID!]!
  examId: ID!
}

input ExamCreateInput {
  categoryId: ID!
  description: String!
  name: String!
  order: Int
  type: ExamType!
}

input ExamFilter {
  categoryId: ID
  type: ExamType
}

input ExamTopicsUpsertInput {
  examId: ID!
  topicIds: [ID!]!
}

enum ExamType {
  """Comprehensive Exam"""
  COMPREHENSIVE

  """Mock Exam"""
  MOCK

  """Practice Test"""
  PRACTICE
}

input ExamUpdateInput {
  description: String
  id: ID!
  name: String
  order: Int
  type: ExamType
}

type Module implements Node {
  category: Category!
  description: String!

  """The ID of an object"""
  id: ID!
  name: String!
  order: Int
  subjects: [Subject!]
}

input ModuleFilter {
  categoryId: ID
  order: SortOrder = ASC
}

input ModuleInput {
  categoryId: ID!
  description: String!
  name: String!
  order: Int
}

input ModuleInputUpdate {
  categoryId: ID
  description: String
  id: ID!
  name: String
  order: Int
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type Note implements Node {
  content: String
  description: String

  """The ID of an object"""
  id: ID!
  name: String!
  page: Page!
}

input NoteCreateInput {
  content: String
  description: String
  name: String!
  pageId: ID!
}

input NoteUpdateInput {
  content: String
  id: ID!
  name: String
  pageId: ID
}

type Organization implements Node {
  city: String
  email: String

  """The ID of an object"""
  id: ID!
  name: String
  role: OrganizationRole
  street: String
}

input OrganizationInput {
  city: String
  email: String
  name: String!
  role: OrganizationRole
  street: String
}

enum OrganizationRole {
  COMPANY
  ORGANIZATION
  SCHOOL
}

type Page implements Node {
  content: String
  description: String

  """The ID of an object"""
  id: ID!
  name: String!
  notes: [Note!]
  topic: Topic!
}

input PageCreateInput {
  content: String
  description: String
  name: String!
  topicId: ID!
}

input PageUpdateInput {
  content: String
  description: String
  id: ID!
  name: String
}

input QuestionAnswersUpsertInput {
  cardId: ID!
  choiceIds: [ID]!
}

type RootMutationType {
  """Create a card"""
  createCard(input: CreateCardInput!): CreateCardPayload

  """Create a category"""
  createCategory(input: CreateCategoryInput!): CreateCategoryPayload

  """Create a choice"""
  createChoice(input: CreateChoiceInput!): CreateChoicePayload

  """Create an exam"""
  createExam(input: CreateExamInput!): CreateExamPayload

  """Create a module"""
  createModule(input: CreateModuleInput!): CreateModulePayload

  """Create a note"""
  createNote(input: CreateNoteInput!): CreateNotePayload

  """Create an organization"""
  createOrganization(input: CreateOrganizationInput!): CreateOrganizationPayload

  """Create a page"""
  createPage(input: CreatePageInput!): CreatePagePayload

  """Create a subject"""
  createSubject(input: CreateSubjectInput!): CreateSubjectPayload

  """Create a topic"""
  createTopic(input: CreateTopicInput!): CreateTopicPayload

  """Signin a user"""
  signin(email: String, password: String): Session

  """Signup a user"""
  signup(input: SignupInput!): SignupPayload

  """Update an exam"""
  updateCard(input: UpdateCardInput!): UpdateCardPayload

  """Update a category"""
  updateCategory(input: UpdateCategoryInput!): UpdateCategoryPayload

  """Update a choice"""
  updateChoice(input: UpdateChoiceInput!): UpdateChoicePayload

  """Update an exam"""
  updateExam(input: UpdateExamInput!): UpdateExamPayload

  """Update a module"""
  updateModule(input: UpdateModuleInput!): UpdateModulePayload

  """Update a note"""
  updateNote(input: UpdateNoteInput!): UpdateNotePayload

  """Update a page"""
  updatePage(input: UpdatePageInput!): UpdatePagePayload

  """Update a subject"""
  updateSubject(input: UpdateSubjectInput!): UpdateSubjectPayload

  """Update a topic"""
  updateTopic(input: UpdateTopicInput!): UpdateTopicPayload

  """Add answers to card"""
  upsertCardAnswers(input: UpsertCardAnswersInput!): UpsertCardAnswersPayload

  """Add choices to card"""
  upsertCardChoices(input: UpsertCardChoicesInput!): UpsertCardChoicesPayload

  """Add cards to exam"""
  upsertCardExams(input: UpsertCardExamsInput!): UpsertCardExamsPayload

  """Add cards to exam"""
  upsertExamCards(input: UpsertExamCardsInput!): UpsertExamCardsPayload

  """Add topics to exam"""
  upsertExamTopics(input: UpsertExamTopicsInput!): UpsertExamTopicsPayload

  """Add answers to question"""
  upsertQuestionAnswers(input: UpsertQuestionAnswersInput!): UpsertQuestionAnswersPayload
}

type RootQueryType {
  """Get a single card"""
  getCard(id: ID!): Card

  """Get a single category"""
  getCategory(id: ID!): Category
  getChoice(id: ID!): Choice

  """Get a single exam"""
  getExam(id: ID!): Exam

  """Get a single module"""
  getModule(id: ID!): Module

  """Get a single note"""
  getNote(id: ID!): Note

  """Get an organization"""
  getOrganization(id: ID!): Organization

  """Get a single page"""
  getPage(id: ID!): Page

  """Get a single subject"""
  getSubject(id: ID!): Subject

  """Get a single topic"""
  getTopic(id: ID!): Topic

  """Get a user"""
  getUser(id: ID!): User

  """Get a list of cards"""
  listCards(filter: CardFilter): [Card!]

  """Get a list of categories"""
  listCategories: [Category!]

  """Get a list of choices"""
  listChoices(filter: ChoiceFilter): [Choice!]

  """Get a list of exams"""
  listExams(filter: ExamFilter): [Exam!]

  """Get a list of modules"""
  listModules(filter: ModuleFilter): [Module!]

  """Get a list of notes"""
  listNotes(order: SortOrder = ASC, pageId: ID): [Note]

  """Get a list of organizations"""
  listOrganizations: [Organization]

  """Get a list of pages"""
  listPages(order: SortOrder = ASC, topicId: ID): [Page]

  """Get a list subjects"""
  listSubjects(filter: SubjectsFilter): [Subject!]

  """Get a list topics"""
  listTopics(filter: TopicsFilter): [Topic!]

  """Get a list of users"""
  listUsers: [User]

  """Get the currently signed-in user"""
  me: User

  """Fetches an object given its ID"""
  node(
    """The id of an object."""
    id: ID!
  ): Node
}

type Session {
  token: String!
  user: User!
}

input SignupInput {
  inputData: UserSignupInput!
}

type SignupPayload {
  result: User
}

enum SortOrder {
  ASC
  DESC
}

type Subject implements Node {
  description: String

  """The ID of an object"""
  id: ID!
  module: Module!
  name: String!
  order: Int
  topics: [Topic!]
}

input SubjectCreateInput {
  description: String
  moduleId: ID!
  name: String!
  order: Int
}

input SubjectsFilter {
  categoryId: ID
  moduleId: ID
  order: SortOrder = ASC
}

input SubjectUpdateInput {
  description: String
  id: ID!
  moduleId: ID
  name: String
  order: Int
}

type Topic implements Node {
  cards: [Card!]
  content: String
  description: String

  """The ID of an object"""
  id: ID!
  name: String!
  order: Int
  pages: [Page!]
  subject: Subject!
}

input TopicCreateInput {
  content: String
  description: String
  name: String!
  order: Int
  subjectId: ID!
}

input TopicsFilter {
  categoryId: ID
  moduleId: ID
  order: SortOrder = ASC
  subjectId: ID
}

input TopicUpdateInput {
  description: String
  id: ID!
  name: String
  order: Int
  subjectId: ID
}

input UpdateCardInput {
  inputData: CardUpdateInput!
}

type UpdateCardPayload {
  result: Card
}

input UpdateCategoryInput {
  inputData: CategoryInputUpdate!
}

type UpdateCategoryPayload {
  result: Category
}

input UpdateChoiceInput {
  inputData: ChoiceUpdateInput!
}

type UpdateChoicePayload {
  result: Choice
}

input UpdateExamInput {
  inputData: ExamUpdateInput!
}

type UpdateExamPayload {
  result: Exam
}

input UpdateModuleInput {
  inputData: ModuleInputUpdate!
}

type UpdateModulePayload {
  result: Module
}

input UpdateNoteInput {
  inputData: NoteUpdateInput!
}

type UpdateNotePayload {
  result: Note
}

input UpdatePageInput {
  input: PageUpdateInput!
}

type UpdatePagePayload {
  result: Page
}

input UpdateSubjectInput {
  inputData: SubjectUpdateInput!
}

type UpdateSubjectPayload {
  result: Subject
}

input UpdateTopicInput {
  inputData: TopicUpdateInput!
}

type UpdateTopicPayload {
  result: Topic
}

input UpsertCardAnswersInput {
  inputData: CardAnswersUpsertInput!
}

type UpsertCardAnswersPayload {
  result: Card
}

input UpsertCardChoicesInput {
  inputData: CardChoicesUpsertInput!
}

type UpsertCardChoicesPayload {
  result: Card
}

input UpsertCardExamsInput {
  inputData: CardExamsUpsertInput!
}

type UpsertCardExamsPayload {
  result: Card
}

input UpsertExamCardsInput {
  inputData: ExamCardsUpsertInput!
}

type UpsertExamCardsPayload {
  result: Exam
}

input UpsertExamTopicsInput {
  inputData: ExamTopicsUpsertInput!
}

type UpsertExamTopicsPayload {
  result: Exam
}

input UpsertQuestionAnswersInput {
  inputData: QuestionAnswersUpsertInput!
}

type UpsertQuestionAnswersPayload {
  result: Card
}

type User implements Node {
  email: String!
  firstName: String

  """The ID of an object"""
  id: ID!
  lastName: String
  organizationId: ID
  role: String
  username: String
}

enum UserRole {
  ADMIN
  STUDENT
  TEACHER
}

input UserSignupInput {
  email: String!
  organizationId: ID!
  password: String!
  role: UserRole
  username: String
}

