// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as ReasonUrql from "reason-urql/src/ReasonUrql.bs.js";
import * as ForEditor from "for-editor";
import * as Utils$ReactHooksTemplate from "../Utils.bs.js";
import * as Mutations$ReactHooksTemplate from "../graphql/Mutations.bs.js";
import * as MarkdownRender$ReactHooksTemplate from "../bindings/MarkdownRender.bs.js";

var Editor = { };

function NoteEdit(Props) {
  var content = Props.content;
  var id = Props.id;
  var pageId = Props.pageId;
  var name = Props.name;
  var match = React.useState((function () {
          return content;
        }));
  var markdownText = match[0];
  var savedTitle = React.useRef(name);
  var match$1 = React.useReducer((function (state, action) {
          if (typeof action === "number") {
            switch (action) {
              case /* Edit */0 :
                  return {
                          title: state.title,
                          editMode: true
                        };
              case /* Cancel */1 :
                  return {
                          title: savedTitle.current,
                          editMode: false
                        };
              case /* Save */2 :
                  savedTitle.current = state.title;
                  return {
                          title: state.title,
                          editMode: false
                        };
              
            }
          } else {
            return {
                    title: action[0],
                    editMode: state.editMode
                  };
          }
        }), {
        title: name,
        editMode: false
      });
  var dispatch = match$1[1];
  var match$2 = match$1[0];
  var editMode = match$2.editMode;
  var title = match$2.title;
  var payload = React.useMemo((function () {
          var variables = { };
          variables["id"] = id;
          variables["pageId"] = pageId;
          variables["name"] = title;
          variables["content"] = markdownText;
          return variables;
        }), /* array */[
        title,
        markdownText
      ]);
  var match$3 = Curry._1(ReasonUrql.Hooks.useMutation, {
        query: Mutations$ReactHooksTemplate.updateNote,
        variables: payload,
        parse: (function (x) {
            return x;
          })
      });
  var executeUpdateNote = match$3[1];
  var handleSave = function (_text) {
    Curry._2(executeUpdateNote, undefined, /* () */0);
    return /* () */0;
  };
  var handleTitleChange = function ($$event) {
    return Curry._1(dispatch, /* Type */[$$event.target.value]);
  };
  return React.createElement("div", undefined, React.createElement("div", undefined, editMode ? React.createElement("div", undefined, React.createElement("input", {
                            className: "text-4xl font-bold border-gray-500 border-2",
                            type: "text",
                            value: title,
                            onChange: handleTitleChange
                          })) : React.createElement("div", {
                        className: "text-indigo-600 text-4xl font-bold"
                      }, Utils$ReactHooksTemplate.str(title)), editMode ? React.createElement("div", undefined, React.createElement("button", {
                            className: "px-3 py-2 mr-3 bg-indigo-600 text-indigo-100 rounded-lg",
                            onClick: (function (param) {
                                Curry._1(dispatch, /* Save */2);
                                Curry._2(executeUpdateNote, undefined, /* () */0);
                                return /* () */0;
                              })
                          }, Utils$ReactHooksTemplate.str("Save")), React.createElement("button", {
                            className: "px-3 py-2 bg-indigo-600 text-indigo-100 rounded-lg",
                            onClick: (function (param) {
                                return Curry._1(dispatch, /* Cancel */1);
                              })
                          }, Utils$ReactHooksTemplate.str("Cancel"))) : React.createElement("button", {
                        className: "px-3 py-2 bg-indigo-600 text-indigo-100 rounded-lg",
                        onClick: (function (param) {
                            return Curry._1(dispatch, /* Edit */0);
                          })
                      }, Utils$ReactHooksTemplate.str("Edit"))), React.createElement("div", {
                  className: "w-full markdown"
                }, React.createElement(ForEditor.default, {
                      value: markdownText,
                      onChange: match[1],
                      onSave: handleSave,
                      placeholder: "Type Here...",
                      language: "en"
                    })), React.createElement(MarkdownRender$ReactHooksTemplate.make, {
                  source: markdownText
                }));
}

var make = NoteEdit;

export {
  Editor ,
  make ,
  
}
/* react Not a pure module */
