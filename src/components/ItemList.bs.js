// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as $$Array from "bs-platform/lib/es6/array.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as ReasonUrql from "reason-urql/src/ReasonUrql.bs.js";
import * as Core from "@material-ui/core";
import * as Utils$ReactHooksTemplate from "../Utils.bs.js";

function ItemList(Props) {
  var query = Props.query;
  var request = Curry._1(query, /* () */0);
  var match = Curry._5(ReasonUrql.Hooks.useQuery, request, undefined, undefined, undefined, /* () */0);
  var response = match[0].response;
  if (typeof response === "number") {
    if (response === /* Fetching */0) {
      return Utils$ReactHooksTemplate.str("Fetching");
    } else {
      return Utils$ReactHooksTemplate.str("No Data");
    }
  } else if (response.tag) {
    return Utils$ReactHooksTemplate.str("Error");
  } else {
    var match$1 = response[0].listExams;
    if (match$1 !== undefined) {
      var itemsList = $$Array.map((function (exam) {
              var match = exam.type_;
              var examType = match !== -93548357 ? (
                  match >= 857840266 ? "Mock" : "Comprehensive"
                ) : "Practice";
              var examId = exam.id;
              return React.createElement(React.Fragment, undefined, React.createElement(Core.TableRow, {
                              children: null,
                              key: examId
                            }, React.createElement(Core.TableCell, {
                                  children: React.createElement("button", undefined, React.createElement("div", {
                                            className: "text-indigo-900 cursor-pointer hover:text-purple-600"
                                          }, Utils$ReactHooksTemplate.str(examId)))
                                }), React.createElement(Core.TableCell, {
                                  children: React.createElement("button", {
                                        onClick: (function (param) {
                                            return Utils$ReactHooksTemplate.push("/exams/" + (String(examId) + ""));
                                          })
                                      }, React.createElement("div", {
                                            className: "text-indigo-900 cursor-pointer hover:text-purple-600"
                                          }, Utils$ReactHooksTemplate.str(exam.name)))
                                }), React.createElement(Core.TableCell, {
                                  children: Utils$ReactHooksTemplate.str(examType)
                                })));
            }), match$1);
      return React.createElement(React.Fragment, undefined, React.createElement("div", {
                      className: "flex justify-between items-start"
                    }, React.createElement("p", {
                          className: "font-bold text-4xl mb-8"
                        }, Utils$ReactHooksTemplate.str("Exams"))), React.createElement(Core.Table, {
                      children: null
                    }, React.createElement(Core.TableHead, {
                          children: React.createElement(Core.TableRow, {
                                children: null
                              }, React.createElement(Core.TableCell, {
                                    children: Utils$ReactHooksTemplate.str("ID")
                                  }), React.createElement(Core.TableCell, {
                                    children: Utils$ReactHooksTemplate.str("Name")
                                  }), React.createElement(Core.TableCell, {
                                    children: Utils$ReactHooksTemplate.str("Type")
                                  }))
                        }), React.createElement(Core.TableBody, {
                          children: itemsList
                        })));
    } else {
      return Utils$ReactHooksTemplate.str("No items");
    }
  }
}

var make = ItemList;

export {
  make ,
  
}
/* react Not a pure module */
