// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as $$Array from "bs-platform/lib/es6/array.js";
import * as React from "react";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Core from "@material-ui/core";
import * as Utils$ReactHooksTemplate from "../Utils.bs.js";

function Table(Props) {
  var items = Props.items;
  var entity = Props.entity;
  var entityString;
  switch (entity) {
    case /* Module */0 :
        entityString = "modules";
        break;
    case /* Subject */1 :
        entityString = "subjects";
        break;
    case /* Topic */2 :
        entityString = "topics";
        break;
    case /* Page */3 :
        entityString = "pages";
        break;
    case /* Note */4 :
        entityString = "notes";
        break;
    case /* Exam */5 :
        entityString = "exams";
        break;
    
  }
  var itemsList = $$Array.map((function (item) {
          if (item !== undefined) {
            var item$1 = Caml_option.valFromOption(item);
            var id = Belt_Option.mapWithDefault(item$1.id, "Missing id", (function (txt) {
                    return txt;
                  }));
            var name = Belt_Option.mapWithDefault(item$1.name, "Missing name", (function (txt) {
                    return txt;
                  }));
            var description = Belt_Option.mapWithDefault(item$1.description, "Missing description", (function (txt) {
                    return txt;
                  }));
            return React.createElement(Core.TableRow, {
                        children: null,
                        key: id
                      }, React.createElement(Core.TableCell, {
                            children: React.createElement("button", {
                                  onClick: (function (param) {
                                      return Utils$ReactHooksTemplate.push("/" + (String(entityString) + ("/" + (String(id) + ""))));
                                    })
                                }, React.createElement("div", {
                                      className: "text-indigo-900 cursor-pointer hover:text-purple-600"
                                    }, Utils$ReactHooksTemplate.str(id)))
                          }), React.createElement(Core.TableCell, {
                            children: React.createElement("button", {
                                  onClick: (function (param) {
                                      return Utils$ReactHooksTemplate.push("/" + (String(entityString) + ("/" + (String(id) + ""))));
                                    })
                                }, React.createElement("div", {
                                      className: "text-indigo-900 cursor-pointer hover:text-purple-600"
                                    }, Utils$ReactHooksTemplate.str(name)))
                          }), React.createElement(Core.TableCell, {
                            children: Utils$ReactHooksTemplate.str(description)
                          }));
          } else {
            return Utils$ReactHooksTemplate.str("None");
          }
        }), items);
  return React.createElement(Core.Table, {
              children: null
            }, React.createElement(Core.TableHead, {
                  children: React.createElement(Core.TableRow, {
                        children: null
                      }, React.createElement(Core.TableCell, {
                            children: Utils$ReactHooksTemplate.str("ID")
                          }), React.createElement(Core.TableCell, {
                            children: Utils$ReactHooksTemplate.str("Name")
                          }), React.createElement(Core.TableCell, {
                            children: Utils$ReactHooksTemplate.str("Description")
                          }))
                }), React.createElement(Core.TableBody, {
                  children: itemsList
                }));
}

var make = Table;

export {
  make ,
  
}
/* react Not a pure module */
