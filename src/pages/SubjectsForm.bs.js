// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE

import * as Antd from "antd";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as ReasonUrql from "reason-urql/src/ReasonUrql.bs.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Utils$ReactHooksTemplate from "../Utils.bs.js";
import * as Queries$ReactHooksTemplate from "../graphql/Queries.bs.js";
import * as Mutations$ReactHooksTemplate from "../graphql/Mutations.bs.js";

function objec1(param) {
  return {
          name: "Test",
          id: "1",
          description: param
        };
}

function SubjectsForm(Props) {
  var id = Props.id;
  var match = React.useState((function () {
          return "";
        }));
  var setName = match[1];
  var name = match[0];
  var match$1 = React.useState((function () {
          return id;
        }));
  var setModuleId = match$1[1];
  var moduleId = match$1[0];
  var match$2 = React.useState((function () {
          return "";
        }));
  var setDescription = match$2[1];
  var description = match$2[0];
  var request = Queries$ReactHooksTemplate.ListModules[/* make */3](/* () */0);
  var match$3 = Curry._4(ReasonUrql.Hooks[/* useQuery */1], request, undefined, undefined, /* () */0);
  var response = match$3[0][/* response */3];
  var mutation = Mutations$ReactHooksTemplate.CreateSubject[/* make */3](name, moduleId, description, /* () */0);
  var match$4 = Curry._1(ReasonUrql.Hooks[/* useMutation */0], mutation);
  var executeMutation = match$4[1];
  var selectInput;
  if (typeof response === "number") {
    selectInput = response === 0 ? Utils$ReactHooksTemplate.str("Loading") : Utils$ReactHooksTemplate.str("Not Found");
  } else if (response.tag) {
    selectInput = Utils$ReactHooksTemplate.str("Error");
  } else {
    var modules = Belt_Array.map(Belt_Option.getWithDefault(response[0].modules, /* array */[]), (function (module_) {
            return Belt_Option.mapWithDefault(module_, null, (function (module_) {
                          var id = Belt_Option.mapWithDefault(module_.id, "Missing description", (function (txt) {
                                  return txt;
                                }));
                          var name = Belt_Option.mapWithDefault(module_.name, "Missing description", (function (txt) {
                                  return txt;
                                }));
                          return React.createElement(Antd.Select.Option, {
                                      key: id,
                                      value: id,
                                      children: Utils$ReactHooksTemplate.str(name)
                                    });
                        }));
          }));
    selectInput = React.createElement(Antd.Select, {
          className: "w-full",
          value: moduleId,
          onSelect: (function (value) {
              return Curry._1(setModuleId, (function (param) {
                            return value;
                          }));
            }),
          children: modules
        });
  }
  return React.createElement("div", undefined, React.createElement("div", {
                  className: "text-xl font-bold pb-3"
                }, Utils$ReactHooksTemplate.str("Create Subject")), React.createElement("div", {
                  className: "flex flex-row"
                }, React.createElement("div", {
                      className: "flex-1 pr-2"
                    }, React.createElement("label", undefined, Utils$ReactHooksTemplate.str("Select Module ID"), selectInput)), React.createElement("div", {
                      className: "flex-1 pl-2"
                    }, React.createElement("label", undefined, Utils$ReactHooksTemplate.str("Subject Name"), React.createElement(Antd.Input, {
                              value: name,
                              onChange: (function ($$event) {
                                  return Curry._1(setName, $$event.target.value);
                                })
                            })))), React.createElement("div", undefined, React.createElement("label", undefined, Utils$ReactHooksTemplate.str("Subject Description"), React.createElement(Antd.Input, {
                          value: description,
                          onChange: (function ($$event) {
                              return Curry._1(setDescription, $$event.target.value);
                            })
                        }))), React.createElement("div", {
                  className: "mt-4"
                }, React.createElement("button", {
                      className: "rounded-sm px-3 py-2 bg-red-500 text-white rounded-lg mr-5",
                      onClick: (function (param) {
                          return Utils$ReactHooksTemplate.push("/subjects");
                        })
                    }, Utils$ReactHooksTemplate.str("Cancel")), React.createElement("button", {
                      className: "rounded-sm px-3 py-2 bg-green-500 text-white rounded-lg",
                      onClick: (function (param) {
                          Curry._1(executeMutation, /* () */0);
                          return /* () */0;
                        })
                    }, Utils$ReactHooksTemplate.str("Save"))));
}

var make = SubjectsForm;

export {
  objec1 ,
  make ,
  
}
/* antd Not a pure module */
