// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as $$Array from "bs-platform/lib/es6/array.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as ReasonUrql from "reason-urql/src/ReasonUrql.bs.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Core from "@material-ui/core";
import * as Utils$ReactHooksTemplate from "../Utils.bs.js";
import * as Queries$ReactHooksTemplate from "../graphql/Queries.bs.js";
import * as EditModuleForm$ReactHooksTemplate from "../components/EditModuleForm.bs.js";

function ModulePage(Props) {
  var moduleId = Props.id;
  var request = Queries$ReactHooksTemplate.GetModule.make(moduleId, /* () */0);
  var match = Curry._4(ReasonUrql.Hooks.useQuery, request, undefined, undefined, /* () */0);
  var response = match[0].response;
  if (typeof response === "number") {
    if (response === /* Fetching */0) {
      return Utils$ReactHooksTemplate.str("Fetching");
    } else {
      return Utils$ReactHooksTemplate.str("No Data");
    }
  } else if (response.tag) {
    return Utils$ReactHooksTemplate.str("Error");
  } else {
    var match$1 = response[0].module_;
    if (match$1 !== undefined) {
      var module_ = Caml_option.valFromOption(match$1);
      var moduleDescription = Belt_Option.mapWithDefault(module_.description, "Missing name", (function (txt) {
              return txt;
            }));
      var moduleName = Belt_Option.mapWithDefault(module_.name, "Missing description", (function (txt) {
              return txt;
            }));
      var subjectsList = $$Array.map((function (topic) {
              if (topic !== undefined) {
                var topic$1 = Caml_option.valFromOption(topic);
                var sujbectId = Belt_Option.mapWithDefault(topic$1.id, "Missing id", (function (txt) {
                        return txt;
                      }));
                var subjectName = Belt_Option.mapWithDefault(topic$1.name, "Missing name", (function (txt) {
                        return txt;
                      }));
                var subjectDescription = Belt_Option.mapWithDefault(topic$1.description, "Missing description", (function (txt) {
                        return txt;
                      }));
                return React.createElement(Core.TableRow, {
                            children: null,
                            key: sujbectId
                          }, React.createElement(Core.TableCell, {
                                children: React.createElement("button", {
                                      onClick: (function (param) {
                                          return Utils$ReactHooksTemplate.push("/subjects/" + (String(sujbectId) + ""));
                                        })
                                    }, React.createElement("div", {
                                          className: "text-indigo-900 cursor-pointer hover:text-purple-600"
                                        }, Utils$ReactHooksTemplate.str(sujbectId)))
                              }), React.createElement(Core.TableCell, {
                                children: React.createElement("button", {
                                      onClick: (function (param) {
                                          return Utils$ReactHooksTemplate.push("/subjects/" + (String(sujbectId) + ""));
                                        })
                                    }, React.createElement("div", {
                                          className: "text-indigo-900 cursor-pointer hover:text-purple-600"
                                        }, Utils$ReactHooksTemplate.str(subjectName)))
                              }), React.createElement(Core.TableCell, {
                                children: Utils$ReactHooksTemplate.str(subjectDescription)
                              }));
              } else {
                return Utils$ReactHooksTemplate.str("No item");
              }
            }), Belt_Option.getWithDefault(module_.subjects, /* array */[]));
      return React.createElement(React.Fragment, undefined, React.createElement("div", {
                      className: "flex justify-between"
                    }, React.createElement(EditModuleForm$ReactHooksTemplate.make, {
                          id: moduleId,
                          name: moduleName,
                          description: moduleDescription
                        })), React.createElement("div", {
                      className: "mt-6"
                    }, React.createElement("div", {
                          className: "flex justify-between items-center"
                        }, React.createElement("div", {
                              className: "text-lg"
                            }, Utils$ReactHooksTemplate.str("Subjects:")), React.createElement("button", {
                              className: "p-2 bg-indigo-800 text-blue-100 rounded-lg",
                              onClick: (function (param) {
                                  return Utils$ReactHooksTemplate.push("/modules/" + (String(moduleId) + "/subjects/create"));
                                })
                            }, Utils$ReactHooksTemplate.str("+ Create Subject"))), React.createElement(Core.Table, {
                          children: null
                        }, React.createElement(Core.TableHead, {
                              children: React.createElement(Core.TableRow, {
                                    children: null
                                  }, React.createElement(Core.TableCell, {
                                        children: Utils$ReactHooksTemplate.str("ID")
                                      }), React.createElement(Core.TableCell, {
                                        children: Utils$ReactHooksTemplate.str("Name")
                                      }), React.createElement(Core.TableCell, {
                                        children: Utils$ReactHooksTemplate.str("Description")
                                      }))
                            }), React.createElement(Core.TableBody, {
                              children: subjectsList
                            }))));
    } else {
      return Utils$ReactHooksTemplate.str("No Item");
    }
  }
}

var make = ModulePage;

export {
  make ,
  
}
/* react Not a pure module */
