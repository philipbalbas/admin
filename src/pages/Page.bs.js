// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE

import * as $$Array from "bs-platform/lib/es6/array.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as ReasonUrql from "reason-urql/src/ReasonUrql.bs.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Core from "@material-ui/core";
import * as Utils$ReactHooksTemplate from "../Utils.bs.js";
import * as Queries$ReactHooksTemplate from "../graphql/Queries.bs.js";
import * as EditPageForm$ReactHooksTemplate from "../components/EditPageForm.bs.js";

function Page(Props) {
  var id = Props.id;
  var request = Queries$ReactHooksTemplate.GetPage[/* make */3](id, /* () */0);
  var match = Curry._4(ReasonUrql.Hooks[/* useQuery */1], request, undefined, undefined, /* () */0);
  var response = match[0][/* response */3];
  if (typeof response === "number") {
    if (response === 0) {
      return Utils$ReactHooksTemplate.str("Fetching");
    } else {
      return Utils$ReactHooksTemplate.str("No Data");
    }
  } else if (response.tag) {
    return Utils$ReactHooksTemplate.str("Error");
  } else {
    var match$1 = response[0].page;
    if (match$1 !== undefined) {
      var page = Caml_option.valFromOption(match$1);
      var pageDescription = Belt_Option.mapWithDefault(page.description, "Missing name", (function (txt) {
              return txt;
            }));
      var pageName = Belt_Option.mapWithDefault(page.name, "Missing description", (function (txt) {
              return txt;
            }));
      var parentId = Belt_Option.mapWithDefault(page.topicId, "Missing description", (function (txt) {
              return txt;
            }));
      var notesList = $$Array.map((function (note) {
              if (note !== undefined) {
                var note$1 = Caml_option.valFromOption(note);
                var noteId = Belt_Option.mapWithDefault(note$1.id, "Missing id", (function (txt) {
                        return txt;
                      }));
                var noteName = Belt_Option.mapWithDefault(note$1.name, "Missing name", (function (txt) {
                        return txt;
                      }));
                var noteDescription = Belt_Option.mapWithDefault(note$1.description, "Missing description", (function (txt) {
                        return txt;
                      }));
                return React.createElement(Core.TableRow, {
                            children: null,
                            key: noteId
                          }, React.createElement(Core.TableCell, {
                                children: React.createElement("button", {
                                      onClick: (function (param) {
                                          return Utils$ReactHooksTemplate.push("/notes/" + (String(noteId) + ""));
                                        })
                                    }, React.createElement("div", {
                                          className: "text-indigo-900 cursor-pointer hover:text-purple-600"
                                        }, Utils$ReactHooksTemplate.str(noteId)))
                              }), React.createElement(Core.TableCell, {
                                children: React.createElement("button", {
                                      onClick: (function (param) {
                                          return Utils$ReactHooksTemplate.push("/notes/" + (String(noteId) + ""));
                                        })
                                    }, React.createElement("div", {
                                          className: "text-indigo-900 cursor-pointer hover:text-purple-600"
                                        }, Utils$ReactHooksTemplate.str(noteName)))
                              }), React.createElement(Core.TableCell, {
                                children: Utils$ReactHooksTemplate.str(noteDescription)
                              }));
              } else {
                return Utils$ReactHooksTemplate.str("No item");
              }
            }), Belt_Option.getWithDefault(page.notes, /* array */[]));
      return React.createElement(React.Fragment, undefined, React.createElement("div", {
                      className: "flex justify-between"
                    }, React.createElement(EditPageForm$ReactHooksTemplate.make, {
                          id: id,
                          name: pageName,
                          description: pageDescription
                        })), React.createElement("div", {
                      className: "mt-6"
                    }, React.createElement("div", {
                          className: "flex justify-between items-center"
                        }, React.createElement("div", {
                              className: "text-lg"
                            }, Utils$ReactHooksTemplate.str("Notes:")), React.createElement("button", {
                              className: "p-2 bg-indigo-800 text-blue-100 rounded-lg",
                              onClick: (function (param) {
                                  return Utils$ReactHooksTemplate.push("/topics/" + (String(parentId) + ("/pages/" + (String(id) + "/notes/create"))));
                                })
                            }, Utils$ReactHooksTemplate.str("+ Create Note"))), React.createElement(Core.Table, {
                          children: null
                        }, React.createElement(Core.TableHead, {
                              children: React.createElement(Core.TableRow, {
                                    children: null
                                  }, React.createElement(Core.TableCell, {
                                        children: Utils$ReactHooksTemplate.str("ID")
                                      }), React.createElement(Core.TableCell, {
                                        children: Utils$ReactHooksTemplate.str("Name")
                                      }), React.createElement(Core.TableCell, {
                                        children: Utils$ReactHooksTemplate.str("Description")
                                      }))
                            }), React.createElement(Core.TableBody, {
                              children: notesList
                            }))));
    } else {
      return Utils$ReactHooksTemplate.str("No page");
    }
  }
}

var make = Page;

export {
  make ,
  
}
/* react Not a pure module */
