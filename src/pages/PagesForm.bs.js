// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Antd from "antd";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as ReasonUrql from "reason-urql/src/ReasonUrql.bs.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Utils$ReactHooksTemplate from "../Utils.bs.js";
import * as Queries$ReactHooksTemplate from "../graphql/Queries.bs.js";
import * as Mutations$ReactHooksTemplate from "../graphql/Mutations.bs.js";

function PagesForm(Props) {
  var subjectIdProp = Props.subjectIdProp;
  var topicIdProp = Props.topicIdProp;
  var match = React.useState((function () {
          return "";
        }));
  var setName = match[1];
  var name = match[0];
  var match$1 = React.useState((function () {
          return subjectIdProp;
        }));
  var setSubjectId = match$1[1];
  var subjectId = match$1[0];
  var match$2 = React.useState((function () {
          return topicIdProp;
        }));
  var setTopicId = match$2[1];
  var topicId = match$2[0];
  var match$3 = React.useState((function () {
          return "";
        }));
  var setDescription = match$3[1];
  var description = match$3[0];
  var subjectsListRequest = Queries$ReactHooksTemplate.ListSubjects.make(/* () */0);
  var match$4 = Curry._5(ReasonUrql.Hooks.useQuery, subjectsListRequest, undefined, undefined, undefined, /* () */0);
  var subjectsListQueryResponse = match$4[0].response;
  var subjectQuery = Queries$ReactHooksTemplate.GetSubject.make(subjectId, /* () */0);
  var match$5 = Curry._5(ReasonUrql.Hooks.useQuery, subjectQuery, undefined, undefined, undefined, /* () */0);
  var subjectQueryResponse = match$5[0].response;
  var mutation = Mutations$ReactHooksTemplate.CreatePage.make(name, topicId, description, undefined, /* () */0);
  var match$6 = Curry._1(ReasonUrql.Hooks.useMutation, mutation);
  var executeMutation = match$6[1];
  var subjectsSelect;
  if (typeof subjectsListQueryResponse === "number") {
    subjectsSelect = subjectsListQueryResponse === /* Fetching */0 ? Utils$ReactHooksTemplate.str("Loading") : Utils$ReactHooksTemplate.str("Not Found");
  } else if (subjectsListQueryResponse.tag) {
    subjectsSelect = Utils$ReactHooksTemplate.str("Error");
  } else {
    var subjects = Belt_Array.map(Belt_Option.getWithDefault(subjectsListQueryResponse[0].subjects, /* array */[]), (function (subject) {
            return Belt_Option.mapWithDefault(subject, null, (function (subject) {
                          var id = Belt_Option.mapWithDefault(subject.id, "Missing description", (function (txt) {
                                  return txt;
                                }));
                          var name = Belt_Option.mapWithDefault(subject.name, "Missing description", (function (txt) {
                                  return txt;
                                }));
                          return React.createElement(Antd.Select.Option, {
                                      key: id,
                                      value: id,
                                      children: Utils$ReactHooksTemplate.str(name)
                                    });
                        }));
          }));
    subjectsSelect = React.createElement(Antd.Select, {
          className: "w-full",
          value: subjectId,
          onSelect: (function (value) {
              Curry._1(setSubjectId, (function (param) {
                      return value;
                    }));
              return Curry._1(setTopicId, (function (param) {
                            return "";
                          }));
            }),
          children: subjects
        });
  }
  var topicsSelect;
  if (typeof subjectQueryResponse === "number") {
    topicsSelect = subjectQueryResponse === /* Fetching */0 ? Utils$ReactHooksTemplate.str("Loading") : Utils$ReactHooksTemplate.str("Not Found");
  } else if (subjectQueryResponse.tag) {
    topicsSelect = React.createElement("div", undefined, Utils$ReactHooksTemplate.str("Please Select a subject"));
  } else {
    var topics = Belt_Array.map(Belt_Option.getWithDefault(Belt_Option.flatMap(subjectQueryResponse[0].subject, (function (subject) {
                    return subject.topics;
                  })), /* array */[]), (function (subject) {
            return Belt_Option.mapWithDefault(subject, null, (function (subject) {
                          var id = Belt_Option.mapWithDefault(subject.id, "Missing id", (function (txt) {
                                  return txt;
                                }));
                          var name = Belt_Option.mapWithDefault(subject.name, "Missing name", (function (txt) {
                                  return txt;
                                }));
                          return React.createElement(Antd.Select.Option, {
                                      key: id,
                                      value: id,
                                      children: Utils$ReactHooksTemplate.str(name)
                                    });
                        }));
          }));
    topicsSelect = React.createElement(Antd.Select, {
          className: "w-full",
          value: topicId,
          onSelect: (function (value) {
              return Curry._1(setTopicId, (function (param) {
                            return value;
                          }));
            }),
          children: topics
        });
  }
  return React.createElement("div", undefined, React.createElement("div", {
                  className: "text-xl font-bold pb-3"
                }, Utils$ReactHooksTemplate.str("Create Page")), React.createElement("div", {
                  className: "flex flex-row"
                }, React.createElement("div", {
                      className: "flex-1 pr-2"
                    }, React.createElement("label", undefined, Utils$ReactHooksTemplate.str("Select Subject"), subjectsSelect)), React.createElement("div", {
                      className: "flex-1 pr-2"
                    }, React.createElement("label", undefined, Utils$ReactHooksTemplate.str("Select Topic"), topicsSelect))), React.createElement("div", {
                  className: "mt-3"
                }, React.createElement("label", undefined, Utils$ReactHooksTemplate.str("Page Name"), React.createElement(Antd.Input, {
                          value: name,
                          onChange: (function ($$event) {
                              return Curry._1(setName, $$event.target.value);
                            })
                        }))), React.createElement("div", {
                  className: "mt-3"
                }, React.createElement("label", undefined, Utils$ReactHooksTemplate.str("Page Description"), React.createElement(Antd.Input, {
                          value: description,
                          onChange: (function ($$event) {
                              return Curry._1(setDescription, $$event.target.value);
                            })
                        }))), React.createElement("div", {
                  className: "mt-4"
                }, React.createElement("button", {
                      className: "rounded-sm px-3 py-2 bg-red-500 text-white rounded-lg mr-5",
                      onClick: (function (param) {
                          return Utils$ReactHooksTemplate.push("/subjects");
                        })
                    }, Utils$ReactHooksTemplate.str("Cancel")), React.createElement("button", {
                      className: "rounded-sm px-3 py-2 bg-green-500 text-white rounded-lg",
                      onClick: (function (param) {
                          Curry._2(executeMutation, undefined, /* () */0);
                          return /* () */0;
                        })
                    }, Utils$ReactHooksTemplate.str("Save"))));
}

var make = PagesForm;

export {
  make ,
  
}
/* antd Not a pure module */
