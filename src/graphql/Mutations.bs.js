// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Js_exn from "bs-platform/lib/es6/js_exn.js";
import * as Js_dict from "bs-platform/lib/es6/js_dict.js";
import * as Js_json from "bs-platform/lib/es6/js_json.js";
import * as Js_option from "bs-platform/lib/es6/js_option.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";

var ppx_printed_query = "mutation createSubject($name: String!, $moduleId: ID!, $description: String)  {\ncreateSubject(input: {name: $name, moduleId: $moduleId, description: $description})  {\nid  \nname  \ndescription  \n}\n\n}\n";

function parse(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "createSubject");
  var tmp;
  if (match !== undefined) {
    var value$2 = Caml_option.valFromOption(match);
    var match$1 = Js_json.decodeNull(value$2);
    if (match$1 !== undefined) {
      tmp = undefined;
    } else {
      var value$3 = Js_option.getExn(Js_json.decodeObject(value$2));
      var match$2 = Js_dict.get(value$3, "id");
      var tmp$1;
      if (match$2 !== undefined) {
        var value$4 = Caml_option.valFromOption(match$2);
        var match$3 = Js_json.decodeNull(value$4);
        if (match$3 !== undefined) {
          tmp$1 = undefined;
        } else {
          var match$4 = Js_json.decodeString(value$4);
          tmp$1 = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
        }
      } else {
        tmp$1 = undefined;
      }
      var match$5 = Js_dict.get(value$3, "name");
      var tmp$2;
      if (match$5 !== undefined) {
        var value$5 = Caml_option.valFromOption(match$5);
        var match$6 = Js_json.decodeNull(value$5);
        if (match$6 !== undefined) {
          tmp$2 = undefined;
        } else {
          var match$7 = Js_json.decodeString(value$5);
          tmp$2 = match$7 !== undefined ? match$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
        }
      } else {
        tmp$2 = undefined;
      }
      var match$8 = Js_dict.get(value$3, "description");
      var tmp$3;
      if (match$8 !== undefined) {
        var value$6 = Caml_option.valFromOption(match$8);
        var match$9 = Js_json.decodeNull(value$6);
        if (match$9 !== undefined) {
          tmp$3 = undefined;
        } else {
          var match$10 = Js_json.decodeString(value$6);
          tmp$3 = match$10 !== undefined ? match$10 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
        }
      } else {
        tmp$3 = undefined;
      }
      tmp = {
        id: tmp$1,
        name: tmp$2,
        description: tmp$3
      };
    }
  } else {
    tmp = undefined;
  }
  return {
          createSubject: tmp
        };
}

function make(name, moduleId, description, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray(/* array */[
                  /* tuple */[
                    "name",
                    name
                  ],
                  /* tuple */[
                    "moduleId",
                    moduleId
                  ],
                  /* tuple */[
                    "description",
                    description !== undefined ? description : null
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var name = variables.name;
  var moduleId = variables.moduleId;
  var description = variables.description;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray(/* array */[
                  /* tuple */[
                    "name",
                    name
                  ],
                  /* tuple */[
                    "moduleId",
                    moduleId
                  ],
                  /* tuple */[
                    "description",
                    description !== undefined ? description : null
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeVariables(name, moduleId, description, param) {
  return Js_dict.fromArray(/* array */[
                /* tuple */[
                  "name",
                  name
                ],
                /* tuple */[
                  "moduleId",
                  moduleId
                ],
                /* tuple */[
                  "description",
                  description !== undefined ? description : null
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002(graphql_ppx_use_json_variables_fn, name, moduleId, description, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray(/* array */[
                    /* tuple */[
                      "name",
                      name
                    ],
                    /* tuple */[
                      "moduleId",
                      moduleId
                    ],
                    /* tuple */[
                      "description",
                      description !== undefined ? description : null
                    ]
                  ].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition = /* tuple */[
  parse,
  ppx_printed_query,
  definition_002
];

function ret_type(f) {
  return { };
}

var MT_Ret = { };

var CreateSubject = {
  ppx_printed_query: ppx_printed_query,
  query: ppx_printed_query,
  parse: parse,
  make: make,
  makeWithVariables: makeWithVariables,
  makeVariables: makeVariables,
  definition: definition,
  ret_type: ret_type,
  MT_Ret: MT_Ret
};

var ppx_printed_query$1 = "mutation createTopic($name: String!, $subjectId: ID!, $description: String)  {\ncreateTopic(input: {name: $name, subjectId: $subjectId, description: $description})  {\nid  \nname  \ndescription  \n}\n\n}\n";

function parse$1(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "createTopic");
  var tmp;
  if (match !== undefined) {
    var value$2 = Caml_option.valFromOption(match);
    var match$1 = Js_json.decodeNull(value$2);
    if (match$1 !== undefined) {
      tmp = undefined;
    } else {
      var value$3 = Js_option.getExn(Js_json.decodeObject(value$2));
      var match$2 = Js_dict.get(value$3, "id");
      var tmp$1;
      if (match$2 !== undefined) {
        var value$4 = Caml_option.valFromOption(match$2);
        var match$3 = Js_json.decodeNull(value$4);
        if (match$3 !== undefined) {
          tmp$1 = undefined;
        } else {
          var match$4 = Js_json.decodeString(value$4);
          tmp$1 = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
        }
      } else {
        tmp$1 = undefined;
      }
      var match$5 = Js_dict.get(value$3, "name");
      var tmp$2;
      if (match$5 !== undefined) {
        var value$5 = Caml_option.valFromOption(match$5);
        var match$6 = Js_json.decodeNull(value$5);
        if (match$6 !== undefined) {
          tmp$2 = undefined;
        } else {
          var match$7 = Js_json.decodeString(value$5);
          tmp$2 = match$7 !== undefined ? match$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
        }
      } else {
        tmp$2 = undefined;
      }
      var match$8 = Js_dict.get(value$3, "description");
      var tmp$3;
      if (match$8 !== undefined) {
        var value$6 = Caml_option.valFromOption(match$8);
        var match$9 = Js_json.decodeNull(value$6);
        if (match$9 !== undefined) {
          tmp$3 = undefined;
        } else {
          var match$10 = Js_json.decodeString(value$6);
          tmp$3 = match$10 !== undefined ? match$10 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
        }
      } else {
        tmp$3 = undefined;
      }
      tmp = {
        id: tmp$1,
        name: tmp$2,
        description: tmp$3
      };
    }
  } else {
    tmp = undefined;
  }
  return {
          createTopic: tmp
        };
}

function make$1(name, subjectId, description, param) {
  return {
          query: ppx_printed_query$1,
          variables: Js_dict.fromArray(/* array */[
                  /* tuple */[
                    "name",
                    name
                  ],
                  /* tuple */[
                    "subjectId",
                    subjectId
                  ],
                  /* tuple */[
                    "description",
                    description !== undefined ? description : null
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$1
        };
}

function makeWithVariables$1(variables) {
  var name = variables.name;
  var subjectId = variables.subjectId;
  var description = variables.description;
  return {
          query: ppx_printed_query$1,
          variables: Js_dict.fromArray(/* array */[
                  /* tuple */[
                    "name",
                    name
                  ],
                  /* tuple */[
                    "subjectId",
                    subjectId
                  ],
                  /* tuple */[
                    "description",
                    description !== undefined ? description : null
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$1
        };
}

function makeVariables$1(name, subjectId, description, param) {
  return Js_dict.fromArray(/* array */[
                /* tuple */[
                  "name",
                  name
                ],
                /* tuple */[
                  "subjectId",
                  subjectId
                ],
                /* tuple */[
                  "description",
                  description !== undefined ? description : null
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002$1(graphql_ppx_use_json_variables_fn, name, subjectId, description, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray(/* array */[
                    /* tuple */[
                      "name",
                      name
                    ],
                    /* tuple */[
                      "subjectId",
                      subjectId
                    ],
                    /* tuple */[
                      "description",
                      description !== undefined ? description : null
                    ]
                  ].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition$1 = /* tuple */[
  parse$1,
  ppx_printed_query$1,
  definition_002$1
];

function ret_type$1(f) {
  return { };
}

var MT_Ret$1 = { };

var CreateTopic = {
  ppx_printed_query: ppx_printed_query$1,
  query: ppx_printed_query$1,
  parse: parse$1,
  make: make$1,
  makeWithVariables: makeWithVariables$1,
  makeVariables: makeVariables$1,
  definition: definition$1,
  ret_type: ret_type$1,
  MT_Ret: MT_Ret$1
};

var ppx_printed_query$2 = "mutation createPage($name: String!, $topicId: ID!, $description: String, $content: String)  {\ncreatePage(input: {name: $name, topicId: $topicId, description: $description, content: $content})  {\nid  \nname  \ndescription  \ncontent  \n}\n\n}\n";

function parse$2(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "createPage");
  var tmp;
  if (match !== undefined) {
    var value$2 = Caml_option.valFromOption(match);
    var match$1 = Js_json.decodeNull(value$2);
    if (match$1 !== undefined) {
      tmp = undefined;
    } else {
      var value$3 = Js_option.getExn(Js_json.decodeObject(value$2));
      var match$2 = Js_dict.get(value$3, "id");
      var tmp$1;
      if (match$2 !== undefined) {
        var value$4 = Caml_option.valFromOption(match$2);
        var match$3 = Js_json.decodeNull(value$4);
        if (match$3 !== undefined) {
          tmp$1 = undefined;
        } else {
          var match$4 = Js_json.decodeString(value$4);
          tmp$1 = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
        }
      } else {
        tmp$1 = undefined;
      }
      var match$5 = Js_dict.get(value$3, "name");
      var tmp$2;
      if (match$5 !== undefined) {
        var value$5 = Caml_option.valFromOption(match$5);
        var match$6 = Js_json.decodeNull(value$5);
        if (match$6 !== undefined) {
          tmp$2 = undefined;
        } else {
          var match$7 = Js_json.decodeString(value$5);
          tmp$2 = match$7 !== undefined ? match$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
        }
      } else {
        tmp$2 = undefined;
      }
      var match$8 = Js_dict.get(value$3, "description");
      var tmp$3;
      if (match$8 !== undefined) {
        var value$6 = Caml_option.valFromOption(match$8);
        var match$9 = Js_json.decodeNull(value$6);
        if (match$9 !== undefined) {
          tmp$3 = undefined;
        } else {
          var match$10 = Js_json.decodeString(value$6);
          tmp$3 = match$10 !== undefined ? match$10 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
        }
      } else {
        tmp$3 = undefined;
      }
      var match$11 = Js_dict.get(value$3, "content");
      var tmp$4;
      if (match$11 !== undefined) {
        var value$7 = Caml_option.valFromOption(match$11);
        var match$12 = Js_json.decodeNull(value$7);
        if (match$12 !== undefined) {
          tmp$4 = undefined;
        } else {
          var match$13 = Js_json.decodeString(value$7);
          tmp$4 = match$13 !== undefined ? match$13 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$7));
        }
      } else {
        tmp$4 = undefined;
      }
      tmp = {
        id: tmp$1,
        name: tmp$2,
        description: tmp$3,
        content: tmp$4
      };
    }
  } else {
    tmp = undefined;
  }
  return {
          createPage: tmp
        };
}

function make$2(name, topicId, description, content, param) {
  return {
          query: ppx_printed_query$2,
          variables: Js_dict.fromArray(/* array */[
                  /* tuple */[
                    "name",
                    name
                  ],
                  /* tuple */[
                    "topicId",
                    topicId
                  ],
                  /* tuple */[
                    "description",
                    description !== undefined ? description : null
                  ],
                  /* tuple */[
                    "content",
                    content !== undefined ? content : null
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$2
        };
}

function makeWithVariables$2(variables) {
  var name = variables.name;
  var topicId = variables.topicId;
  var description = variables.description;
  var content = variables.content;
  return {
          query: ppx_printed_query$2,
          variables: Js_dict.fromArray(/* array */[
                  /* tuple */[
                    "name",
                    name
                  ],
                  /* tuple */[
                    "topicId",
                    topicId
                  ],
                  /* tuple */[
                    "description",
                    description !== undefined ? description : null
                  ],
                  /* tuple */[
                    "content",
                    content !== undefined ? content : null
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$2
        };
}

function makeVariables$2(name, topicId, description, content, param) {
  return Js_dict.fromArray(/* array */[
                /* tuple */[
                  "name",
                  name
                ],
                /* tuple */[
                  "topicId",
                  topicId
                ],
                /* tuple */[
                  "description",
                  description !== undefined ? description : null
                ],
                /* tuple */[
                  "content",
                  content !== undefined ? content : null
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002$2(graphql_ppx_use_json_variables_fn, name, topicId, description, content, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray(/* array */[
                    /* tuple */[
                      "name",
                      name
                    ],
                    /* tuple */[
                      "topicId",
                      topicId
                    ],
                    /* tuple */[
                      "description",
                      description !== undefined ? description : null
                    ],
                    /* tuple */[
                      "content",
                      content !== undefined ? content : null
                    ]
                  ].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition$2 = /* tuple */[
  parse$2,
  ppx_printed_query$2,
  definition_002$2
];

function ret_type$2(f) {
  return { };
}

var MT_Ret$2 = { };

var CreatePage = {
  ppx_printed_query: ppx_printed_query$2,
  query: ppx_printed_query$2,
  parse: parse$2,
  make: make$2,
  makeWithVariables: makeWithVariables$2,
  makeVariables: makeVariables$2,
  definition: definition$2,
  ret_type: ret_type$2,
  MT_Ret: MT_Ret$2
};

var ppx_printed_query$3 = "mutation createNote($name: String!, $pageId: ID!, $description: String, $content: String)  {\ncreateNote(input: {name: $name, pageId: $pageId, description: $description, content: $content})  {\nid  \nname  \ndescription  \ncontent  \n}\n\n}\n";

function parse$3(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "createNote");
  var tmp;
  if (match !== undefined) {
    var value$2 = Caml_option.valFromOption(match);
    var match$1 = Js_json.decodeNull(value$2);
    if (match$1 !== undefined) {
      tmp = undefined;
    } else {
      var value$3 = Js_option.getExn(Js_json.decodeObject(value$2));
      var match$2 = Js_dict.get(value$3, "id");
      var tmp$1;
      if (match$2 !== undefined) {
        var value$4 = Caml_option.valFromOption(match$2);
        var match$3 = Js_json.decodeNull(value$4);
        if (match$3 !== undefined) {
          tmp$1 = undefined;
        } else {
          var match$4 = Js_json.decodeString(value$4);
          tmp$1 = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
        }
      } else {
        tmp$1 = undefined;
      }
      var match$5 = Js_dict.get(value$3, "name");
      var tmp$2;
      if (match$5 !== undefined) {
        var value$5 = Caml_option.valFromOption(match$5);
        var match$6 = Js_json.decodeNull(value$5);
        if (match$6 !== undefined) {
          tmp$2 = undefined;
        } else {
          var match$7 = Js_json.decodeString(value$5);
          tmp$2 = match$7 !== undefined ? match$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
        }
      } else {
        tmp$2 = undefined;
      }
      var match$8 = Js_dict.get(value$3, "description");
      var tmp$3;
      if (match$8 !== undefined) {
        var value$6 = Caml_option.valFromOption(match$8);
        var match$9 = Js_json.decodeNull(value$6);
        if (match$9 !== undefined) {
          tmp$3 = undefined;
        } else {
          var match$10 = Js_json.decodeString(value$6);
          tmp$3 = match$10 !== undefined ? match$10 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
        }
      } else {
        tmp$3 = undefined;
      }
      var match$11 = Js_dict.get(value$3, "content");
      var tmp$4;
      if (match$11 !== undefined) {
        var value$7 = Caml_option.valFromOption(match$11);
        var match$12 = Js_json.decodeNull(value$7);
        if (match$12 !== undefined) {
          tmp$4 = undefined;
        } else {
          var match$13 = Js_json.decodeString(value$7);
          tmp$4 = match$13 !== undefined ? match$13 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$7));
        }
      } else {
        tmp$4 = undefined;
      }
      tmp = {
        id: tmp$1,
        name: tmp$2,
        description: tmp$3,
        content: tmp$4
      };
    }
  } else {
    tmp = undefined;
  }
  return {
          createNote: tmp
        };
}

function make$3(name, pageId, description, content, param) {
  return {
          query: ppx_printed_query$3,
          variables: Js_dict.fromArray(/* array */[
                  /* tuple */[
                    "name",
                    name
                  ],
                  /* tuple */[
                    "pageId",
                    pageId
                  ],
                  /* tuple */[
                    "description",
                    description !== undefined ? description : null
                  ],
                  /* tuple */[
                    "content",
                    content !== undefined ? content : null
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$3
        };
}

function makeWithVariables$3(variables) {
  var name = variables.name;
  var pageId = variables.pageId;
  var description = variables.description;
  var content = variables.content;
  return {
          query: ppx_printed_query$3,
          variables: Js_dict.fromArray(/* array */[
                  /* tuple */[
                    "name",
                    name
                  ],
                  /* tuple */[
                    "pageId",
                    pageId
                  ],
                  /* tuple */[
                    "description",
                    description !== undefined ? description : null
                  ],
                  /* tuple */[
                    "content",
                    content !== undefined ? content : null
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$3
        };
}

function makeVariables$3(name, pageId, description, content, param) {
  return Js_dict.fromArray(/* array */[
                /* tuple */[
                  "name",
                  name
                ],
                /* tuple */[
                  "pageId",
                  pageId
                ],
                /* tuple */[
                  "description",
                  description !== undefined ? description : null
                ],
                /* tuple */[
                  "content",
                  content !== undefined ? content : null
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002$3(graphql_ppx_use_json_variables_fn, name, pageId, description, content, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray(/* array */[
                    /* tuple */[
                      "name",
                      name
                    ],
                    /* tuple */[
                      "pageId",
                      pageId
                    ],
                    /* tuple */[
                      "description",
                      description !== undefined ? description : null
                    ],
                    /* tuple */[
                      "content",
                      content !== undefined ? content : null
                    ]
                  ].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition$3 = /* tuple */[
  parse$3,
  ppx_printed_query$3,
  definition_002$3
];

function ret_type$3(f) {
  return { };
}

var MT_Ret$3 = { };

var CreateNote = {
  ppx_printed_query: ppx_printed_query$3,
  query: ppx_printed_query$3,
  parse: parse$3,
  make: make$3,
  makeWithVariables: makeWithVariables$3,
  makeVariables: makeVariables$3,
  definition: definition$3,
  ret_type: ret_type$3,
  MT_Ret: MT_Ret$3
};

var ppx_printed_query$4 = "mutation updateModule($id: ID!, $name: String, $description: String)  {\nupdateModule(input: {id: $id, name: $name, description: $description})  {\nid  \nname  \ndescription  \n}\n\n}\n";

function parse$4(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "updateModule");
  var tmp;
  if (match !== undefined) {
    var value$2 = Caml_option.valFromOption(match);
    var match$1 = Js_json.decodeNull(value$2);
    if (match$1 !== undefined) {
      tmp = undefined;
    } else {
      var value$3 = Js_option.getExn(Js_json.decodeObject(value$2));
      var match$2 = Js_dict.get(value$3, "id");
      var tmp$1;
      if (match$2 !== undefined) {
        var value$4 = Caml_option.valFromOption(match$2);
        var match$3 = Js_json.decodeNull(value$4);
        if (match$3 !== undefined) {
          tmp$1 = undefined;
        } else {
          var match$4 = Js_json.decodeString(value$4);
          tmp$1 = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
        }
      } else {
        tmp$1 = undefined;
      }
      var match$5 = Js_dict.get(value$3, "name");
      var tmp$2;
      if (match$5 !== undefined) {
        var value$5 = Caml_option.valFromOption(match$5);
        var match$6 = Js_json.decodeNull(value$5);
        if (match$6 !== undefined) {
          tmp$2 = undefined;
        } else {
          var match$7 = Js_json.decodeString(value$5);
          tmp$2 = match$7 !== undefined ? match$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
        }
      } else {
        tmp$2 = undefined;
      }
      var match$8 = Js_dict.get(value$3, "description");
      var tmp$3;
      if (match$8 !== undefined) {
        var value$6 = Caml_option.valFromOption(match$8);
        var match$9 = Js_json.decodeNull(value$6);
        if (match$9 !== undefined) {
          tmp$3 = undefined;
        } else {
          var match$10 = Js_json.decodeString(value$6);
          tmp$3 = match$10 !== undefined ? match$10 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
        }
      } else {
        tmp$3 = undefined;
      }
      tmp = {
        id: tmp$1,
        name: tmp$2,
        description: tmp$3
      };
    }
  } else {
    tmp = undefined;
  }
  return {
          updateModule: tmp
        };
}

function make$4(id, name, description, param) {
  return {
          query: ppx_printed_query$4,
          variables: Js_dict.fromArray(/* array */[
                  /* tuple */[
                    "id",
                    id
                  ],
                  /* tuple */[
                    "name",
                    name !== undefined ? name : null
                  ],
                  /* tuple */[
                    "description",
                    description !== undefined ? description : null
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$4
        };
}

function makeWithVariables$4(variables) {
  var id = variables.id;
  var name = variables.name;
  var description = variables.description;
  return {
          query: ppx_printed_query$4,
          variables: Js_dict.fromArray(/* array */[
                  /* tuple */[
                    "id",
                    id
                  ],
                  /* tuple */[
                    "name",
                    name !== undefined ? name : null
                  ],
                  /* tuple */[
                    "description",
                    description !== undefined ? description : null
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$4
        };
}

function makeVariables$4(id, name, description, param) {
  return Js_dict.fromArray(/* array */[
                /* tuple */[
                  "id",
                  id
                ],
                /* tuple */[
                  "name",
                  name !== undefined ? name : null
                ],
                /* tuple */[
                  "description",
                  description !== undefined ? description : null
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002$4(graphql_ppx_use_json_variables_fn, id, name, description, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray(/* array */[
                    /* tuple */[
                      "id",
                      id
                    ],
                    /* tuple */[
                      "name",
                      name !== undefined ? name : null
                    ],
                    /* tuple */[
                      "description",
                      description !== undefined ? description : null
                    ]
                  ].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition$4 = /* tuple */[
  parse$4,
  ppx_printed_query$4,
  definition_002$4
];

function ret_type$4(f) {
  return { };
}

var MT_Ret$4 = { };

var UpdateModule = {
  ppx_printed_query: ppx_printed_query$4,
  query: ppx_printed_query$4,
  parse: parse$4,
  make: make$4,
  makeWithVariables: makeWithVariables$4,
  makeVariables: makeVariables$4,
  definition: definition$4,
  ret_type: ret_type$4,
  MT_Ret: MT_Ret$4
};

var ppx_printed_query$5 = "mutation updateSubject($id: ID!, $name: String!, $description: String)  {\nupdateSubject(input: {id: $id, name: $name, description: $description})  {\nid  \nname  \ndescription  \n}\n\n}\n";

function parse$5(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "updateSubject");
  var tmp;
  if (match !== undefined) {
    var value$2 = Caml_option.valFromOption(match);
    var match$1 = Js_json.decodeNull(value$2);
    if (match$1 !== undefined) {
      tmp = undefined;
    } else {
      var value$3 = Js_option.getExn(Js_json.decodeObject(value$2));
      var match$2 = Js_dict.get(value$3, "id");
      var tmp$1;
      if (match$2 !== undefined) {
        var value$4 = Caml_option.valFromOption(match$2);
        var match$3 = Js_json.decodeNull(value$4);
        if (match$3 !== undefined) {
          tmp$1 = undefined;
        } else {
          var match$4 = Js_json.decodeString(value$4);
          tmp$1 = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
        }
      } else {
        tmp$1 = undefined;
      }
      var match$5 = Js_dict.get(value$3, "name");
      var tmp$2;
      if (match$5 !== undefined) {
        var value$5 = Caml_option.valFromOption(match$5);
        var match$6 = Js_json.decodeNull(value$5);
        if (match$6 !== undefined) {
          tmp$2 = undefined;
        } else {
          var match$7 = Js_json.decodeString(value$5);
          tmp$2 = match$7 !== undefined ? match$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
        }
      } else {
        tmp$2 = undefined;
      }
      var match$8 = Js_dict.get(value$3, "description");
      var tmp$3;
      if (match$8 !== undefined) {
        var value$6 = Caml_option.valFromOption(match$8);
        var match$9 = Js_json.decodeNull(value$6);
        if (match$9 !== undefined) {
          tmp$3 = undefined;
        } else {
          var match$10 = Js_json.decodeString(value$6);
          tmp$3 = match$10 !== undefined ? match$10 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
        }
      } else {
        tmp$3 = undefined;
      }
      tmp = {
        id: tmp$1,
        name: tmp$2,
        description: tmp$3
      };
    }
  } else {
    tmp = undefined;
  }
  return {
          updateSubject: tmp
        };
}

function make$5(id, name, description, param) {
  return {
          query: ppx_printed_query$5,
          variables: Js_dict.fromArray(/* array */[
                  /* tuple */[
                    "id",
                    id
                  ],
                  /* tuple */[
                    "name",
                    name
                  ],
                  /* tuple */[
                    "description",
                    description !== undefined ? description : null
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$5
        };
}

function makeWithVariables$5(variables) {
  var id = variables.id;
  var name = variables.name;
  var description = variables.description;
  return {
          query: ppx_printed_query$5,
          variables: Js_dict.fromArray(/* array */[
                  /* tuple */[
                    "id",
                    id
                  ],
                  /* tuple */[
                    "name",
                    name
                  ],
                  /* tuple */[
                    "description",
                    description !== undefined ? description : null
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$5
        };
}

function makeVariables$5(id, name, description, param) {
  return Js_dict.fromArray(/* array */[
                /* tuple */[
                  "id",
                  id
                ],
                /* tuple */[
                  "name",
                  name
                ],
                /* tuple */[
                  "description",
                  description !== undefined ? description : null
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002$5(graphql_ppx_use_json_variables_fn, id, name, description, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray(/* array */[
                    /* tuple */[
                      "id",
                      id
                    ],
                    /* tuple */[
                      "name",
                      name
                    ],
                    /* tuple */[
                      "description",
                      description !== undefined ? description : null
                    ]
                  ].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition$5 = /* tuple */[
  parse$5,
  ppx_printed_query$5,
  definition_002$5
];

function ret_type$5(f) {
  return { };
}

var MT_Ret$5 = { };

var UpdateSubject = {
  ppx_printed_query: ppx_printed_query$5,
  query: ppx_printed_query$5,
  parse: parse$5,
  make: make$5,
  makeWithVariables: makeWithVariables$5,
  makeVariables: makeVariables$5,
  definition: definition$5,
  ret_type: ret_type$5,
  MT_Ret: MT_Ret$5
};

var ppx_printed_query$6 = "mutation updateTopic($id: ID!, $name: String!, $description: String)  {\nupdateTopic(input: {id: $id, name: $name, description: $description})  {\nid  \nname  \ndescription  \n}\n\n}\n";

function parse$6(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "updateTopic");
  var tmp;
  if (match !== undefined) {
    var value$2 = Caml_option.valFromOption(match);
    var match$1 = Js_json.decodeNull(value$2);
    if (match$1 !== undefined) {
      tmp = undefined;
    } else {
      var value$3 = Js_option.getExn(Js_json.decodeObject(value$2));
      var match$2 = Js_dict.get(value$3, "id");
      var tmp$1;
      if (match$2 !== undefined) {
        var value$4 = Caml_option.valFromOption(match$2);
        var match$3 = Js_json.decodeNull(value$4);
        if (match$3 !== undefined) {
          tmp$1 = undefined;
        } else {
          var match$4 = Js_json.decodeString(value$4);
          tmp$1 = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
        }
      } else {
        tmp$1 = undefined;
      }
      var match$5 = Js_dict.get(value$3, "name");
      var tmp$2;
      if (match$5 !== undefined) {
        var value$5 = Caml_option.valFromOption(match$5);
        var match$6 = Js_json.decodeNull(value$5);
        if (match$6 !== undefined) {
          tmp$2 = undefined;
        } else {
          var match$7 = Js_json.decodeString(value$5);
          tmp$2 = match$7 !== undefined ? match$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
        }
      } else {
        tmp$2 = undefined;
      }
      var match$8 = Js_dict.get(value$3, "description");
      var tmp$3;
      if (match$8 !== undefined) {
        var value$6 = Caml_option.valFromOption(match$8);
        var match$9 = Js_json.decodeNull(value$6);
        if (match$9 !== undefined) {
          tmp$3 = undefined;
        } else {
          var match$10 = Js_json.decodeString(value$6);
          tmp$3 = match$10 !== undefined ? match$10 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
        }
      } else {
        tmp$3 = undefined;
      }
      tmp = {
        id: tmp$1,
        name: tmp$2,
        description: tmp$3
      };
    }
  } else {
    tmp = undefined;
  }
  return {
          updateTopic: tmp
        };
}

function make$6(id, name, description, param) {
  return {
          query: ppx_printed_query$6,
          variables: Js_dict.fromArray(/* array */[
                  /* tuple */[
                    "id",
                    id
                  ],
                  /* tuple */[
                    "name",
                    name
                  ],
                  /* tuple */[
                    "description",
                    description !== undefined ? description : null
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$6
        };
}

function makeWithVariables$6(variables) {
  var id = variables.id;
  var name = variables.name;
  var description = variables.description;
  return {
          query: ppx_printed_query$6,
          variables: Js_dict.fromArray(/* array */[
                  /* tuple */[
                    "id",
                    id
                  ],
                  /* tuple */[
                    "name",
                    name
                  ],
                  /* tuple */[
                    "description",
                    description !== undefined ? description : null
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$6
        };
}

function makeVariables$6(id, name, description, param) {
  return Js_dict.fromArray(/* array */[
                /* tuple */[
                  "id",
                  id
                ],
                /* tuple */[
                  "name",
                  name
                ],
                /* tuple */[
                  "description",
                  description !== undefined ? description : null
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002$6(graphql_ppx_use_json_variables_fn, id, name, description, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray(/* array */[
                    /* tuple */[
                      "id",
                      id
                    ],
                    /* tuple */[
                      "name",
                      name
                    ],
                    /* tuple */[
                      "description",
                      description !== undefined ? description : null
                    ]
                  ].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition$6 = /* tuple */[
  parse$6,
  ppx_printed_query$6,
  definition_002$6
];

function ret_type$6(f) {
  return { };
}

var MT_Ret$6 = { };

var UpdateTopic = {
  ppx_printed_query: ppx_printed_query$6,
  query: ppx_printed_query$6,
  parse: parse$6,
  make: make$6,
  makeWithVariables: makeWithVariables$6,
  makeVariables: makeVariables$6,
  definition: definition$6,
  ret_type: ret_type$6,
  MT_Ret: MT_Ret$6
};

var ppx_printed_query$7 = "mutation updatePage($id: ID!, $name: String!, $description: String)  {\nupdatePage(input: {id: $id, name: $name, description: $description})  {\nid  \nname  \ndescription  \n}\n\n}\n";

function parse$7(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "updatePage");
  var tmp;
  if (match !== undefined) {
    var value$2 = Caml_option.valFromOption(match);
    var match$1 = Js_json.decodeNull(value$2);
    if (match$1 !== undefined) {
      tmp = undefined;
    } else {
      var value$3 = Js_option.getExn(Js_json.decodeObject(value$2));
      var match$2 = Js_dict.get(value$3, "id");
      var tmp$1;
      if (match$2 !== undefined) {
        var value$4 = Caml_option.valFromOption(match$2);
        var match$3 = Js_json.decodeNull(value$4);
        if (match$3 !== undefined) {
          tmp$1 = undefined;
        } else {
          var match$4 = Js_json.decodeString(value$4);
          tmp$1 = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
        }
      } else {
        tmp$1 = undefined;
      }
      var match$5 = Js_dict.get(value$3, "name");
      var tmp$2;
      if (match$5 !== undefined) {
        var value$5 = Caml_option.valFromOption(match$5);
        var match$6 = Js_json.decodeNull(value$5);
        if (match$6 !== undefined) {
          tmp$2 = undefined;
        } else {
          var match$7 = Js_json.decodeString(value$5);
          tmp$2 = match$7 !== undefined ? match$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
        }
      } else {
        tmp$2 = undefined;
      }
      var match$8 = Js_dict.get(value$3, "description");
      var tmp$3;
      if (match$8 !== undefined) {
        var value$6 = Caml_option.valFromOption(match$8);
        var match$9 = Js_json.decodeNull(value$6);
        if (match$9 !== undefined) {
          tmp$3 = undefined;
        } else {
          var match$10 = Js_json.decodeString(value$6);
          tmp$3 = match$10 !== undefined ? match$10 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
        }
      } else {
        tmp$3 = undefined;
      }
      tmp = {
        id: tmp$1,
        name: tmp$2,
        description: tmp$3
      };
    }
  } else {
    tmp = undefined;
  }
  return {
          updatePage: tmp
        };
}

function make$7(id, name, description, param) {
  return {
          query: ppx_printed_query$7,
          variables: Js_dict.fromArray(/* array */[
                  /* tuple */[
                    "id",
                    id
                  ],
                  /* tuple */[
                    "name",
                    name
                  ],
                  /* tuple */[
                    "description",
                    description !== undefined ? description : null
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$7
        };
}

function makeWithVariables$7(variables) {
  var id = variables.id;
  var name = variables.name;
  var description = variables.description;
  return {
          query: ppx_printed_query$7,
          variables: Js_dict.fromArray(/* array */[
                  /* tuple */[
                    "id",
                    id
                  ],
                  /* tuple */[
                    "name",
                    name
                  ],
                  /* tuple */[
                    "description",
                    description !== undefined ? description : null
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$7
        };
}

function makeVariables$7(id, name, description, param) {
  return Js_dict.fromArray(/* array */[
                /* tuple */[
                  "id",
                  id
                ],
                /* tuple */[
                  "name",
                  name
                ],
                /* tuple */[
                  "description",
                  description !== undefined ? description : null
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002$7(graphql_ppx_use_json_variables_fn, id, name, description, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray(/* array */[
                    /* tuple */[
                      "id",
                      id
                    ],
                    /* tuple */[
                      "name",
                      name
                    ],
                    /* tuple */[
                      "description",
                      description !== undefined ? description : null
                    ]
                  ].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition$7 = /* tuple */[
  parse$7,
  ppx_printed_query$7,
  definition_002$7
];

function ret_type$7(f) {
  return { };
}

var MT_Ret$7 = { };

var UpdatePage = {
  ppx_printed_query: ppx_printed_query$7,
  query: ppx_printed_query$7,
  parse: parse$7,
  make: make$7,
  makeWithVariables: makeWithVariables$7,
  makeVariables: makeVariables$7,
  definition: definition$7,
  ret_type: ret_type$7,
  MT_Ret: MT_Ret$7
};

var ppx_printed_query$8 = "mutation updateNote($id: ID!, $content: String, $pageId: ID!)  {\nupdateNote(input: {id: $id, content: $content, pageId: $pageId})  {\nid  \ncontent  \n}\n\n}\n";

function parse$8(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "updateNote");
  var tmp;
  if (match !== undefined) {
    var value$2 = Caml_option.valFromOption(match);
    var match$1 = Js_json.decodeNull(value$2);
    if (match$1 !== undefined) {
      tmp = undefined;
    } else {
      var value$3 = Js_option.getExn(Js_json.decodeObject(value$2));
      var match$2 = Js_dict.get(value$3, "id");
      var tmp$1;
      if (match$2 !== undefined) {
        var value$4 = Caml_option.valFromOption(match$2);
        var match$3 = Js_json.decodeNull(value$4);
        if (match$3 !== undefined) {
          tmp$1 = undefined;
        } else {
          var match$4 = Js_json.decodeString(value$4);
          tmp$1 = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
        }
      } else {
        tmp$1 = undefined;
      }
      var match$5 = Js_dict.get(value$3, "content");
      var tmp$2;
      if (match$5 !== undefined) {
        var value$5 = Caml_option.valFromOption(match$5);
        var match$6 = Js_json.decodeNull(value$5);
        if (match$6 !== undefined) {
          tmp$2 = undefined;
        } else {
          var match$7 = Js_json.decodeString(value$5);
          tmp$2 = match$7 !== undefined ? match$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
        }
      } else {
        tmp$2 = undefined;
      }
      tmp = {
        id: tmp$1,
        content: tmp$2
      };
    }
  } else {
    tmp = undefined;
  }
  return {
          updateNote: tmp
        };
}

function make$8(id, content, pageId, param) {
  return {
          query: ppx_printed_query$8,
          variables: Js_dict.fromArray(/* array */[
                  /* tuple */[
                    "id",
                    id
                  ],
                  /* tuple */[
                    "content",
                    content !== undefined ? content : null
                  ],
                  /* tuple */[
                    "pageId",
                    pageId
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$8
        };
}

function makeWithVariables$8(variables) {
  var id = variables.id;
  var content = variables.content;
  var pageId = variables.pageId;
  return {
          query: ppx_printed_query$8,
          variables: Js_dict.fromArray(/* array */[
                  /* tuple */[
                    "id",
                    id
                  ],
                  /* tuple */[
                    "content",
                    content !== undefined ? content : null
                  ],
                  /* tuple */[
                    "pageId",
                    pageId
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$8
        };
}

function makeVariables$8(id, content, pageId, param) {
  return Js_dict.fromArray(/* array */[
                /* tuple */[
                  "id",
                  id
                ],
                /* tuple */[
                  "content",
                  content !== undefined ? content : null
                ],
                /* tuple */[
                  "pageId",
                  pageId
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002$8(graphql_ppx_use_json_variables_fn, id, content, pageId, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray(/* array */[
                    /* tuple */[
                      "id",
                      id
                    ],
                    /* tuple */[
                      "content",
                      content !== undefined ? content : null
                    ],
                    /* tuple */[
                      "pageId",
                      pageId
                    ]
                  ].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition$8 = /* tuple */[
  parse$8,
  ppx_printed_query$8,
  definition_002$8
];

function ret_type$8(f) {
  return { };
}

var MT_Ret$8 = { };

var UpdateNote = {
  ppx_printed_query: ppx_printed_query$8,
  query: ppx_printed_query$8,
  parse: parse$8,
  make: make$8,
  makeWithVariables: makeWithVariables$8,
  makeVariables: makeVariables$8,
  definition: definition$8,
  ret_type: ret_type$8,
  MT_Ret: MT_Ret$8
};

var updateNote = "\n    mutation updateNote($id: ID!, $name: String, $content: String, $pageId: ID!) {\n      updateNote(input: {\n        id: $id\n        content: $content\n        pageId: $pageId\n        name: $name\n      }) {\n        id\n        content\n      }\n    }\n  ";

export {
  CreateSubject ,
  CreateTopic ,
  CreatePage ,
  CreateNote ,
  UpdateModule ,
  UpdateSubject ,
  UpdateTopic ,
  UpdatePage ,
  UpdateNote ,
  updateNote ,
  
}
/* No side effect */
