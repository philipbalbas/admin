// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE

import * as Js_exn from "bs-platform/lib/es6/js_exn.js";
import * as Js_dict from "bs-platform/lib/es6/js_dict.js";
import * as Js_json from "bs-platform/lib/es6/js_json.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";

var ppx_printed_query = "mutation createSubject($name: String!, $moduleId: ID!, $description: String)  {\ncreateSubject(input: {name: $name, moduleId: $moduleId, description: $description})  {\nid  \nname  \ndescription  \n}\n\n}\n";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_dict.get(Caml_option.valFromOption(match), "createSubject");
    var tmp;
    if (match$1 !== undefined) {
      var value$1 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeNull(value$1);
      if (match$2 !== undefined) {
        tmp = undefined;
      } else {
        var match$3 = Js_json.decodeObject(value$1);
        var tmp$1;
        if (match$3 !== undefined) {
          var value$2 = Caml_option.valFromOption(match$3);
          var match$4 = Js_dict.get(value$2, "id");
          var tmp$2;
          if (match$4 !== undefined) {
            var value$3 = Caml_option.valFromOption(match$4);
            var match$5 = Js_json.decodeNull(value$3);
            if (match$5 !== undefined) {
              tmp$2 = undefined;
            } else {
              var match$6 = Js_json.decodeString(value$3);
              tmp$2 = match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
            }
          } else {
            tmp$2 = undefined;
          }
          var match$7 = Js_dict.get(value$2, "name");
          var tmp$3;
          if (match$7 !== undefined) {
            var value$4 = Caml_option.valFromOption(match$7);
            var match$8 = Js_json.decodeNull(value$4);
            if (match$8 !== undefined) {
              tmp$3 = undefined;
            } else {
              var match$9 = Js_json.decodeString(value$4);
              tmp$3 = match$9 !== undefined ? match$9 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
            }
          } else {
            tmp$3 = undefined;
          }
          var match$10 = Js_dict.get(value$2, "description");
          var tmp$4;
          if (match$10 !== undefined) {
            var value$5 = Caml_option.valFromOption(match$10);
            var match$11 = Js_json.decodeNull(value$5);
            if (match$11 !== undefined) {
              tmp$4 = undefined;
            } else {
              var match$12 = Js_json.decodeString(value$5);
              tmp$4 = match$12 !== undefined ? match$12 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
            }
          } else {
            tmp$4 = undefined;
          }
          tmp$1 = {
            id: tmp$2,
            name: tmp$3,
            description: tmp$4
          };
        } else {
          tmp$1 = Js_exn.raiseError("graphql_ppx: Object is not a value");
        }
        tmp = Caml_option.some(tmp$1);
      }
    } else {
      tmp = undefined;
    }
    return {
            createSubject: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make(name, moduleId, description, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray(/* array */[
                /* tuple */[
                  "name",
                  name
                ],
                /* tuple */[
                  "moduleId",
                  moduleId
                ],
                /* tuple */[
                  "description",
                  description !== undefined ? description : null
                ]
              ]),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var name = variables.name;
  var moduleId = variables.moduleId;
  var description = variables.description;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray(/* array */[
                /* tuple */[
                  "name",
                  name
                ],
                /* tuple */[
                  "moduleId",
                  moduleId
                ],
                /* tuple */[
                  "description",
                  description !== undefined ? description : null
                ]
              ]),
          parse: parse
        };
}

function ret_type(f) {
  return /* module */[];
}

var MT_Ret = /* module */[];

var CreateSubject = /* module */[
  /* ppx_printed_query */ppx_printed_query,
  /* query */ppx_printed_query,
  /* parse */parse,
  /* make */make,
  /* makeWithVariables */makeWithVariables,
  /* ret_type */ret_type,
  /* MT_Ret */MT_Ret
];

var ppx_printed_query$1 = "mutation createTopic($name: String!, $subjectId: ID!, $description: String)  {\ncreateTopic(input: {name: $name, subjectId: $subjectId, description: $description})  {\nid  \nname  \ndescription  \n}\n\n}\n";

function parse$1(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_dict.get(Caml_option.valFromOption(match), "createTopic");
    var tmp;
    if (match$1 !== undefined) {
      var value$1 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeNull(value$1);
      if (match$2 !== undefined) {
        tmp = undefined;
      } else {
        var match$3 = Js_json.decodeObject(value$1);
        var tmp$1;
        if (match$3 !== undefined) {
          var value$2 = Caml_option.valFromOption(match$3);
          var match$4 = Js_dict.get(value$2, "id");
          var tmp$2;
          if (match$4 !== undefined) {
            var value$3 = Caml_option.valFromOption(match$4);
            var match$5 = Js_json.decodeNull(value$3);
            if (match$5 !== undefined) {
              tmp$2 = undefined;
            } else {
              var match$6 = Js_json.decodeString(value$3);
              tmp$2 = match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
            }
          } else {
            tmp$2 = undefined;
          }
          var match$7 = Js_dict.get(value$2, "name");
          var tmp$3;
          if (match$7 !== undefined) {
            var value$4 = Caml_option.valFromOption(match$7);
            var match$8 = Js_json.decodeNull(value$4);
            if (match$8 !== undefined) {
              tmp$3 = undefined;
            } else {
              var match$9 = Js_json.decodeString(value$4);
              tmp$3 = match$9 !== undefined ? match$9 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
            }
          } else {
            tmp$3 = undefined;
          }
          var match$10 = Js_dict.get(value$2, "description");
          var tmp$4;
          if (match$10 !== undefined) {
            var value$5 = Caml_option.valFromOption(match$10);
            var match$11 = Js_json.decodeNull(value$5);
            if (match$11 !== undefined) {
              tmp$4 = undefined;
            } else {
              var match$12 = Js_json.decodeString(value$5);
              tmp$4 = match$12 !== undefined ? match$12 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
            }
          } else {
            tmp$4 = undefined;
          }
          tmp$1 = {
            id: tmp$2,
            name: tmp$3,
            description: tmp$4
          };
        } else {
          tmp$1 = Js_exn.raiseError("graphql_ppx: Object is not a value");
        }
        tmp = Caml_option.some(tmp$1);
      }
    } else {
      tmp = undefined;
    }
    return {
            createTopic: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make$1(name, subjectId, description, param) {
  return {
          query: ppx_printed_query$1,
          variables: Js_dict.fromArray(/* array */[
                /* tuple */[
                  "name",
                  name
                ],
                /* tuple */[
                  "subjectId",
                  subjectId
                ],
                /* tuple */[
                  "description",
                  description !== undefined ? description : null
                ]
              ]),
          parse: parse$1
        };
}

function makeWithVariables$1(variables) {
  var name = variables.name;
  var subjectId = variables.subjectId;
  var description = variables.description;
  return {
          query: ppx_printed_query$1,
          variables: Js_dict.fromArray(/* array */[
                /* tuple */[
                  "name",
                  name
                ],
                /* tuple */[
                  "subjectId",
                  subjectId
                ],
                /* tuple */[
                  "description",
                  description !== undefined ? description : null
                ]
              ]),
          parse: parse$1
        };
}

function ret_type$1(f) {
  return /* module */[];
}

var MT_Ret$1 = /* module */[];

var CreateTopic = /* module */[
  /* ppx_printed_query */ppx_printed_query$1,
  /* query */ppx_printed_query$1,
  /* parse */parse$1,
  /* make */make$1,
  /* makeWithVariables */makeWithVariables$1,
  /* ret_type */ret_type$1,
  /* MT_Ret */MT_Ret$1
];

var ppx_printed_query$2 = "mutation createPage($name: String!, $topicId: ID!, $description: String, $content: String)  {\ncreatePage(input: {name: $name, topicId: $topicId, description: $description, content: $content})  {\nid  \nname  \ndescription  \ncontent  \n}\n\n}\n";

function parse$2(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_dict.get(Caml_option.valFromOption(match), "createPage");
    var tmp;
    if (match$1 !== undefined) {
      var value$1 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeNull(value$1);
      if (match$2 !== undefined) {
        tmp = undefined;
      } else {
        var match$3 = Js_json.decodeObject(value$1);
        var tmp$1;
        if (match$3 !== undefined) {
          var value$2 = Caml_option.valFromOption(match$3);
          var match$4 = Js_dict.get(value$2, "id");
          var tmp$2;
          if (match$4 !== undefined) {
            var value$3 = Caml_option.valFromOption(match$4);
            var match$5 = Js_json.decodeNull(value$3);
            if (match$5 !== undefined) {
              tmp$2 = undefined;
            } else {
              var match$6 = Js_json.decodeString(value$3);
              tmp$2 = match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
            }
          } else {
            tmp$2 = undefined;
          }
          var match$7 = Js_dict.get(value$2, "name");
          var tmp$3;
          if (match$7 !== undefined) {
            var value$4 = Caml_option.valFromOption(match$7);
            var match$8 = Js_json.decodeNull(value$4);
            if (match$8 !== undefined) {
              tmp$3 = undefined;
            } else {
              var match$9 = Js_json.decodeString(value$4);
              tmp$3 = match$9 !== undefined ? match$9 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
            }
          } else {
            tmp$3 = undefined;
          }
          var match$10 = Js_dict.get(value$2, "description");
          var tmp$4;
          if (match$10 !== undefined) {
            var value$5 = Caml_option.valFromOption(match$10);
            var match$11 = Js_json.decodeNull(value$5);
            if (match$11 !== undefined) {
              tmp$4 = undefined;
            } else {
              var match$12 = Js_json.decodeString(value$5);
              tmp$4 = match$12 !== undefined ? match$12 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
            }
          } else {
            tmp$4 = undefined;
          }
          var match$13 = Js_dict.get(value$2, "content");
          var tmp$5;
          if (match$13 !== undefined) {
            var value$6 = Caml_option.valFromOption(match$13);
            var match$14 = Js_json.decodeNull(value$6);
            if (match$14 !== undefined) {
              tmp$5 = undefined;
            } else {
              var match$15 = Js_json.decodeString(value$6);
              tmp$5 = match$15 !== undefined ? match$15 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
            }
          } else {
            tmp$5 = undefined;
          }
          tmp$1 = {
            id: tmp$2,
            name: tmp$3,
            description: tmp$4,
            content: tmp$5
          };
        } else {
          tmp$1 = Js_exn.raiseError("graphql_ppx: Object is not a value");
        }
        tmp = Caml_option.some(tmp$1);
      }
    } else {
      tmp = undefined;
    }
    return {
            createPage: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make$2(name, topicId, description, content, param) {
  return {
          query: ppx_printed_query$2,
          variables: Js_dict.fromArray(/* array */[
                /* tuple */[
                  "name",
                  name
                ],
                /* tuple */[
                  "topicId",
                  topicId
                ],
                /* tuple */[
                  "description",
                  description !== undefined ? description : null
                ],
                /* tuple */[
                  "content",
                  content !== undefined ? content : null
                ]
              ]),
          parse: parse$2
        };
}

function makeWithVariables$2(variables) {
  var name = variables.name;
  var topicId = variables.topicId;
  var description = variables.description;
  var content = variables.content;
  return {
          query: ppx_printed_query$2,
          variables: Js_dict.fromArray(/* array */[
                /* tuple */[
                  "name",
                  name
                ],
                /* tuple */[
                  "topicId",
                  topicId
                ],
                /* tuple */[
                  "description",
                  description !== undefined ? description : null
                ],
                /* tuple */[
                  "content",
                  content !== undefined ? content : null
                ]
              ]),
          parse: parse$2
        };
}

function ret_type$2(f) {
  return /* module */[];
}

var MT_Ret$2 = /* module */[];

var CreatePage = /* module */[
  /* ppx_printed_query */ppx_printed_query$2,
  /* query */ppx_printed_query$2,
  /* parse */parse$2,
  /* make */make$2,
  /* makeWithVariables */makeWithVariables$2,
  /* ret_type */ret_type$2,
  /* MT_Ret */MT_Ret$2
];

var ppx_printed_query$3 = "mutation createNote($name: String!, $pageId: ID!, $description: String, $content: String)  {\ncreateNote(input: {name: $name, pageId: $pageId, description: $description, content: $content})  {\nid  \nname  \ndescription  \ncontent  \n}\n\n}\n";

function parse$3(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_dict.get(Caml_option.valFromOption(match), "createNote");
    var tmp;
    if (match$1 !== undefined) {
      var value$1 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeNull(value$1);
      if (match$2 !== undefined) {
        tmp = undefined;
      } else {
        var match$3 = Js_json.decodeObject(value$1);
        var tmp$1;
        if (match$3 !== undefined) {
          var value$2 = Caml_option.valFromOption(match$3);
          var match$4 = Js_dict.get(value$2, "id");
          var tmp$2;
          if (match$4 !== undefined) {
            var value$3 = Caml_option.valFromOption(match$4);
            var match$5 = Js_json.decodeNull(value$3);
            if (match$5 !== undefined) {
              tmp$2 = undefined;
            } else {
              var match$6 = Js_json.decodeString(value$3);
              tmp$2 = match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
            }
          } else {
            tmp$2 = undefined;
          }
          var match$7 = Js_dict.get(value$2, "name");
          var tmp$3;
          if (match$7 !== undefined) {
            var value$4 = Caml_option.valFromOption(match$7);
            var match$8 = Js_json.decodeNull(value$4);
            if (match$8 !== undefined) {
              tmp$3 = undefined;
            } else {
              var match$9 = Js_json.decodeString(value$4);
              tmp$3 = match$9 !== undefined ? match$9 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
            }
          } else {
            tmp$3 = undefined;
          }
          var match$10 = Js_dict.get(value$2, "description");
          var tmp$4;
          if (match$10 !== undefined) {
            var value$5 = Caml_option.valFromOption(match$10);
            var match$11 = Js_json.decodeNull(value$5);
            if (match$11 !== undefined) {
              tmp$4 = undefined;
            } else {
              var match$12 = Js_json.decodeString(value$5);
              tmp$4 = match$12 !== undefined ? match$12 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
            }
          } else {
            tmp$4 = undefined;
          }
          var match$13 = Js_dict.get(value$2, "content");
          var tmp$5;
          if (match$13 !== undefined) {
            var value$6 = Caml_option.valFromOption(match$13);
            var match$14 = Js_json.decodeNull(value$6);
            if (match$14 !== undefined) {
              tmp$5 = undefined;
            } else {
              var match$15 = Js_json.decodeString(value$6);
              tmp$5 = match$15 !== undefined ? match$15 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
            }
          } else {
            tmp$5 = undefined;
          }
          tmp$1 = {
            id: tmp$2,
            name: tmp$3,
            description: tmp$4,
            content: tmp$5
          };
        } else {
          tmp$1 = Js_exn.raiseError("graphql_ppx: Object is not a value");
        }
        tmp = Caml_option.some(tmp$1);
      }
    } else {
      tmp = undefined;
    }
    return {
            createNote: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make$3(name, pageId, description, content, param) {
  return {
          query: ppx_printed_query$3,
          variables: Js_dict.fromArray(/* array */[
                /* tuple */[
                  "name",
                  name
                ],
                /* tuple */[
                  "pageId",
                  pageId
                ],
                /* tuple */[
                  "description",
                  description !== undefined ? description : null
                ],
                /* tuple */[
                  "content",
                  content !== undefined ? content : null
                ]
              ]),
          parse: parse$3
        };
}

function makeWithVariables$3(variables) {
  var name = variables.name;
  var pageId = variables.pageId;
  var description = variables.description;
  var content = variables.content;
  return {
          query: ppx_printed_query$3,
          variables: Js_dict.fromArray(/* array */[
                /* tuple */[
                  "name",
                  name
                ],
                /* tuple */[
                  "pageId",
                  pageId
                ],
                /* tuple */[
                  "description",
                  description !== undefined ? description : null
                ],
                /* tuple */[
                  "content",
                  content !== undefined ? content : null
                ]
              ]),
          parse: parse$3
        };
}

function ret_type$3(f) {
  return /* module */[];
}

var MT_Ret$3 = /* module */[];

var CreateNote = /* module */[
  /* ppx_printed_query */ppx_printed_query$3,
  /* query */ppx_printed_query$3,
  /* parse */parse$3,
  /* make */make$3,
  /* makeWithVariables */makeWithVariables$3,
  /* ret_type */ret_type$3,
  /* MT_Ret */MT_Ret$3
];

var ppx_printed_query$4 = "mutation updateModule($id: ID!, $name: String, $description: String)  {\nupdateModule(input: {id: $id, name: $name, description: $description})  {\nid  \nname  \ndescription  \n}\n\n}\n";

function parse$4(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_dict.get(Caml_option.valFromOption(match), "updateModule");
    var tmp;
    if (match$1 !== undefined) {
      var value$1 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeNull(value$1);
      if (match$2 !== undefined) {
        tmp = undefined;
      } else {
        var match$3 = Js_json.decodeObject(value$1);
        var tmp$1;
        if (match$3 !== undefined) {
          var value$2 = Caml_option.valFromOption(match$3);
          var match$4 = Js_dict.get(value$2, "id");
          var tmp$2;
          if (match$4 !== undefined) {
            var value$3 = Caml_option.valFromOption(match$4);
            var match$5 = Js_json.decodeNull(value$3);
            if (match$5 !== undefined) {
              tmp$2 = undefined;
            } else {
              var match$6 = Js_json.decodeString(value$3);
              tmp$2 = match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
            }
          } else {
            tmp$2 = undefined;
          }
          var match$7 = Js_dict.get(value$2, "name");
          var tmp$3;
          if (match$7 !== undefined) {
            var value$4 = Caml_option.valFromOption(match$7);
            var match$8 = Js_json.decodeNull(value$4);
            if (match$8 !== undefined) {
              tmp$3 = undefined;
            } else {
              var match$9 = Js_json.decodeString(value$4);
              tmp$3 = match$9 !== undefined ? match$9 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
            }
          } else {
            tmp$3 = undefined;
          }
          var match$10 = Js_dict.get(value$2, "description");
          var tmp$4;
          if (match$10 !== undefined) {
            var value$5 = Caml_option.valFromOption(match$10);
            var match$11 = Js_json.decodeNull(value$5);
            if (match$11 !== undefined) {
              tmp$4 = undefined;
            } else {
              var match$12 = Js_json.decodeString(value$5);
              tmp$4 = match$12 !== undefined ? match$12 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
            }
          } else {
            tmp$4 = undefined;
          }
          tmp$1 = {
            id: tmp$2,
            name: tmp$3,
            description: tmp$4
          };
        } else {
          tmp$1 = Js_exn.raiseError("graphql_ppx: Object is not a value");
        }
        tmp = Caml_option.some(tmp$1);
      }
    } else {
      tmp = undefined;
    }
    return {
            updateModule: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make$4(id, name, description, param) {
  return {
          query: ppx_printed_query$4,
          variables: Js_dict.fromArray(/* array */[
                /* tuple */[
                  "id",
                  id
                ],
                /* tuple */[
                  "name",
                  name !== undefined ? name : null
                ],
                /* tuple */[
                  "description",
                  description !== undefined ? description : null
                ]
              ]),
          parse: parse$4
        };
}

function makeWithVariables$4(variables) {
  var id = variables.id;
  var name = variables.name;
  var description = variables.description;
  return {
          query: ppx_printed_query$4,
          variables: Js_dict.fromArray(/* array */[
                /* tuple */[
                  "id",
                  id
                ],
                /* tuple */[
                  "name",
                  name !== undefined ? name : null
                ],
                /* tuple */[
                  "description",
                  description !== undefined ? description : null
                ]
              ]),
          parse: parse$4
        };
}

function ret_type$4(f) {
  return /* module */[];
}

var MT_Ret$4 = /* module */[];

var UpdateModule = /* module */[
  /* ppx_printed_query */ppx_printed_query$4,
  /* query */ppx_printed_query$4,
  /* parse */parse$4,
  /* make */make$4,
  /* makeWithVariables */makeWithVariables$4,
  /* ret_type */ret_type$4,
  /* MT_Ret */MT_Ret$4
];

var ppx_printed_query$5 = "mutation updateSubject($id: ID!, $name: String!, $description: String)  {\nupdateSubject(input: {id: $id, name: $name, description: $description})  {\nid  \nname  \ndescription  \n}\n\n}\n";

function parse$5(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_dict.get(Caml_option.valFromOption(match), "updateSubject");
    var tmp;
    if (match$1 !== undefined) {
      var value$1 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeNull(value$1);
      if (match$2 !== undefined) {
        tmp = undefined;
      } else {
        var match$3 = Js_json.decodeObject(value$1);
        var tmp$1;
        if (match$3 !== undefined) {
          var value$2 = Caml_option.valFromOption(match$3);
          var match$4 = Js_dict.get(value$2, "id");
          var tmp$2;
          if (match$4 !== undefined) {
            var value$3 = Caml_option.valFromOption(match$4);
            var match$5 = Js_json.decodeNull(value$3);
            if (match$5 !== undefined) {
              tmp$2 = undefined;
            } else {
              var match$6 = Js_json.decodeString(value$3);
              tmp$2 = match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
            }
          } else {
            tmp$2 = undefined;
          }
          var match$7 = Js_dict.get(value$2, "name");
          var tmp$3;
          if (match$7 !== undefined) {
            var value$4 = Caml_option.valFromOption(match$7);
            var match$8 = Js_json.decodeNull(value$4);
            if (match$8 !== undefined) {
              tmp$3 = undefined;
            } else {
              var match$9 = Js_json.decodeString(value$4);
              tmp$3 = match$9 !== undefined ? match$9 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
            }
          } else {
            tmp$3 = undefined;
          }
          var match$10 = Js_dict.get(value$2, "description");
          var tmp$4;
          if (match$10 !== undefined) {
            var value$5 = Caml_option.valFromOption(match$10);
            var match$11 = Js_json.decodeNull(value$5);
            if (match$11 !== undefined) {
              tmp$4 = undefined;
            } else {
              var match$12 = Js_json.decodeString(value$5);
              tmp$4 = match$12 !== undefined ? match$12 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
            }
          } else {
            tmp$4 = undefined;
          }
          tmp$1 = {
            id: tmp$2,
            name: tmp$3,
            description: tmp$4
          };
        } else {
          tmp$1 = Js_exn.raiseError("graphql_ppx: Object is not a value");
        }
        tmp = Caml_option.some(tmp$1);
      }
    } else {
      tmp = undefined;
    }
    return {
            updateSubject: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make$5(id, name, description, param) {
  return {
          query: ppx_printed_query$5,
          variables: Js_dict.fromArray(/* array */[
                /* tuple */[
                  "id",
                  id
                ],
                /* tuple */[
                  "name",
                  name
                ],
                /* tuple */[
                  "description",
                  description !== undefined ? description : null
                ]
              ]),
          parse: parse$5
        };
}

function makeWithVariables$5(variables) {
  var id = variables.id;
  var name = variables.name;
  var description = variables.description;
  return {
          query: ppx_printed_query$5,
          variables: Js_dict.fromArray(/* array */[
                /* tuple */[
                  "id",
                  id
                ],
                /* tuple */[
                  "name",
                  name
                ],
                /* tuple */[
                  "description",
                  description !== undefined ? description : null
                ]
              ]),
          parse: parse$5
        };
}

function ret_type$5(f) {
  return /* module */[];
}

var MT_Ret$5 = /* module */[];

var UpdateSubject = /* module */[
  /* ppx_printed_query */ppx_printed_query$5,
  /* query */ppx_printed_query$5,
  /* parse */parse$5,
  /* make */make$5,
  /* makeWithVariables */makeWithVariables$5,
  /* ret_type */ret_type$5,
  /* MT_Ret */MT_Ret$5
];

var ppx_printed_query$6 = "mutation updateTopic($id: ID!, $name: String!, $description: String)  {\nupdateTopic(input: {id: $id, name: $name, description: $description})  {\nid  \nname  \ndescription  \n}\n\n}\n";

function parse$6(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_dict.get(Caml_option.valFromOption(match), "updateTopic");
    var tmp;
    if (match$1 !== undefined) {
      var value$1 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeNull(value$1);
      if (match$2 !== undefined) {
        tmp = undefined;
      } else {
        var match$3 = Js_json.decodeObject(value$1);
        var tmp$1;
        if (match$3 !== undefined) {
          var value$2 = Caml_option.valFromOption(match$3);
          var match$4 = Js_dict.get(value$2, "id");
          var tmp$2;
          if (match$4 !== undefined) {
            var value$3 = Caml_option.valFromOption(match$4);
            var match$5 = Js_json.decodeNull(value$3);
            if (match$5 !== undefined) {
              tmp$2 = undefined;
            } else {
              var match$6 = Js_json.decodeString(value$3);
              tmp$2 = match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
            }
          } else {
            tmp$2 = undefined;
          }
          var match$7 = Js_dict.get(value$2, "name");
          var tmp$3;
          if (match$7 !== undefined) {
            var value$4 = Caml_option.valFromOption(match$7);
            var match$8 = Js_json.decodeNull(value$4);
            if (match$8 !== undefined) {
              tmp$3 = undefined;
            } else {
              var match$9 = Js_json.decodeString(value$4);
              tmp$3 = match$9 !== undefined ? match$9 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
            }
          } else {
            tmp$3 = undefined;
          }
          var match$10 = Js_dict.get(value$2, "description");
          var tmp$4;
          if (match$10 !== undefined) {
            var value$5 = Caml_option.valFromOption(match$10);
            var match$11 = Js_json.decodeNull(value$5);
            if (match$11 !== undefined) {
              tmp$4 = undefined;
            } else {
              var match$12 = Js_json.decodeString(value$5);
              tmp$4 = match$12 !== undefined ? match$12 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
            }
          } else {
            tmp$4 = undefined;
          }
          tmp$1 = {
            id: tmp$2,
            name: tmp$3,
            description: tmp$4
          };
        } else {
          tmp$1 = Js_exn.raiseError("graphql_ppx: Object is not a value");
        }
        tmp = Caml_option.some(tmp$1);
      }
    } else {
      tmp = undefined;
    }
    return {
            updateTopic: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make$6(id, name, description, param) {
  return {
          query: ppx_printed_query$6,
          variables: Js_dict.fromArray(/* array */[
                /* tuple */[
                  "id",
                  id
                ],
                /* tuple */[
                  "name",
                  name
                ],
                /* tuple */[
                  "description",
                  description !== undefined ? description : null
                ]
              ]),
          parse: parse$6
        };
}

function makeWithVariables$6(variables) {
  var id = variables.id;
  var name = variables.name;
  var description = variables.description;
  return {
          query: ppx_printed_query$6,
          variables: Js_dict.fromArray(/* array */[
                /* tuple */[
                  "id",
                  id
                ],
                /* tuple */[
                  "name",
                  name
                ],
                /* tuple */[
                  "description",
                  description !== undefined ? description : null
                ]
              ]),
          parse: parse$6
        };
}

function ret_type$6(f) {
  return /* module */[];
}

var MT_Ret$6 = /* module */[];

var UpdateTopic = /* module */[
  /* ppx_printed_query */ppx_printed_query$6,
  /* query */ppx_printed_query$6,
  /* parse */parse$6,
  /* make */make$6,
  /* makeWithVariables */makeWithVariables$6,
  /* ret_type */ret_type$6,
  /* MT_Ret */MT_Ret$6
];

var ppx_printed_query$7 = "mutation updatePage($id: ID!, $name: String!, $description: String)  {\nupdatePage(input: {id: $id, name: $name, description: $description})  {\nid  \nname  \ndescription  \n}\n\n}\n";

function parse$7(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_dict.get(Caml_option.valFromOption(match), "updatePage");
    var tmp;
    if (match$1 !== undefined) {
      var value$1 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeNull(value$1);
      if (match$2 !== undefined) {
        tmp = undefined;
      } else {
        var match$3 = Js_json.decodeObject(value$1);
        var tmp$1;
        if (match$3 !== undefined) {
          var value$2 = Caml_option.valFromOption(match$3);
          var match$4 = Js_dict.get(value$2, "id");
          var tmp$2;
          if (match$4 !== undefined) {
            var value$3 = Caml_option.valFromOption(match$4);
            var match$5 = Js_json.decodeNull(value$3);
            if (match$5 !== undefined) {
              tmp$2 = undefined;
            } else {
              var match$6 = Js_json.decodeString(value$3);
              tmp$2 = match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
            }
          } else {
            tmp$2 = undefined;
          }
          var match$7 = Js_dict.get(value$2, "name");
          var tmp$3;
          if (match$7 !== undefined) {
            var value$4 = Caml_option.valFromOption(match$7);
            var match$8 = Js_json.decodeNull(value$4);
            if (match$8 !== undefined) {
              tmp$3 = undefined;
            } else {
              var match$9 = Js_json.decodeString(value$4);
              tmp$3 = match$9 !== undefined ? match$9 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
            }
          } else {
            tmp$3 = undefined;
          }
          var match$10 = Js_dict.get(value$2, "description");
          var tmp$4;
          if (match$10 !== undefined) {
            var value$5 = Caml_option.valFromOption(match$10);
            var match$11 = Js_json.decodeNull(value$5);
            if (match$11 !== undefined) {
              tmp$4 = undefined;
            } else {
              var match$12 = Js_json.decodeString(value$5);
              tmp$4 = match$12 !== undefined ? match$12 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
            }
          } else {
            tmp$4 = undefined;
          }
          tmp$1 = {
            id: tmp$2,
            name: tmp$3,
            description: tmp$4
          };
        } else {
          tmp$1 = Js_exn.raiseError("graphql_ppx: Object is not a value");
        }
        tmp = Caml_option.some(tmp$1);
      }
    } else {
      tmp = undefined;
    }
    return {
            updatePage: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make$7(id, name, description, param) {
  return {
          query: ppx_printed_query$7,
          variables: Js_dict.fromArray(/* array */[
                /* tuple */[
                  "id",
                  id
                ],
                /* tuple */[
                  "name",
                  name
                ],
                /* tuple */[
                  "description",
                  description !== undefined ? description : null
                ]
              ]),
          parse: parse$7
        };
}

function makeWithVariables$7(variables) {
  var id = variables.id;
  var name = variables.name;
  var description = variables.description;
  return {
          query: ppx_printed_query$7,
          variables: Js_dict.fromArray(/* array */[
                /* tuple */[
                  "id",
                  id
                ],
                /* tuple */[
                  "name",
                  name
                ],
                /* tuple */[
                  "description",
                  description !== undefined ? description : null
                ]
              ]),
          parse: parse$7
        };
}

function ret_type$7(f) {
  return /* module */[];
}

var MT_Ret$7 = /* module */[];

var UpdatePage = /* module */[
  /* ppx_printed_query */ppx_printed_query$7,
  /* query */ppx_printed_query$7,
  /* parse */parse$7,
  /* make */make$7,
  /* makeWithVariables */makeWithVariables$7,
  /* ret_type */ret_type$7,
  /* MT_Ret */MT_Ret$7
];

var ppx_printed_query$8 = "mutation updateNote($id: ID!, $content: String, $pageId: ID!)  {\nupdateNote(input: {id: $id, content: $content, pageId: $pageId})  {\nid  \ncontent  \n}\n\n}\n";

function parse$8(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_dict.get(Caml_option.valFromOption(match), "updateNote");
    var tmp;
    if (match$1 !== undefined) {
      var value$1 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeNull(value$1);
      if (match$2 !== undefined) {
        tmp = undefined;
      } else {
        var match$3 = Js_json.decodeObject(value$1);
        var tmp$1;
        if (match$3 !== undefined) {
          var value$2 = Caml_option.valFromOption(match$3);
          var match$4 = Js_dict.get(value$2, "id");
          var tmp$2;
          if (match$4 !== undefined) {
            var value$3 = Caml_option.valFromOption(match$4);
            var match$5 = Js_json.decodeNull(value$3);
            if (match$5 !== undefined) {
              tmp$2 = undefined;
            } else {
              var match$6 = Js_json.decodeString(value$3);
              tmp$2 = match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
            }
          } else {
            tmp$2 = undefined;
          }
          var match$7 = Js_dict.get(value$2, "content");
          var tmp$3;
          if (match$7 !== undefined) {
            var value$4 = Caml_option.valFromOption(match$7);
            var match$8 = Js_json.decodeNull(value$4);
            if (match$8 !== undefined) {
              tmp$3 = undefined;
            } else {
              var match$9 = Js_json.decodeString(value$4);
              tmp$3 = match$9 !== undefined ? match$9 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
            }
          } else {
            tmp$3 = undefined;
          }
          tmp$1 = {
            id: tmp$2,
            content: tmp$3
          };
        } else {
          tmp$1 = Js_exn.raiseError("graphql_ppx: Object is not a value");
        }
        tmp = Caml_option.some(tmp$1);
      }
    } else {
      tmp = undefined;
    }
    return {
            updateNote: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make$8(id, content, pageId, param) {
  return {
          query: ppx_printed_query$8,
          variables: Js_dict.fromArray(/* array */[
                /* tuple */[
                  "id",
                  id
                ],
                /* tuple */[
                  "content",
                  content !== undefined ? content : null
                ],
                /* tuple */[
                  "pageId",
                  pageId
                ]
              ]),
          parse: parse$8
        };
}

function makeWithVariables$8(variables) {
  var id = variables.id;
  var content = variables.content;
  var pageId = variables.pageId;
  return {
          query: ppx_printed_query$8,
          variables: Js_dict.fromArray(/* array */[
                /* tuple */[
                  "id",
                  id
                ],
                /* tuple */[
                  "content",
                  content !== undefined ? content : null
                ],
                /* tuple */[
                  "pageId",
                  pageId
                ]
              ]),
          parse: parse$8
        };
}

function ret_type$8(f) {
  return /* module */[];
}

var MT_Ret$8 = /* module */[];

var UpdateNote = /* module */[
  /* ppx_printed_query */ppx_printed_query$8,
  /* query */ppx_printed_query$8,
  /* parse */parse$8,
  /* make */make$8,
  /* makeWithVariables */makeWithVariables$8,
  /* ret_type */ret_type$8,
  /* MT_Ret */MT_Ret$8
];

var updateNote = "\n    mutation updateNote($id: ID!, $name: String, $content: String, $pageId: ID!) {\n      updateNote(input: {\n        id: $id\n        content: $content\n        pageId: $pageId\n        name: $name\n      }) {\n        id\n        content\n      }\n    }\n  ";

export {
  CreateSubject ,
  CreateTopic ,
  CreatePage ,
  CreateNote ,
  UpdateModule ,
  UpdateSubject ,
  UpdateTopic ,
  UpdatePage ,
  UpdateNote ,
  updateNote ,
  
}
/* No side effect */
