// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE

import * as Js_exn from "bs-platform/lib/es6/js_exn.js";
import * as Js_dict from "bs-platform/lib/es6/js_dict.js";
import * as Js_json from "bs-platform/lib/es6/js_json.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";

var ppx_printed_query = "query modules  {\nmodules  {\nname  \nid  \ndescription  \n}\n\n}\n";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_dict.get(Caml_option.valFromOption(match), "modules");
    var tmp;
    if (match$1 !== undefined) {
      var value$1 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeNull(value$1);
      if (match$2 !== undefined) {
        tmp = undefined;
      } else {
        var match$3 = Js_json.decodeArray(value$1);
        tmp = match$3 !== undefined ? match$3.map((function (value) {
                  var match = Js_json.decodeNull(value);
                  if (match !== undefined) {
                    return undefined;
                  } else {
                    var match$1 = Js_json.decodeObject(value);
                    var tmp;
                    if (match$1 !== undefined) {
                      var value$1 = Caml_option.valFromOption(match$1);
                      var match$2 = Js_dict.get(value$1, "name");
                      var tmp$1;
                      if (match$2 !== undefined) {
                        var value$2 = Caml_option.valFromOption(match$2);
                        var match$3 = Js_json.decodeNull(value$2);
                        if (match$3 !== undefined) {
                          tmp$1 = undefined;
                        } else {
                          var match$4 = Js_json.decodeString(value$2);
                          tmp$1 = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                        }
                      } else {
                        tmp$1 = undefined;
                      }
                      var match$5 = Js_dict.get(value$1, "id");
                      var tmp$2;
                      if (match$5 !== undefined) {
                        var value$3 = Caml_option.valFromOption(match$5);
                        var match$6 = Js_json.decodeNull(value$3);
                        if (match$6 !== undefined) {
                          tmp$2 = undefined;
                        } else {
                          var match$7 = Js_json.decodeString(value$3);
                          tmp$2 = match$7 !== undefined ? match$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                        }
                      } else {
                        tmp$2 = undefined;
                      }
                      var match$8 = Js_dict.get(value$1, "description");
                      var tmp$3;
                      if (match$8 !== undefined) {
                        var value$4 = Caml_option.valFromOption(match$8);
                        var match$9 = Js_json.decodeNull(value$4);
                        if (match$9 !== undefined) {
                          tmp$3 = undefined;
                        } else {
                          var match$10 = Js_json.decodeString(value$4);
                          tmp$3 = match$10 !== undefined ? match$10 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
                        }
                      } else {
                        tmp$3 = undefined;
                      }
                      tmp = {
                        name: tmp$1,
                        id: tmp$2,
                        description: tmp$3
                      };
                    } else {
                      tmp = Js_exn.raiseError("graphql_ppx: Object is not a value");
                    }
                    return Caml_option.some(tmp);
                  }
                })) : Js_exn.raiseError("graphql_ppx: Expected array, got " + JSON.stringify(value$1));
      }
    } else {
      tmp = undefined;
    }
    return {
            modules: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make(param) {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function makeWithVariables(param) {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function ret_type(f) {
  return /* module */[];
}

var MT_Ret = /* module */[];

var ListModules = /* module */[
  /* ppx_printed_query */ppx_printed_query,
  /* query */ppx_printed_query,
  /* parse */parse,
  /* make */make,
  /* makeWithVariables */makeWithVariables,
  /* ret_type */ret_type,
  /* MT_Ret */MT_Ret
];

var ppx_printed_query$1 = "query module($id: ID!)  {\nmodule_: module(id: $id)  {\nid  \nname  \ndescription  \nsubjects  {\nid  \nname  \ndescription  \n}\n\n}\n\n}\n";

function parse$1(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_dict.get(Caml_option.valFromOption(match), "module_");
    var tmp;
    if (match$1 !== undefined) {
      var value$1 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeNull(value$1);
      if (match$2 !== undefined) {
        tmp = undefined;
      } else {
        var match$3 = Js_json.decodeObject(value$1);
        var tmp$1;
        if (match$3 !== undefined) {
          var value$2 = Caml_option.valFromOption(match$3);
          var match$4 = Js_dict.get(value$2, "id");
          var tmp$2;
          if (match$4 !== undefined) {
            var value$3 = Caml_option.valFromOption(match$4);
            var match$5 = Js_json.decodeNull(value$3);
            if (match$5 !== undefined) {
              tmp$2 = undefined;
            } else {
              var match$6 = Js_json.decodeString(value$3);
              tmp$2 = match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
            }
          } else {
            tmp$2 = undefined;
          }
          var match$7 = Js_dict.get(value$2, "name");
          var tmp$3;
          if (match$7 !== undefined) {
            var value$4 = Caml_option.valFromOption(match$7);
            var match$8 = Js_json.decodeNull(value$4);
            if (match$8 !== undefined) {
              tmp$3 = undefined;
            } else {
              var match$9 = Js_json.decodeString(value$4);
              tmp$3 = match$9 !== undefined ? match$9 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
            }
          } else {
            tmp$3 = undefined;
          }
          var match$10 = Js_dict.get(value$2, "description");
          var tmp$4;
          if (match$10 !== undefined) {
            var value$5 = Caml_option.valFromOption(match$10);
            var match$11 = Js_json.decodeNull(value$5);
            if (match$11 !== undefined) {
              tmp$4 = undefined;
            } else {
              var match$12 = Js_json.decodeString(value$5);
              tmp$4 = match$12 !== undefined ? match$12 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
            }
          } else {
            tmp$4 = undefined;
          }
          var match$13 = Js_dict.get(value$2, "subjects");
          var tmp$5;
          if (match$13 !== undefined) {
            var value$6 = Caml_option.valFromOption(match$13);
            var match$14 = Js_json.decodeNull(value$6);
            if (match$14 !== undefined) {
              tmp$5 = undefined;
            } else {
              var match$15 = Js_json.decodeArray(value$6);
              tmp$5 = match$15 !== undefined ? match$15.map((function (value) {
                        var match = Js_json.decodeNull(value);
                        if (match !== undefined) {
                          return undefined;
                        } else {
                          var match$1 = Js_json.decodeObject(value);
                          var tmp;
                          if (match$1 !== undefined) {
                            var value$1 = Caml_option.valFromOption(match$1);
                            var match$2 = Js_dict.get(value$1, "id");
                            var tmp$1;
                            if (match$2 !== undefined) {
                              var value$2 = Caml_option.valFromOption(match$2);
                              var match$3 = Js_json.decodeNull(value$2);
                              if (match$3 !== undefined) {
                                tmp$1 = undefined;
                              } else {
                                var match$4 = Js_json.decodeString(value$2);
                                tmp$1 = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                              }
                            } else {
                              tmp$1 = undefined;
                            }
                            var match$5 = Js_dict.get(value$1, "name");
                            var tmp$2;
                            if (match$5 !== undefined) {
                              var value$3 = Caml_option.valFromOption(match$5);
                              var match$6 = Js_json.decodeNull(value$3);
                              if (match$6 !== undefined) {
                                tmp$2 = undefined;
                              } else {
                                var match$7 = Js_json.decodeString(value$3);
                                tmp$2 = match$7 !== undefined ? match$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                              }
                            } else {
                              tmp$2 = undefined;
                            }
                            var match$8 = Js_dict.get(value$1, "description");
                            var tmp$3;
                            if (match$8 !== undefined) {
                              var value$4 = Caml_option.valFromOption(match$8);
                              var match$9 = Js_json.decodeNull(value$4);
                              if (match$9 !== undefined) {
                                tmp$3 = undefined;
                              } else {
                                var match$10 = Js_json.decodeString(value$4);
                                tmp$3 = match$10 !== undefined ? match$10 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
                              }
                            } else {
                              tmp$3 = undefined;
                            }
                            tmp = {
                              id: tmp$1,
                              name: tmp$2,
                              description: tmp$3
                            };
                          } else {
                            tmp = Js_exn.raiseError("graphql_ppx: Object is not a value");
                          }
                          return Caml_option.some(tmp);
                        }
                      })) : Js_exn.raiseError("graphql_ppx: Expected array, got " + JSON.stringify(value$6));
            }
          } else {
            tmp$5 = undefined;
          }
          tmp$1 = {
            id: tmp$2,
            name: tmp$3,
            description: tmp$4,
            subjects: tmp$5
          };
        } else {
          tmp$1 = Js_exn.raiseError("graphql_ppx: Object is not a value");
        }
        tmp = Caml_option.some(tmp$1);
      }
    } else {
      tmp = undefined;
    }
    return {
            module_: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make$1(id, param) {
  return {
          query: ppx_printed_query$1,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                  "id",
                  id
                ]]),
          parse: parse$1
        };
}

function makeWithVariables$1(variables) {
  var id = variables.id;
  return {
          query: ppx_printed_query$1,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                  "id",
                  id
                ]]),
          parse: parse$1
        };
}

function ret_type$1(f) {
  return /* module */[];
}

var MT_Ret$1 = /* module */[];

var GetModule = /* module */[
  /* ppx_printed_query */ppx_printed_query$1,
  /* query */ppx_printed_query$1,
  /* parse */parse$1,
  /* make */make$1,
  /* makeWithVariables */makeWithVariables$1,
  /* ret_type */ret_type$1,
  /* MT_Ret */MT_Ret$1
];

var ppx_printed_query$2 = "query subject($id: ID!)  {\nsubject: subject(id: $id)  {\nid  \nname  \ndescription  \nmoduleId  \ntopics  {\nid  \nname  \ndescription  \n}\n\n}\n\n}\n";

function parse$2(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_dict.get(Caml_option.valFromOption(match), "subject");
    var tmp;
    if (match$1 !== undefined) {
      var value$1 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeNull(value$1);
      if (match$2 !== undefined) {
        tmp = undefined;
      } else {
        var match$3 = Js_json.decodeObject(value$1);
        var tmp$1;
        if (match$3 !== undefined) {
          var value$2 = Caml_option.valFromOption(match$3);
          var match$4 = Js_dict.get(value$2, "id");
          var tmp$2;
          if (match$4 !== undefined) {
            var value$3 = Caml_option.valFromOption(match$4);
            var match$5 = Js_json.decodeNull(value$3);
            if (match$5 !== undefined) {
              tmp$2 = undefined;
            } else {
              var match$6 = Js_json.decodeString(value$3);
              tmp$2 = match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
            }
          } else {
            tmp$2 = undefined;
          }
          var match$7 = Js_dict.get(value$2, "name");
          var tmp$3;
          if (match$7 !== undefined) {
            var value$4 = Caml_option.valFromOption(match$7);
            var match$8 = Js_json.decodeNull(value$4);
            if (match$8 !== undefined) {
              tmp$3 = undefined;
            } else {
              var match$9 = Js_json.decodeString(value$4);
              tmp$3 = match$9 !== undefined ? match$9 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
            }
          } else {
            tmp$3 = undefined;
          }
          var match$10 = Js_dict.get(value$2, "description");
          var tmp$4;
          if (match$10 !== undefined) {
            var value$5 = Caml_option.valFromOption(match$10);
            var match$11 = Js_json.decodeNull(value$5);
            if (match$11 !== undefined) {
              tmp$4 = undefined;
            } else {
              var match$12 = Js_json.decodeString(value$5);
              tmp$4 = match$12 !== undefined ? match$12 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
            }
          } else {
            tmp$4 = undefined;
          }
          var match$13 = Js_dict.get(value$2, "moduleId");
          var tmp$5;
          if (match$13 !== undefined) {
            var value$6 = Caml_option.valFromOption(match$13);
            var match$14 = Js_json.decodeNull(value$6);
            if (match$14 !== undefined) {
              tmp$5 = undefined;
            } else {
              var match$15 = Js_json.decodeString(value$6);
              tmp$5 = match$15 !== undefined ? match$15 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
            }
          } else {
            tmp$5 = undefined;
          }
          var match$16 = Js_dict.get(value$2, "topics");
          var tmp$6;
          if (match$16 !== undefined) {
            var value$7 = Caml_option.valFromOption(match$16);
            var match$17 = Js_json.decodeNull(value$7);
            if (match$17 !== undefined) {
              tmp$6 = undefined;
            } else {
              var match$18 = Js_json.decodeArray(value$7);
              tmp$6 = match$18 !== undefined ? match$18.map((function (value) {
                        var match = Js_json.decodeNull(value);
                        if (match !== undefined) {
                          return undefined;
                        } else {
                          var match$1 = Js_json.decodeObject(value);
                          var tmp;
                          if (match$1 !== undefined) {
                            var value$1 = Caml_option.valFromOption(match$1);
                            var match$2 = Js_dict.get(value$1, "id");
                            var tmp$1;
                            if (match$2 !== undefined) {
                              var value$2 = Caml_option.valFromOption(match$2);
                              var match$3 = Js_json.decodeNull(value$2);
                              if (match$3 !== undefined) {
                                tmp$1 = undefined;
                              } else {
                                var match$4 = Js_json.decodeString(value$2);
                                tmp$1 = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                              }
                            } else {
                              tmp$1 = undefined;
                            }
                            var match$5 = Js_dict.get(value$1, "name");
                            var tmp$2;
                            if (match$5 !== undefined) {
                              var value$3 = Caml_option.valFromOption(match$5);
                              var match$6 = Js_json.decodeNull(value$3);
                              if (match$6 !== undefined) {
                                tmp$2 = undefined;
                              } else {
                                var match$7 = Js_json.decodeString(value$3);
                                tmp$2 = match$7 !== undefined ? match$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                              }
                            } else {
                              tmp$2 = undefined;
                            }
                            var match$8 = Js_dict.get(value$1, "description");
                            var tmp$3;
                            if (match$8 !== undefined) {
                              var value$4 = Caml_option.valFromOption(match$8);
                              var match$9 = Js_json.decodeNull(value$4);
                              if (match$9 !== undefined) {
                                tmp$3 = undefined;
                              } else {
                                var match$10 = Js_json.decodeString(value$4);
                                tmp$3 = match$10 !== undefined ? match$10 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
                              }
                            } else {
                              tmp$3 = undefined;
                            }
                            tmp = {
                              id: tmp$1,
                              name: tmp$2,
                              description: tmp$3
                            };
                          } else {
                            tmp = Js_exn.raiseError("graphql_ppx: Object is not a value");
                          }
                          return Caml_option.some(tmp);
                        }
                      })) : Js_exn.raiseError("graphql_ppx: Expected array, got " + JSON.stringify(value$7));
            }
          } else {
            tmp$6 = undefined;
          }
          tmp$1 = {
            id: tmp$2,
            name: tmp$3,
            description: tmp$4,
            moduleId: tmp$5,
            topics: tmp$6
          };
        } else {
          tmp$1 = Js_exn.raiseError("graphql_ppx: Object is not a value");
        }
        tmp = Caml_option.some(tmp$1);
      }
    } else {
      tmp = undefined;
    }
    return {
            subject: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make$2(id, param) {
  return {
          query: ppx_printed_query$2,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                  "id",
                  id
                ]]),
          parse: parse$2
        };
}

function makeWithVariables$2(variables) {
  var id = variables.id;
  return {
          query: ppx_printed_query$2,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                  "id",
                  id
                ]]),
          parse: parse$2
        };
}

function ret_type$2(f) {
  return /* module */[];
}

var MT_Ret$2 = /* module */[];

var GetSubject = /* module */[
  /* ppx_printed_query */ppx_printed_query$2,
  /* query */ppx_printed_query$2,
  /* parse */parse$2,
  /* make */make$2,
  /* makeWithVariables */makeWithVariables$2,
  /* ret_type */ret_type$2,
  /* MT_Ret */MT_Ret$2
];

var ppx_printed_query$3 = "query topic($id: ID!)  {\ntopic: topic(id: $id)  {\nid  \nname  \ndescription  \nsubjectId  \npages  {\nid  \nname  \ndescription  \n}\n\n}\n\n}\n";

function parse$3(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_dict.get(Caml_option.valFromOption(match), "topic");
    var tmp;
    if (match$1 !== undefined) {
      var value$1 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeNull(value$1);
      if (match$2 !== undefined) {
        tmp = undefined;
      } else {
        var match$3 = Js_json.decodeObject(value$1);
        var tmp$1;
        if (match$3 !== undefined) {
          var value$2 = Caml_option.valFromOption(match$3);
          var match$4 = Js_dict.get(value$2, "id");
          var tmp$2;
          if (match$4 !== undefined) {
            var value$3 = Caml_option.valFromOption(match$4);
            var match$5 = Js_json.decodeNull(value$3);
            if (match$5 !== undefined) {
              tmp$2 = undefined;
            } else {
              var match$6 = Js_json.decodeString(value$3);
              tmp$2 = match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
            }
          } else {
            tmp$2 = undefined;
          }
          var match$7 = Js_dict.get(value$2, "name");
          var tmp$3;
          if (match$7 !== undefined) {
            var value$4 = Caml_option.valFromOption(match$7);
            var match$8 = Js_json.decodeNull(value$4);
            if (match$8 !== undefined) {
              tmp$3 = undefined;
            } else {
              var match$9 = Js_json.decodeString(value$4);
              tmp$3 = match$9 !== undefined ? match$9 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
            }
          } else {
            tmp$3 = undefined;
          }
          var match$10 = Js_dict.get(value$2, "description");
          var tmp$4;
          if (match$10 !== undefined) {
            var value$5 = Caml_option.valFromOption(match$10);
            var match$11 = Js_json.decodeNull(value$5);
            if (match$11 !== undefined) {
              tmp$4 = undefined;
            } else {
              var match$12 = Js_json.decodeString(value$5);
              tmp$4 = match$12 !== undefined ? match$12 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
            }
          } else {
            tmp$4 = undefined;
          }
          var match$13 = Js_dict.get(value$2, "subjectId");
          var tmp$5;
          if (match$13 !== undefined) {
            var value$6 = Caml_option.valFromOption(match$13);
            var match$14 = Js_json.decodeNull(value$6);
            if (match$14 !== undefined) {
              tmp$5 = undefined;
            } else {
              var match$15 = Js_json.decodeString(value$6);
              tmp$5 = match$15 !== undefined ? match$15 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
            }
          } else {
            tmp$5 = undefined;
          }
          var match$16 = Js_dict.get(value$2, "pages");
          var tmp$6;
          if (match$16 !== undefined) {
            var value$7 = Caml_option.valFromOption(match$16);
            var match$17 = Js_json.decodeNull(value$7);
            if (match$17 !== undefined) {
              tmp$6 = undefined;
            } else {
              var match$18 = Js_json.decodeArray(value$7);
              tmp$6 = match$18 !== undefined ? match$18.map((function (value) {
                        var match = Js_json.decodeNull(value);
                        if (match !== undefined) {
                          return undefined;
                        } else {
                          var match$1 = Js_json.decodeObject(value);
                          var tmp;
                          if (match$1 !== undefined) {
                            var value$1 = Caml_option.valFromOption(match$1);
                            var match$2 = Js_dict.get(value$1, "id");
                            var tmp$1;
                            if (match$2 !== undefined) {
                              var value$2 = Caml_option.valFromOption(match$2);
                              var match$3 = Js_json.decodeNull(value$2);
                              if (match$3 !== undefined) {
                                tmp$1 = undefined;
                              } else {
                                var match$4 = Js_json.decodeString(value$2);
                                tmp$1 = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                              }
                            } else {
                              tmp$1 = undefined;
                            }
                            var match$5 = Js_dict.get(value$1, "name");
                            var tmp$2;
                            if (match$5 !== undefined) {
                              var value$3 = Caml_option.valFromOption(match$5);
                              var match$6 = Js_json.decodeNull(value$3);
                              if (match$6 !== undefined) {
                                tmp$2 = undefined;
                              } else {
                                var match$7 = Js_json.decodeString(value$3);
                                tmp$2 = match$7 !== undefined ? match$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                              }
                            } else {
                              tmp$2 = undefined;
                            }
                            var match$8 = Js_dict.get(value$1, "description");
                            var tmp$3;
                            if (match$8 !== undefined) {
                              var value$4 = Caml_option.valFromOption(match$8);
                              var match$9 = Js_json.decodeNull(value$4);
                              if (match$9 !== undefined) {
                                tmp$3 = undefined;
                              } else {
                                var match$10 = Js_json.decodeString(value$4);
                                tmp$3 = match$10 !== undefined ? match$10 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
                              }
                            } else {
                              tmp$3 = undefined;
                            }
                            tmp = {
                              id: tmp$1,
                              name: tmp$2,
                              description: tmp$3
                            };
                          } else {
                            tmp = Js_exn.raiseError("graphql_ppx: Object is not a value");
                          }
                          return Caml_option.some(tmp);
                        }
                      })) : Js_exn.raiseError("graphql_ppx: Expected array, got " + JSON.stringify(value$7));
            }
          } else {
            tmp$6 = undefined;
          }
          tmp$1 = {
            id: tmp$2,
            name: tmp$3,
            description: tmp$4,
            subjectId: tmp$5,
            pages: tmp$6
          };
        } else {
          tmp$1 = Js_exn.raiseError("graphql_ppx: Object is not a value");
        }
        tmp = Caml_option.some(tmp$1);
      }
    } else {
      tmp = undefined;
    }
    return {
            topic: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make$3(id, param) {
  return {
          query: ppx_printed_query$3,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                  "id",
                  id
                ]]),
          parse: parse$3
        };
}

function makeWithVariables$3(variables) {
  var id = variables.id;
  return {
          query: ppx_printed_query$3,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                  "id",
                  id
                ]]),
          parse: parse$3
        };
}

function ret_type$3(f) {
  return /* module */[];
}

var MT_Ret$3 = /* module */[];

var GetTopic = /* module */[
  /* ppx_printed_query */ppx_printed_query$3,
  /* query */ppx_printed_query$3,
  /* parse */parse$3,
  /* make */make$3,
  /* makeWithVariables */makeWithVariables$3,
  /* ret_type */ret_type$3,
  /* MT_Ret */MT_Ret$3
];

var ppx_printed_query$4 = "query page($id: ID!)  {\npage: page(id: $id)  {\nid  \nname  \ndescription  \ncontent  \ntopicId  \nnotes  {\nid  \nname  \ndescription  \n}\n\n}\n\n}\n";

function parse$4(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_dict.get(Caml_option.valFromOption(match), "page");
    var tmp;
    if (match$1 !== undefined) {
      var value$1 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeNull(value$1);
      if (match$2 !== undefined) {
        tmp = undefined;
      } else {
        var match$3 = Js_json.decodeObject(value$1);
        var tmp$1;
        if (match$3 !== undefined) {
          var value$2 = Caml_option.valFromOption(match$3);
          var match$4 = Js_dict.get(value$2, "id");
          var tmp$2;
          if (match$4 !== undefined) {
            var value$3 = Caml_option.valFromOption(match$4);
            var match$5 = Js_json.decodeNull(value$3);
            if (match$5 !== undefined) {
              tmp$2 = undefined;
            } else {
              var match$6 = Js_json.decodeString(value$3);
              tmp$2 = match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
            }
          } else {
            tmp$2 = undefined;
          }
          var match$7 = Js_dict.get(value$2, "name");
          var tmp$3;
          if (match$7 !== undefined) {
            var value$4 = Caml_option.valFromOption(match$7);
            var match$8 = Js_json.decodeNull(value$4);
            if (match$8 !== undefined) {
              tmp$3 = undefined;
            } else {
              var match$9 = Js_json.decodeString(value$4);
              tmp$3 = match$9 !== undefined ? match$9 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
            }
          } else {
            tmp$3 = undefined;
          }
          var match$10 = Js_dict.get(value$2, "description");
          var tmp$4;
          if (match$10 !== undefined) {
            var value$5 = Caml_option.valFromOption(match$10);
            var match$11 = Js_json.decodeNull(value$5);
            if (match$11 !== undefined) {
              tmp$4 = undefined;
            } else {
              var match$12 = Js_json.decodeString(value$5);
              tmp$4 = match$12 !== undefined ? match$12 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
            }
          } else {
            tmp$4 = undefined;
          }
          var match$13 = Js_dict.get(value$2, "content");
          var tmp$5;
          if (match$13 !== undefined) {
            var value$6 = Caml_option.valFromOption(match$13);
            var match$14 = Js_json.decodeNull(value$6);
            if (match$14 !== undefined) {
              tmp$5 = undefined;
            } else {
              var match$15 = Js_json.decodeString(value$6);
              tmp$5 = match$15 !== undefined ? match$15 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
            }
          } else {
            tmp$5 = undefined;
          }
          var match$16 = Js_dict.get(value$2, "topicId");
          var tmp$6;
          if (match$16 !== undefined) {
            var value$7 = Caml_option.valFromOption(match$16);
            var match$17 = Js_json.decodeNull(value$7);
            if (match$17 !== undefined) {
              tmp$6 = undefined;
            } else {
              var match$18 = Js_json.decodeString(value$7);
              tmp$6 = match$18 !== undefined ? match$18 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$7));
            }
          } else {
            tmp$6 = undefined;
          }
          var match$19 = Js_dict.get(value$2, "notes");
          var tmp$7;
          if (match$19 !== undefined) {
            var value$8 = Caml_option.valFromOption(match$19);
            var match$20 = Js_json.decodeNull(value$8);
            if (match$20 !== undefined) {
              tmp$7 = undefined;
            } else {
              var match$21 = Js_json.decodeArray(value$8);
              tmp$7 = match$21 !== undefined ? match$21.map((function (value) {
                        var match = Js_json.decodeNull(value);
                        if (match !== undefined) {
                          return undefined;
                        } else {
                          var match$1 = Js_json.decodeObject(value);
                          var tmp;
                          if (match$1 !== undefined) {
                            var value$1 = Caml_option.valFromOption(match$1);
                            var match$2 = Js_dict.get(value$1, "id");
                            var tmp$1;
                            if (match$2 !== undefined) {
                              var value$2 = Caml_option.valFromOption(match$2);
                              var match$3 = Js_json.decodeNull(value$2);
                              if (match$3 !== undefined) {
                                tmp$1 = undefined;
                              } else {
                                var match$4 = Js_json.decodeString(value$2);
                                tmp$1 = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                              }
                            } else {
                              tmp$1 = undefined;
                            }
                            var match$5 = Js_dict.get(value$1, "name");
                            var tmp$2;
                            if (match$5 !== undefined) {
                              var value$3 = Caml_option.valFromOption(match$5);
                              var match$6 = Js_json.decodeNull(value$3);
                              if (match$6 !== undefined) {
                                tmp$2 = undefined;
                              } else {
                                var match$7 = Js_json.decodeString(value$3);
                                tmp$2 = match$7 !== undefined ? match$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                              }
                            } else {
                              tmp$2 = undefined;
                            }
                            var match$8 = Js_dict.get(value$1, "description");
                            var tmp$3;
                            if (match$8 !== undefined) {
                              var value$4 = Caml_option.valFromOption(match$8);
                              var match$9 = Js_json.decodeNull(value$4);
                              if (match$9 !== undefined) {
                                tmp$3 = undefined;
                              } else {
                                var match$10 = Js_json.decodeString(value$4);
                                tmp$3 = match$10 !== undefined ? match$10 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
                              }
                            } else {
                              tmp$3 = undefined;
                            }
                            tmp = {
                              id: tmp$1,
                              name: tmp$2,
                              description: tmp$3
                            };
                          } else {
                            tmp = Js_exn.raiseError("graphql_ppx: Object is not a value");
                          }
                          return Caml_option.some(tmp);
                        }
                      })) : Js_exn.raiseError("graphql_ppx: Expected array, got " + JSON.stringify(value$8));
            }
          } else {
            tmp$7 = undefined;
          }
          tmp$1 = {
            id: tmp$2,
            name: tmp$3,
            description: tmp$4,
            content: tmp$5,
            topicId: tmp$6,
            notes: tmp$7
          };
        } else {
          tmp$1 = Js_exn.raiseError("graphql_ppx: Object is not a value");
        }
        tmp = Caml_option.some(tmp$1);
      }
    } else {
      tmp = undefined;
    }
    return {
            page: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make$4(id, param) {
  return {
          query: ppx_printed_query$4,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                  "id",
                  id
                ]]),
          parse: parse$4
        };
}

function makeWithVariables$4(variables) {
  var id = variables.id;
  return {
          query: ppx_printed_query$4,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                  "id",
                  id
                ]]),
          parse: parse$4
        };
}

function ret_type$4(f) {
  return /* module */[];
}

var MT_Ret$4 = /* module */[];

var GetPage = /* module */[
  /* ppx_printed_query */ppx_printed_query$4,
  /* query */ppx_printed_query$4,
  /* parse */parse$4,
  /* make */make$4,
  /* makeWithVariables */makeWithVariables$4,
  /* ret_type */ret_type$4,
  /* MT_Ret */MT_Ret$4
];

var ppx_printed_query$5 = "query note($id: ID!)  {\nnote: note(id: $id)  {\nid  \nname  \ndescription  \ncontent  \npageId  \n}\n\n}\n";

function parse$5(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_dict.get(Caml_option.valFromOption(match), "note");
    var tmp;
    if (match$1 !== undefined) {
      var value$1 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeNull(value$1);
      if (match$2 !== undefined) {
        tmp = undefined;
      } else {
        var match$3 = Js_json.decodeObject(value$1);
        var tmp$1;
        if (match$3 !== undefined) {
          var value$2 = Caml_option.valFromOption(match$3);
          var match$4 = Js_dict.get(value$2, "id");
          var tmp$2;
          if (match$4 !== undefined) {
            var value$3 = Caml_option.valFromOption(match$4);
            var match$5 = Js_json.decodeNull(value$3);
            if (match$5 !== undefined) {
              tmp$2 = undefined;
            } else {
              var match$6 = Js_json.decodeString(value$3);
              tmp$2 = match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
            }
          } else {
            tmp$2 = undefined;
          }
          var match$7 = Js_dict.get(value$2, "name");
          var tmp$3;
          if (match$7 !== undefined) {
            var value$4 = Caml_option.valFromOption(match$7);
            var match$8 = Js_json.decodeNull(value$4);
            if (match$8 !== undefined) {
              tmp$3 = undefined;
            } else {
              var match$9 = Js_json.decodeString(value$4);
              tmp$3 = match$9 !== undefined ? match$9 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
            }
          } else {
            tmp$3 = undefined;
          }
          var match$10 = Js_dict.get(value$2, "description");
          var tmp$4;
          if (match$10 !== undefined) {
            var value$5 = Caml_option.valFromOption(match$10);
            var match$11 = Js_json.decodeNull(value$5);
            if (match$11 !== undefined) {
              tmp$4 = undefined;
            } else {
              var match$12 = Js_json.decodeString(value$5);
              tmp$4 = match$12 !== undefined ? match$12 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
            }
          } else {
            tmp$4 = undefined;
          }
          var match$13 = Js_dict.get(value$2, "content");
          var tmp$5;
          if (match$13 !== undefined) {
            var value$6 = Caml_option.valFromOption(match$13);
            var match$14 = Js_json.decodeNull(value$6);
            if (match$14 !== undefined) {
              tmp$5 = undefined;
            } else {
              var match$15 = Js_json.decodeString(value$6);
              tmp$5 = match$15 !== undefined ? match$15 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
            }
          } else {
            tmp$5 = undefined;
          }
          var match$16 = Js_dict.get(value$2, "pageId");
          var tmp$6;
          if (match$16 !== undefined) {
            var value$7 = Caml_option.valFromOption(match$16);
            var match$17 = Js_json.decodeNull(value$7);
            if (match$17 !== undefined) {
              tmp$6 = undefined;
            } else {
              var match$18 = Js_json.decodeString(value$7);
              tmp$6 = match$18 !== undefined ? match$18 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$7));
            }
          } else {
            tmp$6 = undefined;
          }
          tmp$1 = {
            id: tmp$2,
            name: tmp$3,
            description: tmp$4,
            content: tmp$5,
            pageId: tmp$6
          };
        } else {
          tmp$1 = Js_exn.raiseError("graphql_ppx: Object is not a value");
        }
        tmp = Caml_option.some(tmp$1);
      }
    } else {
      tmp = undefined;
    }
    return {
            note: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make$5(id, param) {
  return {
          query: ppx_printed_query$5,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                  "id",
                  id
                ]]),
          parse: parse$5
        };
}

function makeWithVariables$5(variables) {
  var id = variables.id;
  return {
          query: ppx_printed_query$5,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                  "id",
                  id
                ]]),
          parse: parse$5
        };
}

function ret_type$5(f) {
  return /* module */[];
}

var MT_Ret$5 = /* module */[];

var GetNote = /* module */[
  /* ppx_printed_query */ppx_printed_query$5,
  /* query */ppx_printed_query$5,
  /* parse */parse$5,
  /* make */make$5,
  /* makeWithVariables */makeWithVariables$5,
  /* ret_type */ret_type$5,
  /* MT_Ret */MT_Ret$5
];

var ppx_printed_query$6 = "query subjects  {\nsubjects  {\nname  \nid  \ndescription  \nmoduleId  \n}\n\n}\n";

function parse$6(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_dict.get(Caml_option.valFromOption(match), "subjects");
    var tmp;
    if (match$1 !== undefined) {
      var value$1 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeNull(value$1);
      if (match$2 !== undefined) {
        tmp = undefined;
      } else {
        var match$3 = Js_json.decodeArray(value$1);
        tmp = match$3 !== undefined ? match$3.map((function (value) {
                  var match = Js_json.decodeNull(value);
                  if (match !== undefined) {
                    return undefined;
                  } else {
                    var match$1 = Js_json.decodeObject(value);
                    var tmp;
                    if (match$1 !== undefined) {
                      var value$1 = Caml_option.valFromOption(match$1);
                      var match$2 = Js_dict.get(value$1, "name");
                      var tmp$1;
                      if (match$2 !== undefined) {
                        var value$2 = Caml_option.valFromOption(match$2);
                        var match$3 = Js_json.decodeNull(value$2);
                        if (match$3 !== undefined) {
                          tmp$1 = undefined;
                        } else {
                          var match$4 = Js_json.decodeString(value$2);
                          tmp$1 = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                        }
                      } else {
                        tmp$1 = undefined;
                      }
                      var match$5 = Js_dict.get(value$1, "id");
                      var tmp$2;
                      if (match$5 !== undefined) {
                        var value$3 = Caml_option.valFromOption(match$5);
                        var match$6 = Js_json.decodeNull(value$3);
                        if (match$6 !== undefined) {
                          tmp$2 = undefined;
                        } else {
                          var match$7 = Js_json.decodeString(value$3);
                          tmp$2 = match$7 !== undefined ? match$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                        }
                      } else {
                        tmp$2 = undefined;
                      }
                      var match$8 = Js_dict.get(value$1, "description");
                      var tmp$3;
                      if (match$8 !== undefined) {
                        var value$4 = Caml_option.valFromOption(match$8);
                        var match$9 = Js_json.decodeNull(value$4);
                        if (match$9 !== undefined) {
                          tmp$3 = undefined;
                        } else {
                          var match$10 = Js_json.decodeString(value$4);
                          tmp$3 = match$10 !== undefined ? match$10 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
                        }
                      } else {
                        tmp$3 = undefined;
                      }
                      var match$11 = Js_dict.get(value$1, "moduleId");
                      var tmp$4;
                      if (match$11 !== undefined) {
                        var value$5 = Caml_option.valFromOption(match$11);
                        var match$12 = Js_json.decodeNull(value$5);
                        if (match$12 !== undefined) {
                          tmp$4 = undefined;
                        } else {
                          var match$13 = Js_json.decodeString(value$5);
                          tmp$4 = match$13 !== undefined ? match$13 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
                        }
                      } else {
                        tmp$4 = undefined;
                      }
                      tmp = {
                        name: tmp$1,
                        id: tmp$2,
                        description: tmp$3,
                        moduleId: tmp$4
                      };
                    } else {
                      tmp = Js_exn.raiseError("graphql_ppx: Object is not a value");
                    }
                    return Caml_option.some(tmp);
                  }
                })) : Js_exn.raiseError("graphql_ppx: Expected array, got " + JSON.stringify(value$1));
      }
    } else {
      tmp = undefined;
    }
    return {
            subjects: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make$6(param) {
  return {
          query: ppx_printed_query$6,
          variables: null,
          parse: parse$6
        };
}

function makeWithVariables$6(param) {
  return {
          query: ppx_printed_query$6,
          variables: null,
          parse: parse$6
        };
}

function ret_type$6(f) {
  return /* module */[];
}

var MT_Ret$6 = /* module */[];

var ListSubjects = /* module */[
  /* ppx_printed_query */ppx_printed_query$6,
  /* query */ppx_printed_query$6,
  /* parse */parse$6,
  /* make */make$6,
  /* makeWithVariables */makeWithVariables$6,
  /* ret_type */ret_type$6,
  /* MT_Ret */MT_Ret$6
];

var ppx_printed_query$7 = "query topics  {\ntopics  {\nname  \nid  \ndescription  \n}\n\n}\n";

function parse$7(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_dict.get(Caml_option.valFromOption(match), "topics");
    var tmp;
    if (match$1 !== undefined) {
      var value$1 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeNull(value$1);
      if (match$2 !== undefined) {
        tmp = undefined;
      } else {
        var match$3 = Js_json.decodeArray(value$1);
        tmp = match$3 !== undefined ? match$3.map((function (value) {
                  var match = Js_json.decodeNull(value);
                  if (match !== undefined) {
                    return undefined;
                  } else {
                    var match$1 = Js_json.decodeObject(value);
                    var tmp;
                    if (match$1 !== undefined) {
                      var value$1 = Caml_option.valFromOption(match$1);
                      var match$2 = Js_dict.get(value$1, "name");
                      var tmp$1;
                      if (match$2 !== undefined) {
                        var value$2 = Caml_option.valFromOption(match$2);
                        var match$3 = Js_json.decodeNull(value$2);
                        if (match$3 !== undefined) {
                          tmp$1 = undefined;
                        } else {
                          var match$4 = Js_json.decodeString(value$2);
                          tmp$1 = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                        }
                      } else {
                        tmp$1 = undefined;
                      }
                      var match$5 = Js_dict.get(value$1, "id");
                      var tmp$2;
                      if (match$5 !== undefined) {
                        var value$3 = Caml_option.valFromOption(match$5);
                        var match$6 = Js_json.decodeNull(value$3);
                        if (match$6 !== undefined) {
                          tmp$2 = undefined;
                        } else {
                          var match$7 = Js_json.decodeString(value$3);
                          tmp$2 = match$7 !== undefined ? match$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                        }
                      } else {
                        tmp$2 = undefined;
                      }
                      var match$8 = Js_dict.get(value$1, "description");
                      var tmp$3;
                      if (match$8 !== undefined) {
                        var value$4 = Caml_option.valFromOption(match$8);
                        var match$9 = Js_json.decodeNull(value$4);
                        if (match$9 !== undefined) {
                          tmp$3 = undefined;
                        } else {
                          var match$10 = Js_json.decodeString(value$4);
                          tmp$3 = match$10 !== undefined ? match$10 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
                        }
                      } else {
                        tmp$3 = undefined;
                      }
                      tmp = {
                        name: tmp$1,
                        id: tmp$2,
                        description: tmp$3
                      };
                    } else {
                      tmp = Js_exn.raiseError("graphql_ppx: Object is not a value");
                    }
                    return Caml_option.some(tmp);
                  }
                })) : Js_exn.raiseError("graphql_ppx: Expected array, got " + JSON.stringify(value$1));
      }
    } else {
      tmp = undefined;
    }
    return {
            topics: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make$7(param) {
  return {
          query: ppx_printed_query$7,
          variables: null,
          parse: parse$7
        };
}

function makeWithVariables$7(param) {
  return {
          query: ppx_printed_query$7,
          variables: null,
          parse: parse$7
        };
}

function ret_type$7(f) {
  return /* module */[];
}

var MT_Ret$7 = /* module */[];

var ListTopics = /* module */[
  /* ppx_printed_query */ppx_printed_query$7,
  /* query */ppx_printed_query$7,
  /* parse */parse$7,
  /* make */make$7,
  /* makeWithVariables */makeWithVariables$7,
  /* ret_type */ret_type$7,
  /* MT_Ret */MT_Ret$7
];

var ppx_printed_query$8 = "query pages  {\npages  {\nname  \nid  \ndescription  \ncontent  \n}\n\n}\n";

function parse$8(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_dict.get(Caml_option.valFromOption(match), "pages");
    var tmp;
    if (match$1 !== undefined) {
      var value$1 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeNull(value$1);
      if (match$2 !== undefined) {
        tmp = undefined;
      } else {
        var match$3 = Js_json.decodeArray(value$1);
        tmp = match$3 !== undefined ? match$3.map((function (value) {
                  var match = Js_json.decodeNull(value);
                  if (match !== undefined) {
                    return undefined;
                  } else {
                    var match$1 = Js_json.decodeObject(value);
                    var tmp;
                    if (match$1 !== undefined) {
                      var value$1 = Caml_option.valFromOption(match$1);
                      var match$2 = Js_dict.get(value$1, "name");
                      var tmp$1;
                      if (match$2 !== undefined) {
                        var value$2 = Caml_option.valFromOption(match$2);
                        var match$3 = Js_json.decodeNull(value$2);
                        if (match$3 !== undefined) {
                          tmp$1 = undefined;
                        } else {
                          var match$4 = Js_json.decodeString(value$2);
                          tmp$1 = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                        }
                      } else {
                        tmp$1 = undefined;
                      }
                      var match$5 = Js_dict.get(value$1, "id");
                      var tmp$2;
                      if (match$5 !== undefined) {
                        var value$3 = Caml_option.valFromOption(match$5);
                        var match$6 = Js_json.decodeNull(value$3);
                        if (match$6 !== undefined) {
                          tmp$2 = undefined;
                        } else {
                          var match$7 = Js_json.decodeString(value$3);
                          tmp$2 = match$7 !== undefined ? match$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                        }
                      } else {
                        tmp$2 = undefined;
                      }
                      var match$8 = Js_dict.get(value$1, "description");
                      var tmp$3;
                      if (match$8 !== undefined) {
                        var value$4 = Caml_option.valFromOption(match$8);
                        var match$9 = Js_json.decodeNull(value$4);
                        if (match$9 !== undefined) {
                          tmp$3 = undefined;
                        } else {
                          var match$10 = Js_json.decodeString(value$4);
                          tmp$3 = match$10 !== undefined ? match$10 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
                        }
                      } else {
                        tmp$3 = undefined;
                      }
                      var match$11 = Js_dict.get(value$1, "content");
                      var tmp$4;
                      if (match$11 !== undefined) {
                        var value$5 = Caml_option.valFromOption(match$11);
                        var match$12 = Js_json.decodeNull(value$5);
                        if (match$12 !== undefined) {
                          tmp$4 = undefined;
                        } else {
                          var match$13 = Js_json.decodeString(value$5);
                          tmp$4 = match$13 !== undefined ? match$13 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
                        }
                      } else {
                        tmp$4 = undefined;
                      }
                      tmp = {
                        name: tmp$1,
                        id: tmp$2,
                        description: tmp$3,
                        content: tmp$4
                      };
                    } else {
                      tmp = Js_exn.raiseError("graphql_ppx: Object is not a value");
                    }
                    return Caml_option.some(tmp);
                  }
                })) : Js_exn.raiseError("graphql_ppx: Expected array, got " + JSON.stringify(value$1));
      }
    } else {
      tmp = undefined;
    }
    return {
            pages: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make$8(param) {
  return {
          query: ppx_printed_query$8,
          variables: null,
          parse: parse$8
        };
}

function makeWithVariables$8(param) {
  return {
          query: ppx_printed_query$8,
          variables: null,
          parse: parse$8
        };
}

function ret_type$8(f) {
  return /* module */[];
}

var MT_Ret$8 = /* module */[];

var ListPages = /* module */[
  /* ppx_printed_query */ppx_printed_query$8,
  /* query */ppx_printed_query$8,
  /* parse */parse$8,
  /* make */make$8,
  /* makeWithVariables */makeWithVariables$8,
  /* ret_type */ret_type$8,
  /* MT_Ret */MT_Ret$8
];

var ppx_printed_query$9 = "query notes  {\nnotes  {\nname  \nid  \ndescription  \n}\n\n}\n";

function parse$9(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_dict.get(Caml_option.valFromOption(match), "notes");
    var tmp;
    if (match$1 !== undefined) {
      var value$1 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeNull(value$1);
      if (match$2 !== undefined) {
        tmp = undefined;
      } else {
        var match$3 = Js_json.decodeArray(value$1);
        tmp = match$3 !== undefined ? match$3.map((function (value) {
                  var match = Js_json.decodeNull(value);
                  if (match !== undefined) {
                    return undefined;
                  } else {
                    var match$1 = Js_json.decodeObject(value);
                    var tmp;
                    if (match$1 !== undefined) {
                      var value$1 = Caml_option.valFromOption(match$1);
                      var match$2 = Js_dict.get(value$1, "name");
                      var tmp$1;
                      if (match$2 !== undefined) {
                        var value$2 = Caml_option.valFromOption(match$2);
                        var match$3 = Js_json.decodeNull(value$2);
                        if (match$3 !== undefined) {
                          tmp$1 = undefined;
                        } else {
                          var match$4 = Js_json.decodeString(value$2);
                          tmp$1 = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                        }
                      } else {
                        tmp$1 = undefined;
                      }
                      var match$5 = Js_dict.get(value$1, "id");
                      var tmp$2;
                      if (match$5 !== undefined) {
                        var value$3 = Caml_option.valFromOption(match$5);
                        var match$6 = Js_json.decodeNull(value$3);
                        if (match$6 !== undefined) {
                          tmp$2 = undefined;
                        } else {
                          var match$7 = Js_json.decodeString(value$3);
                          tmp$2 = match$7 !== undefined ? match$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                        }
                      } else {
                        tmp$2 = undefined;
                      }
                      var match$8 = Js_dict.get(value$1, "description");
                      var tmp$3;
                      if (match$8 !== undefined) {
                        var value$4 = Caml_option.valFromOption(match$8);
                        var match$9 = Js_json.decodeNull(value$4);
                        if (match$9 !== undefined) {
                          tmp$3 = undefined;
                        } else {
                          var match$10 = Js_json.decodeString(value$4);
                          tmp$3 = match$10 !== undefined ? match$10 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
                        }
                      } else {
                        tmp$3 = undefined;
                      }
                      tmp = {
                        name: tmp$1,
                        id: tmp$2,
                        description: tmp$3
                      };
                    } else {
                      tmp = Js_exn.raiseError("graphql_ppx: Object is not a value");
                    }
                    return Caml_option.some(tmp);
                  }
                })) : Js_exn.raiseError("graphql_ppx: Expected array, got " + JSON.stringify(value$1));
      }
    } else {
      tmp = undefined;
    }
    return {
            notes: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make$9(param) {
  return {
          query: ppx_printed_query$9,
          variables: null,
          parse: parse$9
        };
}

function makeWithVariables$9(param) {
  return {
          query: ppx_printed_query$9,
          variables: null,
          parse: parse$9
        };
}

function ret_type$9(f) {
  return /* module */[];
}

var MT_Ret$9 = /* module */[];

var ListNotes = /* module */[
  /* ppx_printed_query */ppx_printed_query$9,
  /* query */ppx_printed_query$9,
  /* parse */parse$9,
  /* make */make$9,
  /* makeWithVariables */makeWithVariables$9,
  /* ret_type */ret_type$9,
  /* MT_Ret */MT_Ret$9
];

export {
  ListModules ,
  GetModule ,
  GetSubject ,
  GetTopic ,
  GetPage ,
  GetNote ,
  ListSubjects ,
  ListTopics ,
  ListPages ,
  ListNotes ,
  
}
/* No side effect */
