// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Js_exn from "bs-platform/lib/es6/js_exn.js";
import * as Js_dict from "bs-platform/lib/es6/js_dict.js";
import * as Js_json from "bs-platform/lib/es6/js_json.js";
import * as Js_option from "bs-platform/lib/es6/js_option.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";

var ppx_printed_query = "query modules  {\nmodules  {\nname  \nid  \ndescription  \n}\n\n}\n";

function parse(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "modules");
  var tmp;
  if (match !== undefined) {
    var value$2 = Caml_option.valFromOption(match);
    var match$1 = Js_json.decodeNull(value$2);
    tmp = match$1 !== undefined ? undefined : Js_option.getExn(Js_json.decodeArray(value$2)).map((function (value) {
              var match = Js_json.decodeNull(value);
              if (match !== undefined) {
                return ;
              } else {
                var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                var match$1 = Js_dict.get(value$1, "name");
                var tmp;
                if (match$1 !== undefined) {
                  var value$2 = Caml_option.valFromOption(match$1);
                  var match$2 = Js_json.decodeNull(value$2);
                  if (match$2 !== undefined) {
                    tmp = undefined;
                  } else {
                    var match$3 = Js_json.decodeString(value$2);
                    tmp = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                  }
                } else {
                  tmp = undefined;
                }
                var match$4 = Js_dict.get(value$1, "id");
                var tmp$1;
                if (match$4 !== undefined) {
                  var value$3 = Caml_option.valFromOption(match$4);
                  var match$5 = Js_json.decodeNull(value$3);
                  if (match$5 !== undefined) {
                    tmp$1 = undefined;
                  } else {
                    var match$6 = Js_json.decodeString(value$3);
                    tmp$1 = match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                  }
                } else {
                  tmp$1 = undefined;
                }
                var match$7 = Js_dict.get(value$1, "description");
                var tmp$2;
                if (match$7 !== undefined) {
                  var value$4 = Caml_option.valFromOption(match$7);
                  var match$8 = Js_json.decodeNull(value$4);
                  if (match$8 !== undefined) {
                    tmp$2 = undefined;
                  } else {
                    var match$9 = Js_json.decodeString(value$4);
                    tmp$2 = match$9 !== undefined ? match$9 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
                  }
                } else {
                  tmp$2 = undefined;
                }
                return {
                        name: tmp,
                        id: tmp$1,
                        description: tmp$2
                      };
              }
            }));
  } else {
    tmp = undefined;
  }
  return {
          modules: tmp
        };
}

function make(param) {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function makeWithVariables(param) {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function makeVariables(param) {
  return null;
}

function definition_002(graphql_ppx_use_json_variables_fn) {
  return 0;
}

var definition = /* tuple */[
  parse,
  ppx_printed_query,
  definition_002
];

function ret_type(f) {
  return { };
}

var MT_Ret = { };

var ListModules = {
  ppx_printed_query: ppx_printed_query,
  query: ppx_printed_query,
  parse: parse,
  make: make,
  makeWithVariables: makeWithVariables,
  makeVariables: makeVariables,
  definition: definition,
  ret_type: ret_type,
  MT_Ret: MT_Ret
};

var ppx_printed_query$1 = "query module($id: ID!)  {\nmodule_: module(id: $id)  {\nid  \nname  \ndescription  \nsubjects  {\nid  \nname  \ndescription  \n}\n\n}\n\n}\n";

function parse$1(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "module_");
  var tmp;
  if (match !== undefined) {
    var value$2 = Caml_option.valFromOption(match);
    var match$1 = Js_json.decodeNull(value$2);
    if (match$1 !== undefined) {
      tmp = undefined;
    } else {
      var value$3 = Js_option.getExn(Js_json.decodeObject(value$2));
      var match$2 = Js_dict.get(value$3, "id");
      var tmp$1;
      if (match$2 !== undefined) {
        var value$4 = Caml_option.valFromOption(match$2);
        var match$3 = Js_json.decodeNull(value$4);
        if (match$3 !== undefined) {
          tmp$1 = undefined;
        } else {
          var match$4 = Js_json.decodeString(value$4);
          tmp$1 = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
        }
      } else {
        tmp$1 = undefined;
      }
      var match$5 = Js_dict.get(value$3, "name");
      var tmp$2;
      if (match$5 !== undefined) {
        var value$5 = Caml_option.valFromOption(match$5);
        var match$6 = Js_json.decodeNull(value$5);
        if (match$6 !== undefined) {
          tmp$2 = undefined;
        } else {
          var match$7 = Js_json.decodeString(value$5);
          tmp$2 = match$7 !== undefined ? match$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
        }
      } else {
        tmp$2 = undefined;
      }
      var match$8 = Js_dict.get(value$3, "description");
      var tmp$3;
      if (match$8 !== undefined) {
        var value$6 = Caml_option.valFromOption(match$8);
        var match$9 = Js_json.decodeNull(value$6);
        if (match$9 !== undefined) {
          tmp$3 = undefined;
        } else {
          var match$10 = Js_json.decodeString(value$6);
          tmp$3 = match$10 !== undefined ? match$10 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
        }
      } else {
        tmp$3 = undefined;
      }
      var match$11 = Js_dict.get(value$3, "subjects");
      var tmp$4;
      if (match$11 !== undefined) {
        var value$7 = Caml_option.valFromOption(match$11);
        var match$12 = Js_json.decodeNull(value$7);
        tmp$4 = match$12 !== undefined ? undefined : Js_option.getExn(Js_json.decodeArray(value$7)).map((function (value) {
                  var match = Js_json.decodeNull(value);
                  if (match !== undefined) {
                    return ;
                  } else {
                    var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                    var match$1 = Js_dict.get(value$1, "id");
                    var tmp;
                    if (match$1 !== undefined) {
                      var value$2 = Caml_option.valFromOption(match$1);
                      var match$2 = Js_json.decodeNull(value$2);
                      if (match$2 !== undefined) {
                        tmp = undefined;
                      } else {
                        var match$3 = Js_json.decodeString(value$2);
                        tmp = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                      }
                    } else {
                      tmp = undefined;
                    }
                    var match$4 = Js_dict.get(value$1, "name");
                    var tmp$1;
                    if (match$4 !== undefined) {
                      var value$3 = Caml_option.valFromOption(match$4);
                      var match$5 = Js_json.decodeNull(value$3);
                      if (match$5 !== undefined) {
                        tmp$1 = undefined;
                      } else {
                        var match$6 = Js_json.decodeString(value$3);
                        tmp$1 = match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                      }
                    } else {
                      tmp$1 = undefined;
                    }
                    var match$7 = Js_dict.get(value$1, "description");
                    var tmp$2;
                    if (match$7 !== undefined) {
                      var value$4 = Caml_option.valFromOption(match$7);
                      var match$8 = Js_json.decodeNull(value$4);
                      if (match$8 !== undefined) {
                        tmp$2 = undefined;
                      } else {
                        var match$9 = Js_json.decodeString(value$4);
                        tmp$2 = match$9 !== undefined ? match$9 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
                      }
                    } else {
                      tmp$2 = undefined;
                    }
                    return {
                            id: tmp,
                            name: tmp$1,
                            description: tmp$2
                          };
                  }
                }));
      } else {
        tmp$4 = undefined;
      }
      tmp = {
        id: tmp$1,
        name: tmp$2,
        description: tmp$3,
        subjects: tmp$4
      };
    }
  } else {
    tmp = undefined;
  }
  return {
          module_: tmp
        };
}

function make$1(id, param) {
  return {
          query: ppx_printed_query$1,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                    "id",
                    id
                  ]].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$1
        };
}

function makeWithVariables$1(variables) {
  var id = variables.id;
  return {
          query: ppx_printed_query$1,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                    "id",
                    id
                  ]].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$1
        };
}

function makeVariables$1(id, param) {
  return Js_dict.fromArray(/* array */[/* tuple */[
                  "id",
                  id
                ]].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002$1(graphql_ppx_use_json_variables_fn, id, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray(/* array */[/* tuple */[
                      "id",
                      id
                    ]].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition$1 = /* tuple */[
  parse$1,
  ppx_printed_query$1,
  definition_002$1
];

function ret_type$1(f) {
  return { };
}

var MT_Ret$1 = { };

var GetModule = {
  ppx_printed_query: ppx_printed_query$1,
  query: ppx_printed_query$1,
  parse: parse$1,
  make: make$1,
  makeWithVariables: makeWithVariables$1,
  makeVariables: makeVariables$1,
  definition: definition$1,
  ret_type: ret_type$1,
  MT_Ret: MT_Ret$1
};

var ppx_printed_query$2 = "query subject($id: ID!)  {\nsubject: subject(id: $id)  {\nid  \nname  \ndescription  \nmoduleId  \ntopics  {\nid  \nname  \ndescription  \n}\n\n}\n\n}\n";

function parse$2(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "subject");
  var tmp;
  if (match !== undefined) {
    var value$2 = Caml_option.valFromOption(match);
    var match$1 = Js_json.decodeNull(value$2);
    if (match$1 !== undefined) {
      tmp = undefined;
    } else {
      var value$3 = Js_option.getExn(Js_json.decodeObject(value$2));
      var match$2 = Js_dict.get(value$3, "id");
      var tmp$1;
      if (match$2 !== undefined) {
        var value$4 = Caml_option.valFromOption(match$2);
        var match$3 = Js_json.decodeNull(value$4);
        if (match$3 !== undefined) {
          tmp$1 = undefined;
        } else {
          var match$4 = Js_json.decodeString(value$4);
          tmp$1 = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
        }
      } else {
        tmp$1 = undefined;
      }
      var match$5 = Js_dict.get(value$3, "name");
      var tmp$2;
      if (match$5 !== undefined) {
        var value$5 = Caml_option.valFromOption(match$5);
        var match$6 = Js_json.decodeNull(value$5);
        if (match$6 !== undefined) {
          tmp$2 = undefined;
        } else {
          var match$7 = Js_json.decodeString(value$5);
          tmp$2 = match$7 !== undefined ? match$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
        }
      } else {
        tmp$2 = undefined;
      }
      var match$8 = Js_dict.get(value$3, "description");
      var tmp$3;
      if (match$8 !== undefined) {
        var value$6 = Caml_option.valFromOption(match$8);
        var match$9 = Js_json.decodeNull(value$6);
        if (match$9 !== undefined) {
          tmp$3 = undefined;
        } else {
          var match$10 = Js_json.decodeString(value$6);
          tmp$3 = match$10 !== undefined ? match$10 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
        }
      } else {
        tmp$3 = undefined;
      }
      var match$11 = Js_dict.get(value$3, "moduleId");
      var tmp$4;
      if (match$11 !== undefined) {
        var value$7 = Caml_option.valFromOption(match$11);
        var match$12 = Js_json.decodeNull(value$7);
        if (match$12 !== undefined) {
          tmp$4 = undefined;
        } else {
          var match$13 = Js_json.decodeString(value$7);
          tmp$4 = match$13 !== undefined ? match$13 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$7));
        }
      } else {
        tmp$4 = undefined;
      }
      var match$14 = Js_dict.get(value$3, "topics");
      var tmp$5;
      if (match$14 !== undefined) {
        var value$8 = Caml_option.valFromOption(match$14);
        var match$15 = Js_json.decodeNull(value$8);
        tmp$5 = match$15 !== undefined ? undefined : Js_option.getExn(Js_json.decodeArray(value$8)).map((function (value) {
                  var match = Js_json.decodeNull(value);
                  if (match !== undefined) {
                    return ;
                  } else {
                    var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                    var match$1 = Js_dict.get(value$1, "id");
                    var tmp;
                    if (match$1 !== undefined) {
                      var value$2 = Caml_option.valFromOption(match$1);
                      var match$2 = Js_json.decodeNull(value$2);
                      if (match$2 !== undefined) {
                        tmp = undefined;
                      } else {
                        var match$3 = Js_json.decodeString(value$2);
                        tmp = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                      }
                    } else {
                      tmp = undefined;
                    }
                    var match$4 = Js_dict.get(value$1, "name");
                    var tmp$1;
                    if (match$4 !== undefined) {
                      var value$3 = Caml_option.valFromOption(match$4);
                      var match$5 = Js_json.decodeNull(value$3);
                      if (match$5 !== undefined) {
                        tmp$1 = undefined;
                      } else {
                        var match$6 = Js_json.decodeString(value$3);
                        tmp$1 = match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                      }
                    } else {
                      tmp$1 = undefined;
                    }
                    var match$7 = Js_dict.get(value$1, "description");
                    var tmp$2;
                    if (match$7 !== undefined) {
                      var value$4 = Caml_option.valFromOption(match$7);
                      var match$8 = Js_json.decodeNull(value$4);
                      if (match$8 !== undefined) {
                        tmp$2 = undefined;
                      } else {
                        var match$9 = Js_json.decodeString(value$4);
                        tmp$2 = match$9 !== undefined ? match$9 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
                      }
                    } else {
                      tmp$2 = undefined;
                    }
                    return {
                            id: tmp,
                            name: tmp$1,
                            description: tmp$2
                          };
                  }
                }));
      } else {
        tmp$5 = undefined;
      }
      tmp = {
        id: tmp$1,
        name: tmp$2,
        description: tmp$3,
        moduleId: tmp$4,
        topics: tmp$5
      };
    }
  } else {
    tmp = undefined;
  }
  return {
          subject: tmp
        };
}

function make$2(id, param) {
  return {
          query: ppx_printed_query$2,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                    "id",
                    id
                  ]].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$2
        };
}

function makeWithVariables$2(variables) {
  var id = variables.id;
  return {
          query: ppx_printed_query$2,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                    "id",
                    id
                  ]].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$2
        };
}

function makeVariables$2(id, param) {
  return Js_dict.fromArray(/* array */[/* tuple */[
                  "id",
                  id
                ]].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002$2(graphql_ppx_use_json_variables_fn, id, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray(/* array */[/* tuple */[
                      "id",
                      id
                    ]].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition$2 = /* tuple */[
  parse$2,
  ppx_printed_query$2,
  definition_002$2
];

function ret_type$2(f) {
  return { };
}

var MT_Ret$2 = { };

var GetSubject = {
  ppx_printed_query: ppx_printed_query$2,
  query: ppx_printed_query$2,
  parse: parse$2,
  make: make$2,
  makeWithVariables: makeWithVariables$2,
  makeVariables: makeVariables$2,
  definition: definition$2,
  ret_type: ret_type$2,
  MT_Ret: MT_Ret$2
};

var ppx_printed_query$3 = "query topic($id: ID!)  {\ntopic: topic(id: $id)  {\nid  \nname  \ndescription  \nsubjectId  \npages  {\nid  \nname  \ndescription  \n}\n\n}\n\n}\n";

function parse$3(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "topic");
  var tmp;
  if (match !== undefined) {
    var value$2 = Caml_option.valFromOption(match);
    var match$1 = Js_json.decodeNull(value$2);
    if (match$1 !== undefined) {
      tmp = undefined;
    } else {
      var value$3 = Js_option.getExn(Js_json.decodeObject(value$2));
      var match$2 = Js_dict.get(value$3, "id");
      var tmp$1;
      if (match$2 !== undefined) {
        var value$4 = Caml_option.valFromOption(match$2);
        var match$3 = Js_json.decodeNull(value$4);
        if (match$3 !== undefined) {
          tmp$1 = undefined;
        } else {
          var match$4 = Js_json.decodeString(value$4);
          tmp$1 = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
        }
      } else {
        tmp$1 = undefined;
      }
      var match$5 = Js_dict.get(value$3, "name");
      var tmp$2;
      if (match$5 !== undefined) {
        var value$5 = Caml_option.valFromOption(match$5);
        var match$6 = Js_json.decodeNull(value$5);
        if (match$6 !== undefined) {
          tmp$2 = undefined;
        } else {
          var match$7 = Js_json.decodeString(value$5);
          tmp$2 = match$7 !== undefined ? match$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
        }
      } else {
        tmp$2 = undefined;
      }
      var match$8 = Js_dict.get(value$3, "description");
      var tmp$3;
      if (match$8 !== undefined) {
        var value$6 = Caml_option.valFromOption(match$8);
        var match$9 = Js_json.decodeNull(value$6);
        if (match$9 !== undefined) {
          tmp$3 = undefined;
        } else {
          var match$10 = Js_json.decodeString(value$6);
          tmp$3 = match$10 !== undefined ? match$10 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
        }
      } else {
        tmp$3 = undefined;
      }
      var match$11 = Js_dict.get(value$3, "subjectId");
      var tmp$4;
      if (match$11 !== undefined) {
        var value$7 = Caml_option.valFromOption(match$11);
        var match$12 = Js_json.decodeNull(value$7);
        if (match$12 !== undefined) {
          tmp$4 = undefined;
        } else {
          var match$13 = Js_json.decodeString(value$7);
          tmp$4 = match$13 !== undefined ? match$13 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$7));
        }
      } else {
        tmp$4 = undefined;
      }
      var match$14 = Js_dict.get(value$3, "pages");
      var tmp$5;
      if (match$14 !== undefined) {
        var value$8 = Caml_option.valFromOption(match$14);
        var match$15 = Js_json.decodeNull(value$8);
        tmp$5 = match$15 !== undefined ? undefined : Js_option.getExn(Js_json.decodeArray(value$8)).map((function (value) {
                  var match = Js_json.decodeNull(value);
                  if (match !== undefined) {
                    return ;
                  } else {
                    var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                    var match$1 = Js_dict.get(value$1, "id");
                    var tmp;
                    if (match$1 !== undefined) {
                      var value$2 = Caml_option.valFromOption(match$1);
                      var match$2 = Js_json.decodeNull(value$2);
                      if (match$2 !== undefined) {
                        tmp = undefined;
                      } else {
                        var match$3 = Js_json.decodeString(value$2);
                        tmp = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                      }
                    } else {
                      tmp = undefined;
                    }
                    var match$4 = Js_dict.get(value$1, "name");
                    var tmp$1;
                    if (match$4 !== undefined) {
                      var value$3 = Caml_option.valFromOption(match$4);
                      var match$5 = Js_json.decodeNull(value$3);
                      if (match$5 !== undefined) {
                        tmp$1 = undefined;
                      } else {
                        var match$6 = Js_json.decodeString(value$3);
                        tmp$1 = match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                      }
                    } else {
                      tmp$1 = undefined;
                    }
                    var match$7 = Js_dict.get(value$1, "description");
                    var tmp$2;
                    if (match$7 !== undefined) {
                      var value$4 = Caml_option.valFromOption(match$7);
                      var match$8 = Js_json.decodeNull(value$4);
                      if (match$8 !== undefined) {
                        tmp$2 = undefined;
                      } else {
                        var match$9 = Js_json.decodeString(value$4);
                        tmp$2 = match$9 !== undefined ? match$9 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
                      }
                    } else {
                      tmp$2 = undefined;
                    }
                    return {
                            id: tmp,
                            name: tmp$1,
                            description: tmp$2
                          };
                  }
                }));
      } else {
        tmp$5 = undefined;
      }
      tmp = {
        id: tmp$1,
        name: tmp$2,
        description: tmp$3,
        subjectId: tmp$4,
        pages: tmp$5
      };
    }
  } else {
    tmp = undefined;
  }
  return {
          topic: tmp
        };
}

function make$3(id, param) {
  return {
          query: ppx_printed_query$3,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                    "id",
                    id
                  ]].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$3
        };
}

function makeWithVariables$3(variables) {
  var id = variables.id;
  return {
          query: ppx_printed_query$3,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                    "id",
                    id
                  ]].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$3
        };
}

function makeVariables$3(id, param) {
  return Js_dict.fromArray(/* array */[/* tuple */[
                  "id",
                  id
                ]].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002$3(graphql_ppx_use_json_variables_fn, id, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray(/* array */[/* tuple */[
                      "id",
                      id
                    ]].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition$3 = /* tuple */[
  parse$3,
  ppx_printed_query$3,
  definition_002$3
];

function ret_type$3(f) {
  return { };
}

var MT_Ret$3 = { };

var GetTopic = {
  ppx_printed_query: ppx_printed_query$3,
  query: ppx_printed_query$3,
  parse: parse$3,
  make: make$3,
  makeWithVariables: makeWithVariables$3,
  makeVariables: makeVariables$3,
  definition: definition$3,
  ret_type: ret_type$3,
  MT_Ret: MT_Ret$3
};

var ppx_printed_query$4 = "query page($id: ID!)  {\npage: page(id: $id)  {\nid  \nname  \ndescription  \ncontent  \ntopicId  \nnotes  {\nid  \nname  \ndescription  \n}\n\n}\n\n}\n";

function parse$4(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "page");
  var tmp;
  if (match !== undefined) {
    var value$2 = Caml_option.valFromOption(match);
    var match$1 = Js_json.decodeNull(value$2);
    if (match$1 !== undefined) {
      tmp = undefined;
    } else {
      var value$3 = Js_option.getExn(Js_json.decodeObject(value$2));
      var match$2 = Js_dict.get(value$3, "id");
      var tmp$1;
      if (match$2 !== undefined) {
        var value$4 = Caml_option.valFromOption(match$2);
        var match$3 = Js_json.decodeNull(value$4);
        if (match$3 !== undefined) {
          tmp$1 = undefined;
        } else {
          var match$4 = Js_json.decodeString(value$4);
          tmp$1 = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
        }
      } else {
        tmp$1 = undefined;
      }
      var match$5 = Js_dict.get(value$3, "name");
      var tmp$2;
      if (match$5 !== undefined) {
        var value$5 = Caml_option.valFromOption(match$5);
        var match$6 = Js_json.decodeNull(value$5);
        if (match$6 !== undefined) {
          tmp$2 = undefined;
        } else {
          var match$7 = Js_json.decodeString(value$5);
          tmp$2 = match$7 !== undefined ? match$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
        }
      } else {
        tmp$2 = undefined;
      }
      var match$8 = Js_dict.get(value$3, "description");
      var tmp$3;
      if (match$8 !== undefined) {
        var value$6 = Caml_option.valFromOption(match$8);
        var match$9 = Js_json.decodeNull(value$6);
        if (match$9 !== undefined) {
          tmp$3 = undefined;
        } else {
          var match$10 = Js_json.decodeString(value$6);
          tmp$3 = match$10 !== undefined ? match$10 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
        }
      } else {
        tmp$3 = undefined;
      }
      var match$11 = Js_dict.get(value$3, "content");
      var tmp$4;
      if (match$11 !== undefined) {
        var value$7 = Caml_option.valFromOption(match$11);
        var match$12 = Js_json.decodeNull(value$7);
        if (match$12 !== undefined) {
          tmp$4 = undefined;
        } else {
          var match$13 = Js_json.decodeString(value$7);
          tmp$4 = match$13 !== undefined ? match$13 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$7));
        }
      } else {
        tmp$4 = undefined;
      }
      var match$14 = Js_dict.get(value$3, "topicId");
      var tmp$5;
      if (match$14 !== undefined) {
        var value$8 = Caml_option.valFromOption(match$14);
        var match$15 = Js_json.decodeNull(value$8);
        if (match$15 !== undefined) {
          tmp$5 = undefined;
        } else {
          var match$16 = Js_json.decodeString(value$8);
          tmp$5 = match$16 !== undefined ? match$16 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$8));
        }
      } else {
        tmp$5 = undefined;
      }
      var match$17 = Js_dict.get(value$3, "notes");
      var tmp$6;
      if (match$17 !== undefined) {
        var value$9 = Caml_option.valFromOption(match$17);
        var match$18 = Js_json.decodeNull(value$9);
        tmp$6 = match$18 !== undefined ? undefined : Js_option.getExn(Js_json.decodeArray(value$9)).map((function (value) {
                  var match = Js_json.decodeNull(value);
                  if (match !== undefined) {
                    return ;
                  } else {
                    var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                    var match$1 = Js_dict.get(value$1, "id");
                    var tmp;
                    if (match$1 !== undefined) {
                      var value$2 = Caml_option.valFromOption(match$1);
                      var match$2 = Js_json.decodeNull(value$2);
                      if (match$2 !== undefined) {
                        tmp = undefined;
                      } else {
                        var match$3 = Js_json.decodeString(value$2);
                        tmp = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                      }
                    } else {
                      tmp = undefined;
                    }
                    var match$4 = Js_dict.get(value$1, "name");
                    var tmp$1;
                    if (match$4 !== undefined) {
                      var value$3 = Caml_option.valFromOption(match$4);
                      var match$5 = Js_json.decodeNull(value$3);
                      if (match$5 !== undefined) {
                        tmp$1 = undefined;
                      } else {
                        var match$6 = Js_json.decodeString(value$3);
                        tmp$1 = match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                      }
                    } else {
                      tmp$1 = undefined;
                    }
                    var match$7 = Js_dict.get(value$1, "description");
                    var tmp$2;
                    if (match$7 !== undefined) {
                      var value$4 = Caml_option.valFromOption(match$7);
                      var match$8 = Js_json.decodeNull(value$4);
                      if (match$8 !== undefined) {
                        tmp$2 = undefined;
                      } else {
                        var match$9 = Js_json.decodeString(value$4);
                        tmp$2 = match$9 !== undefined ? match$9 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
                      }
                    } else {
                      tmp$2 = undefined;
                    }
                    return {
                            id: tmp,
                            name: tmp$1,
                            description: tmp$2
                          };
                  }
                }));
      } else {
        tmp$6 = undefined;
      }
      tmp = {
        id: tmp$1,
        name: tmp$2,
        description: tmp$3,
        content: tmp$4,
        topicId: tmp$5,
        notes: tmp$6
      };
    }
  } else {
    tmp = undefined;
  }
  return {
          page: tmp
        };
}

function make$4(id, param) {
  return {
          query: ppx_printed_query$4,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                    "id",
                    id
                  ]].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$4
        };
}

function makeWithVariables$4(variables) {
  var id = variables.id;
  return {
          query: ppx_printed_query$4,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                    "id",
                    id
                  ]].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$4
        };
}

function makeVariables$4(id, param) {
  return Js_dict.fromArray(/* array */[/* tuple */[
                  "id",
                  id
                ]].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002$4(graphql_ppx_use_json_variables_fn, id, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray(/* array */[/* tuple */[
                      "id",
                      id
                    ]].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition$4 = /* tuple */[
  parse$4,
  ppx_printed_query$4,
  definition_002$4
];

function ret_type$4(f) {
  return { };
}

var MT_Ret$4 = { };

var GetPage = {
  ppx_printed_query: ppx_printed_query$4,
  query: ppx_printed_query$4,
  parse: parse$4,
  make: make$4,
  makeWithVariables: makeWithVariables$4,
  makeVariables: makeVariables$4,
  definition: definition$4,
  ret_type: ret_type$4,
  MT_Ret: MT_Ret$4
};

var ppx_printed_query$5 = "query note($id: ID!)  {\nnote(id: $id)  {\nid  \nname  \ndescription  \ncontent  \npageId  \n}\n\n}\n";

function parse$5(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "note");
  var tmp;
  if (match !== undefined) {
    var value$2 = Caml_option.valFromOption(match);
    var match$1 = Js_json.decodeNull(value$2);
    if (match$1 !== undefined) {
      tmp = undefined;
    } else {
      var value$3 = Js_option.getExn(Js_json.decodeObject(value$2));
      var match$2 = Js_dict.get(value$3, "id");
      var tmp$1;
      if (match$2 !== undefined) {
        var value$4 = Caml_option.valFromOption(match$2);
        var match$3 = Js_json.decodeNull(value$4);
        if (match$3 !== undefined) {
          tmp$1 = undefined;
        } else {
          var match$4 = Js_json.decodeString(value$4);
          tmp$1 = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
        }
      } else {
        tmp$1 = undefined;
      }
      var match$5 = Js_dict.get(value$3, "name");
      var tmp$2;
      if (match$5 !== undefined) {
        var value$5 = Caml_option.valFromOption(match$5);
        var match$6 = Js_json.decodeNull(value$5);
        if (match$6 !== undefined) {
          tmp$2 = undefined;
        } else {
          var match$7 = Js_json.decodeString(value$5);
          tmp$2 = match$7 !== undefined ? match$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
        }
      } else {
        tmp$2 = undefined;
      }
      var match$8 = Js_dict.get(value$3, "description");
      var tmp$3;
      if (match$8 !== undefined) {
        var value$6 = Caml_option.valFromOption(match$8);
        var match$9 = Js_json.decodeNull(value$6);
        if (match$9 !== undefined) {
          tmp$3 = undefined;
        } else {
          var match$10 = Js_json.decodeString(value$6);
          tmp$3 = match$10 !== undefined ? match$10 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
        }
      } else {
        tmp$3 = undefined;
      }
      var match$11 = Js_dict.get(value$3, "content");
      var tmp$4;
      if (match$11 !== undefined) {
        var value$7 = Caml_option.valFromOption(match$11);
        var match$12 = Js_json.decodeNull(value$7);
        if (match$12 !== undefined) {
          tmp$4 = undefined;
        } else {
          var match$13 = Js_json.decodeString(value$7);
          tmp$4 = match$13 !== undefined ? match$13 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$7));
        }
      } else {
        tmp$4 = undefined;
      }
      var match$14 = Js_dict.get(value$3, "pageId");
      var tmp$5;
      if (match$14 !== undefined) {
        var value$8 = Caml_option.valFromOption(match$14);
        var match$15 = Js_json.decodeNull(value$8);
        if (match$15 !== undefined) {
          tmp$5 = undefined;
        } else {
          var match$16 = Js_json.decodeString(value$8);
          tmp$5 = match$16 !== undefined ? match$16 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$8));
        }
      } else {
        tmp$5 = undefined;
      }
      tmp = {
        id: tmp$1,
        name: tmp$2,
        description: tmp$3,
        content: tmp$4,
        pageId: tmp$5
      };
    }
  } else {
    tmp = undefined;
  }
  return {
          note: tmp
        };
}

function make$5(id, param) {
  return {
          query: ppx_printed_query$5,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                    "id",
                    id
                  ]].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$5
        };
}

function makeWithVariables$5(variables) {
  var id = variables.id;
  return {
          query: ppx_printed_query$5,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                    "id",
                    id
                  ]].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$5
        };
}

function makeVariables$5(id, param) {
  return Js_dict.fromArray(/* array */[/* tuple */[
                  "id",
                  id
                ]].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002$5(graphql_ppx_use_json_variables_fn, id, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray(/* array */[/* tuple */[
                      "id",
                      id
                    ]].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition$5 = /* tuple */[
  parse$5,
  ppx_printed_query$5,
  definition_002$5
];

function ret_type$5(f) {
  return { };
}

var MT_Ret$5 = { };

var GetNote = {
  ppx_printed_query: ppx_printed_query$5,
  query: ppx_printed_query$5,
  parse: parse$5,
  make: make$5,
  makeWithVariables: makeWithVariables$5,
  makeVariables: makeVariables$5,
  definition: definition$5,
  ret_type: ret_type$5,
  MT_Ret: MT_Ret$5
};

var ppx_printed_query$6 = "query subjects  {\nsubjects  {\nname  \nid  \ndescription  \nmoduleId  \n}\n\n}\n";

function parse$6(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "subjects");
  var tmp;
  if (match !== undefined) {
    var value$2 = Caml_option.valFromOption(match);
    var match$1 = Js_json.decodeNull(value$2);
    tmp = match$1 !== undefined ? undefined : Js_option.getExn(Js_json.decodeArray(value$2)).map((function (value) {
              var match = Js_json.decodeNull(value);
              if (match !== undefined) {
                return ;
              } else {
                var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                var match$1 = Js_dict.get(value$1, "name");
                var tmp;
                if (match$1 !== undefined) {
                  var value$2 = Caml_option.valFromOption(match$1);
                  var match$2 = Js_json.decodeNull(value$2);
                  if (match$2 !== undefined) {
                    tmp = undefined;
                  } else {
                    var match$3 = Js_json.decodeString(value$2);
                    tmp = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                  }
                } else {
                  tmp = undefined;
                }
                var match$4 = Js_dict.get(value$1, "id");
                var tmp$1;
                if (match$4 !== undefined) {
                  var value$3 = Caml_option.valFromOption(match$4);
                  var match$5 = Js_json.decodeNull(value$3);
                  if (match$5 !== undefined) {
                    tmp$1 = undefined;
                  } else {
                    var match$6 = Js_json.decodeString(value$3);
                    tmp$1 = match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                  }
                } else {
                  tmp$1 = undefined;
                }
                var match$7 = Js_dict.get(value$1, "description");
                var tmp$2;
                if (match$7 !== undefined) {
                  var value$4 = Caml_option.valFromOption(match$7);
                  var match$8 = Js_json.decodeNull(value$4);
                  if (match$8 !== undefined) {
                    tmp$2 = undefined;
                  } else {
                    var match$9 = Js_json.decodeString(value$4);
                    tmp$2 = match$9 !== undefined ? match$9 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
                  }
                } else {
                  tmp$2 = undefined;
                }
                var match$10 = Js_dict.get(value$1, "moduleId");
                var tmp$3;
                if (match$10 !== undefined) {
                  var value$5 = Caml_option.valFromOption(match$10);
                  var match$11 = Js_json.decodeNull(value$5);
                  if (match$11 !== undefined) {
                    tmp$3 = undefined;
                  } else {
                    var match$12 = Js_json.decodeString(value$5);
                    tmp$3 = match$12 !== undefined ? match$12 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
                  }
                } else {
                  tmp$3 = undefined;
                }
                return {
                        name: tmp,
                        id: tmp$1,
                        description: tmp$2,
                        moduleId: tmp$3
                      };
              }
            }));
  } else {
    tmp = undefined;
  }
  return {
          subjects: tmp
        };
}

function make$6(param) {
  return {
          query: ppx_printed_query$6,
          variables: null,
          parse: parse$6
        };
}

function makeWithVariables$6(param) {
  return {
          query: ppx_printed_query$6,
          variables: null,
          parse: parse$6
        };
}

function makeVariables$6(param) {
  return null;
}

function definition_002$6(graphql_ppx_use_json_variables_fn) {
  return 0;
}

var definition$6 = /* tuple */[
  parse$6,
  ppx_printed_query$6,
  definition_002$6
];

function ret_type$6(f) {
  return { };
}

var MT_Ret$6 = { };

var ListSubjects = {
  ppx_printed_query: ppx_printed_query$6,
  query: ppx_printed_query$6,
  parse: parse$6,
  make: make$6,
  makeWithVariables: makeWithVariables$6,
  makeVariables: makeVariables$6,
  definition: definition$6,
  ret_type: ret_type$6,
  MT_Ret: MT_Ret$6
};

var ppx_printed_query$7 = "query topics  {\ntopics  {\nname  \nid  \ndescription  \n}\n\n}\n";

function parse$7(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "topics");
  var tmp;
  if (match !== undefined) {
    var value$2 = Caml_option.valFromOption(match);
    var match$1 = Js_json.decodeNull(value$2);
    tmp = match$1 !== undefined ? undefined : Js_option.getExn(Js_json.decodeArray(value$2)).map((function (value) {
              var match = Js_json.decodeNull(value);
              if (match !== undefined) {
                return ;
              } else {
                var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                var match$1 = Js_dict.get(value$1, "name");
                var tmp;
                if (match$1 !== undefined) {
                  var value$2 = Caml_option.valFromOption(match$1);
                  var match$2 = Js_json.decodeNull(value$2);
                  if (match$2 !== undefined) {
                    tmp = undefined;
                  } else {
                    var match$3 = Js_json.decodeString(value$2);
                    tmp = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                  }
                } else {
                  tmp = undefined;
                }
                var match$4 = Js_dict.get(value$1, "id");
                var tmp$1;
                if (match$4 !== undefined) {
                  var value$3 = Caml_option.valFromOption(match$4);
                  var match$5 = Js_json.decodeNull(value$3);
                  if (match$5 !== undefined) {
                    tmp$1 = undefined;
                  } else {
                    var match$6 = Js_json.decodeString(value$3);
                    tmp$1 = match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                  }
                } else {
                  tmp$1 = undefined;
                }
                var match$7 = Js_dict.get(value$1, "description");
                var tmp$2;
                if (match$7 !== undefined) {
                  var value$4 = Caml_option.valFromOption(match$7);
                  var match$8 = Js_json.decodeNull(value$4);
                  if (match$8 !== undefined) {
                    tmp$2 = undefined;
                  } else {
                    var match$9 = Js_json.decodeString(value$4);
                    tmp$2 = match$9 !== undefined ? match$9 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
                  }
                } else {
                  tmp$2 = undefined;
                }
                return {
                        name: tmp,
                        id: tmp$1,
                        description: tmp$2
                      };
              }
            }));
  } else {
    tmp = undefined;
  }
  return {
          topics: tmp
        };
}

function make$7(param) {
  return {
          query: ppx_printed_query$7,
          variables: null,
          parse: parse$7
        };
}

function makeWithVariables$7(param) {
  return {
          query: ppx_printed_query$7,
          variables: null,
          parse: parse$7
        };
}

function makeVariables$7(param) {
  return null;
}

function definition_002$7(graphql_ppx_use_json_variables_fn) {
  return 0;
}

var definition$7 = /* tuple */[
  parse$7,
  ppx_printed_query$7,
  definition_002$7
];

function ret_type$7(f) {
  return { };
}

var MT_Ret$7 = { };

var ListTopics = {
  ppx_printed_query: ppx_printed_query$7,
  query: ppx_printed_query$7,
  parse: parse$7,
  make: make$7,
  makeWithVariables: makeWithVariables$7,
  makeVariables: makeVariables$7,
  definition: definition$7,
  ret_type: ret_type$7,
  MT_Ret: MT_Ret$7
};

var ppx_printed_query$8 = "query pages  {\npages  {\nname  \nid  \ndescription  \ncontent  \n}\n\n}\n";

function parse$8(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "pages");
  var tmp;
  if (match !== undefined) {
    var value$2 = Caml_option.valFromOption(match);
    var match$1 = Js_json.decodeNull(value$2);
    tmp = match$1 !== undefined ? undefined : Js_option.getExn(Js_json.decodeArray(value$2)).map((function (value) {
              var match = Js_json.decodeNull(value);
              if (match !== undefined) {
                return ;
              } else {
                var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                var match$1 = Js_dict.get(value$1, "name");
                var tmp;
                if (match$1 !== undefined) {
                  var value$2 = Caml_option.valFromOption(match$1);
                  var match$2 = Js_json.decodeNull(value$2);
                  if (match$2 !== undefined) {
                    tmp = undefined;
                  } else {
                    var match$3 = Js_json.decodeString(value$2);
                    tmp = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                  }
                } else {
                  tmp = undefined;
                }
                var match$4 = Js_dict.get(value$1, "id");
                var tmp$1;
                if (match$4 !== undefined) {
                  var value$3 = Caml_option.valFromOption(match$4);
                  var match$5 = Js_json.decodeNull(value$3);
                  if (match$5 !== undefined) {
                    tmp$1 = undefined;
                  } else {
                    var match$6 = Js_json.decodeString(value$3);
                    tmp$1 = match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                  }
                } else {
                  tmp$1 = undefined;
                }
                var match$7 = Js_dict.get(value$1, "description");
                var tmp$2;
                if (match$7 !== undefined) {
                  var value$4 = Caml_option.valFromOption(match$7);
                  var match$8 = Js_json.decodeNull(value$4);
                  if (match$8 !== undefined) {
                    tmp$2 = undefined;
                  } else {
                    var match$9 = Js_json.decodeString(value$4);
                    tmp$2 = match$9 !== undefined ? match$9 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
                  }
                } else {
                  tmp$2 = undefined;
                }
                var match$10 = Js_dict.get(value$1, "content");
                var tmp$3;
                if (match$10 !== undefined) {
                  var value$5 = Caml_option.valFromOption(match$10);
                  var match$11 = Js_json.decodeNull(value$5);
                  if (match$11 !== undefined) {
                    tmp$3 = undefined;
                  } else {
                    var match$12 = Js_json.decodeString(value$5);
                    tmp$3 = match$12 !== undefined ? match$12 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
                  }
                } else {
                  tmp$3 = undefined;
                }
                return {
                        name: tmp,
                        id: tmp$1,
                        description: tmp$2,
                        content: tmp$3
                      };
              }
            }));
  } else {
    tmp = undefined;
  }
  return {
          pages: tmp
        };
}

function make$8(param) {
  return {
          query: ppx_printed_query$8,
          variables: null,
          parse: parse$8
        };
}

function makeWithVariables$8(param) {
  return {
          query: ppx_printed_query$8,
          variables: null,
          parse: parse$8
        };
}

function makeVariables$8(param) {
  return null;
}

function definition_002$8(graphql_ppx_use_json_variables_fn) {
  return 0;
}

var definition$8 = /* tuple */[
  parse$8,
  ppx_printed_query$8,
  definition_002$8
];

function ret_type$8(f) {
  return { };
}

var MT_Ret$8 = { };

var ListPages = {
  ppx_printed_query: ppx_printed_query$8,
  query: ppx_printed_query$8,
  parse: parse$8,
  make: make$8,
  makeWithVariables: makeWithVariables$8,
  makeVariables: makeVariables$8,
  definition: definition$8,
  ret_type: ret_type$8,
  MT_Ret: MT_Ret$8
};

var ppx_printed_query$9 = "query notes  {\nnotes  {\nname  \nid  \ndescription  \n}\n\n}\n";

function parse$9(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "notes");
  var tmp;
  if (match !== undefined) {
    var value$2 = Caml_option.valFromOption(match);
    var match$1 = Js_json.decodeNull(value$2);
    tmp = match$1 !== undefined ? undefined : Js_option.getExn(Js_json.decodeArray(value$2)).map((function (value) {
              var match = Js_json.decodeNull(value);
              if (match !== undefined) {
                return ;
              } else {
                var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                var match$1 = Js_dict.get(value$1, "name");
                var tmp;
                if (match$1 !== undefined) {
                  var value$2 = Caml_option.valFromOption(match$1);
                  var match$2 = Js_json.decodeNull(value$2);
                  if (match$2 !== undefined) {
                    tmp = undefined;
                  } else {
                    var match$3 = Js_json.decodeString(value$2);
                    tmp = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                  }
                } else {
                  tmp = undefined;
                }
                var match$4 = Js_dict.get(value$1, "id");
                var tmp$1;
                if (match$4 !== undefined) {
                  var value$3 = Caml_option.valFromOption(match$4);
                  var match$5 = Js_json.decodeNull(value$3);
                  if (match$5 !== undefined) {
                    tmp$1 = undefined;
                  } else {
                    var match$6 = Js_json.decodeString(value$3);
                    tmp$1 = match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                  }
                } else {
                  tmp$1 = undefined;
                }
                var match$7 = Js_dict.get(value$1, "description");
                var tmp$2;
                if (match$7 !== undefined) {
                  var value$4 = Caml_option.valFromOption(match$7);
                  var match$8 = Js_json.decodeNull(value$4);
                  if (match$8 !== undefined) {
                    tmp$2 = undefined;
                  } else {
                    var match$9 = Js_json.decodeString(value$4);
                    tmp$2 = match$9 !== undefined ? match$9 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
                  }
                } else {
                  tmp$2 = undefined;
                }
                return {
                        name: tmp,
                        id: tmp$1,
                        description: tmp$2
                      };
              }
            }));
  } else {
    tmp = undefined;
  }
  return {
          notes: tmp
        };
}

function make$9(param) {
  return {
          query: ppx_printed_query$9,
          variables: null,
          parse: parse$9
        };
}

function makeWithVariables$9(param) {
  return {
          query: ppx_printed_query$9,
          variables: null,
          parse: parse$9
        };
}

function makeVariables$9(param) {
  return null;
}

function definition_002$9(graphql_ppx_use_json_variables_fn) {
  return 0;
}

var definition$9 = /* tuple */[
  parse$9,
  ppx_printed_query$9,
  definition_002$9
];

function ret_type$9(f) {
  return { };
}

var MT_Ret$9 = { };

var ListNotes = {
  ppx_printed_query: ppx_printed_query$9,
  query: ppx_printed_query$9,
  parse: parse$9,
  make: make$9,
  makeWithVariables: makeWithVariables$9,
  makeVariables: makeVariables$9,
  definition: definition$9,
  ret_type: ret_type$9,
  MT_Ret: MT_Ret$9
};

function stringifyExamType(type_) {
  if (type_ !== -93548357) {
    if (type_ >= 857840266) {
      return "Mock";
    } else {
      return "Comprehensive";
    }
  } else {
    return "Practice";
  }
}

var ppx_printed_query$10 = "query listExams  {\nlistExams  {\nid  \ncategoryId  \nname  \ntype_: type  \ncards  {\nid  \nquestion  \nrationale  \nexamId  \ntopicId  \n}\n\n}\n\n}\n";

function parse$10(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "listExams");
  var tmp;
  if (match !== undefined) {
    var value$2 = Caml_option.valFromOption(match);
    var match$1 = Js_json.decodeNull(value$2);
    tmp = match$1 !== undefined ? undefined : Js_option.getExn(Js_json.decodeArray(value$2)).map((function (value) {
              var match = Js_json.decodeObject(value);
              if (match !== undefined) {
                var value$1 = Caml_option.valFromOption(match);
                var match$1 = Js_dict.get(value$1, "id");
                var field_id;
                if (match$1 !== undefined) {
                  var value$2 = Caml_option.valFromOption(match$1);
                  var match$2 = Js_json.decodeString(value$2);
                  field_id = match$2 !== undefined ? match$2 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                } else {
                  field_id = Js_exn.raiseError("graphql_ppx: Field id on type Exam is missing");
                }
                var match$3 = Js_dict.get(value$1, "categoryId");
                var field_categoryId;
                if (match$3 !== undefined) {
                  var value$3 = Caml_option.valFromOption(match$3);
                  var match$4 = Js_json.decodeString(value$3);
                  field_categoryId = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                } else {
                  field_categoryId = Js_exn.raiseError("graphql_ppx: Field categoryId on type Exam is missing");
                }
                var match$5 = Js_dict.get(value$1, "name");
                var field_name;
                if (match$5 !== undefined) {
                  var value$4 = Caml_option.valFromOption(match$5);
                  var match$6 = Js_json.decodeString(value$4);
                  field_name = match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
                } else {
                  field_name = Js_exn.raiseError("graphql_ppx: Field name on type Exam is missing");
                }
                var match$7 = Js_dict.get(value$1, "type_");
                var field_type_;
                if (match$7 !== undefined) {
                  var value$5 = Caml_option.valFromOption(match$7);
                  var match$8 = Js_json.decodeString(value$5);
                  if (match$8 !== undefined) {
                    var value$6 = match$8;
                    switch (value$6) {
                      case "COMPREHENSIVE" :
                          field_type_ = /* COMPREHENSIVE */-896878028;
                          break;
                      case "MOCK" :
                          field_type_ = /* MOCK */857840266;
                          break;
                      case "PRACTICE" :
                          field_type_ = /* PRACTICE */-93548357;
                          break;
                      default:
                        field_type_ = Js_exn.raiseError("graphql_ppx: Unknown enum variant for ExamType: " + value$6);
                    }
                  } else {
                    field_type_ = Js_exn.raiseError("graphql_ppx: Expected enum value for ExamType, got " + JSON.stringify(value$5));
                  }
                } else {
                  field_type_ = Js_exn.raiseError("graphql_ppx: Field type_ on type Exam is missing");
                }
                var match$9 = Js_dict.get(value$1, "cards");
                var field_cards;
                if (match$9 !== undefined) {
                  var value$7 = Caml_option.valFromOption(match$9);
                  var match$10 = Js_json.decodeNull(value$7);
                  field_cards = match$10 !== undefined ? undefined : Js_option.getExn(Js_json.decodeArray(value$7)).map((function (value) {
                            var match = Js_json.decodeNull(value);
                            if (match !== undefined) {
                              return ;
                            } else {
                              var match$1 = Js_json.decodeObject(value);
                              var tmp;
                              if (match$1 !== undefined) {
                                var value$1 = Caml_option.valFromOption(match$1);
                                var match$2 = Js_dict.get(value$1, "id");
                                var field_id;
                                if (match$2 !== undefined) {
                                  var value$2 = Caml_option.valFromOption(match$2);
                                  var match$3 = Js_json.decodeString(value$2);
                                  field_id = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                                } else {
                                  field_id = Js_exn.raiseError("graphql_ppx: Field id on type Card is missing");
                                }
                                var match$4 = Js_dict.get(value$1, "question");
                                var field_question;
                                if (match$4 !== undefined) {
                                  var value$3 = Caml_option.valFromOption(match$4);
                                  var match$5 = Js_json.decodeString(value$3);
                                  field_question = match$5 !== undefined ? match$5 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                                } else {
                                  field_question = Js_exn.raiseError("graphql_ppx: Field question on type Card is missing");
                                }
                                var match$6 = Js_dict.get(value$1, "rationale");
                                var field_rationale;
                                if (match$6 !== undefined) {
                                  var value$4 = Caml_option.valFromOption(match$6);
                                  var match$7 = Js_json.decodeNull(value$4);
                                  if (match$7 !== undefined) {
                                    field_rationale = undefined;
                                  } else {
                                    var match$8 = Js_json.decodeString(value$4);
                                    field_rationale = match$8 !== undefined ? match$8 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
                                  }
                                } else {
                                  field_rationale = undefined;
                                }
                                var match$9 = Js_dict.get(value$1, "examId");
                                var field_examId;
                                if (match$9 !== undefined) {
                                  var value$5 = Caml_option.valFromOption(match$9);
                                  var match$10 = Js_json.decodeNull(value$5);
                                  if (match$10 !== undefined) {
                                    field_examId = undefined;
                                  } else {
                                    var match$11 = Js_json.decodeString(value$5);
                                    field_examId = match$11 !== undefined ? match$11 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
                                  }
                                } else {
                                  field_examId = undefined;
                                }
                                var match$12 = Js_dict.get(value$1, "topicId");
                                var field_topicId;
                                if (match$12 !== undefined) {
                                  var value$6 = Caml_option.valFromOption(match$12);
                                  var match$13 = Js_json.decodeNull(value$6);
                                  if (match$13 !== undefined) {
                                    field_topicId = undefined;
                                  } else {
                                    var match$14 = Js_json.decodeString(value$6);
                                    field_topicId = match$14 !== undefined ? match$14 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
                                  }
                                } else {
                                  field_topicId = undefined;
                                }
                                tmp = {
                                  id: field_id,
                                  question: field_question,
                                  rationale: field_rationale,
                                  examId: field_examId,
                                  topicId: field_topicId
                                };
                              } else {
                                tmp = Js_exn.raiseError("graphql_ppx: Expected object of type Card, got " + JSON.stringify(value));
                              }
                              return tmp;
                            }
                          }));
                } else {
                  field_cards = undefined;
                }
                return {
                        name: field_name,
                        id: field_id,
                        categoryId: field_categoryId,
                        type_: field_type_,
                        cards: field_cards
                      };
              } else {
                return Js_exn.raiseError("graphql_ppx: Expected object of type Exam, got " + JSON.stringify(value));
              }
            }));
  } else {
    tmp = undefined;
  }
  return {
          listExams: tmp
        };
}

function make$10(param) {
  return {
          query: ppx_printed_query$10,
          variables: null,
          parse: parse$10
        };
}

function makeWithVariables$10(param) {
  return {
          query: ppx_printed_query$10,
          variables: null,
          parse: parse$10
        };
}

function makeVariables$10(param) {
  return null;
}

function definition_002$10(graphql_ppx_use_json_variables_fn) {
  return 0;
}

var definition$10 = /* tuple */[
  parse$10,
  ppx_printed_query$10,
  definition_002$10
];

function ret_type$10(f) {
  return { };
}

var MT_Ret$10 = { };

var ListExams = {
  ppx_printed_query: ppx_printed_query$10,
  query: ppx_printed_query$10,
  parse: parse$10,
  make: make$10,
  makeWithVariables: makeWithVariables$10,
  makeVariables: makeVariables$10,
  definition: definition$10,
  ret_type: ret_type$10,
  MT_Ret: MT_Ret$10
};

var ppx_printed_query$11 = "query getExam($id: ID!)  {\ngetExam(id: $id)  {\nid  \ncategoryId  \nname  \ntype_: type  \ncards  {\nid  \nquestion  \nrationale  \nexamId  \ntopicId  \n}\n\n}\n\n}\n";

function parse$11(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "getExam");
  var tmp;
  if (match !== undefined) {
    var value$2 = Caml_option.valFromOption(match);
    var match$1 = Js_json.decodeNull(value$2);
    if (match$1 !== undefined) {
      tmp = undefined;
    } else {
      var match$2 = Js_json.decodeObject(value$2);
      var tmp$1;
      if (match$2 !== undefined) {
        var value$3 = Caml_option.valFromOption(match$2);
        var match$3 = Js_dict.get(value$3, "id");
        var field_id;
        if (match$3 !== undefined) {
          var value$4 = Caml_option.valFromOption(match$3);
          var match$4 = Js_json.decodeString(value$4);
          field_id = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
        } else {
          field_id = Js_exn.raiseError("graphql_ppx: Field id on type Exam is missing");
        }
        var match$5 = Js_dict.get(value$3, "categoryId");
        var field_categoryId;
        if (match$5 !== undefined) {
          var value$5 = Caml_option.valFromOption(match$5);
          var match$6 = Js_json.decodeString(value$5);
          field_categoryId = match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
        } else {
          field_categoryId = Js_exn.raiseError("graphql_ppx: Field categoryId on type Exam is missing");
        }
        var match$7 = Js_dict.get(value$3, "name");
        var field_name;
        if (match$7 !== undefined) {
          var value$6 = Caml_option.valFromOption(match$7);
          var match$8 = Js_json.decodeString(value$6);
          field_name = match$8 !== undefined ? match$8 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
        } else {
          field_name = Js_exn.raiseError("graphql_ppx: Field name on type Exam is missing");
        }
        var match$9 = Js_dict.get(value$3, "type_");
        var field_type_;
        if (match$9 !== undefined) {
          var value$7 = Caml_option.valFromOption(match$9);
          var match$10 = Js_json.decodeString(value$7);
          if (match$10 !== undefined) {
            var value$8 = match$10;
            switch (value$8) {
              case "COMPREHENSIVE" :
                  field_type_ = /* COMPREHENSIVE */-896878028;
                  break;
              case "MOCK" :
                  field_type_ = /* MOCK */857840266;
                  break;
              case "PRACTICE" :
                  field_type_ = /* PRACTICE */-93548357;
                  break;
              default:
                field_type_ = Js_exn.raiseError("graphql_ppx: Unknown enum variant for ExamType: " + value$8);
            }
          } else {
            field_type_ = Js_exn.raiseError("graphql_ppx: Expected enum value for ExamType, got " + JSON.stringify(value$7));
          }
        } else {
          field_type_ = Js_exn.raiseError("graphql_ppx: Field type_ on type Exam is missing");
        }
        var match$11 = Js_dict.get(value$3, "cards");
        var field_cards;
        if (match$11 !== undefined) {
          var value$9 = Caml_option.valFromOption(match$11);
          var match$12 = Js_json.decodeNull(value$9);
          field_cards = match$12 !== undefined ? undefined : Js_option.getExn(Js_json.decodeArray(value$9)).map((function (value) {
                    var match = Js_json.decodeNull(value);
                    if (match !== undefined) {
                      return ;
                    } else {
                      var match$1 = Js_json.decodeObject(value);
                      var tmp;
                      if (match$1 !== undefined) {
                        var value$1 = Caml_option.valFromOption(match$1);
                        var match$2 = Js_dict.get(value$1, "id");
                        var field_id;
                        if (match$2 !== undefined) {
                          var value$2 = Caml_option.valFromOption(match$2);
                          var match$3 = Js_json.decodeString(value$2);
                          field_id = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                        } else {
                          field_id = Js_exn.raiseError("graphql_ppx: Field id on type Card is missing");
                        }
                        var match$4 = Js_dict.get(value$1, "question");
                        var field_question;
                        if (match$4 !== undefined) {
                          var value$3 = Caml_option.valFromOption(match$4);
                          var match$5 = Js_json.decodeString(value$3);
                          field_question = match$5 !== undefined ? match$5 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                        } else {
                          field_question = Js_exn.raiseError("graphql_ppx: Field question on type Card is missing");
                        }
                        var match$6 = Js_dict.get(value$1, "rationale");
                        var field_rationale;
                        if (match$6 !== undefined) {
                          var value$4 = Caml_option.valFromOption(match$6);
                          var match$7 = Js_json.decodeNull(value$4);
                          if (match$7 !== undefined) {
                            field_rationale = undefined;
                          } else {
                            var match$8 = Js_json.decodeString(value$4);
                            field_rationale = match$8 !== undefined ? match$8 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
                          }
                        } else {
                          field_rationale = undefined;
                        }
                        var match$9 = Js_dict.get(value$1, "examId");
                        var field_examId;
                        if (match$9 !== undefined) {
                          var value$5 = Caml_option.valFromOption(match$9);
                          var match$10 = Js_json.decodeNull(value$5);
                          if (match$10 !== undefined) {
                            field_examId = undefined;
                          } else {
                            var match$11 = Js_json.decodeString(value$5);
                            field_examId = match$11 !== undefined ? match$11 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
                          }
                        } else {
                          field_examId = undefined;
                        }
                        var match$12 = Js_dict.get(value$1, "topicId");
                        var field_topicId;
                        if (match$12 !== undefined) {
                          var value$6 = Caml_option.valFromOption(match$12);
                          var match$13 = Js_json.decodeNull(value$6);
                          if (match$13 !== undefined) {
                            field_topicId = undefined;
                          } else {
                            var match$14 = Js_json.decodeString(value$6);
                            field_topicId = match$14 !== undefined ? match$14 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
                          }
                        } else {
                          field_topicId = undefined;
                        }
                        tmp = {
                          id: field_id,
                          question: field_question,
                          rationale: field_rationale,
                          examId: field_examId,
                          topicId: field_topicId
                        };
                      } else {
                        tmp = Js_exn.raiseError("graphql_ppx: Expected object of type Card, got " + JSON.stringify(value));
                      }
                      return tmp;
                    }
                  }));
        } else {
          field_cards = undefined;
        }
        tmp$1 = {
          name: field_name,
          id: field_id,
          categoryId: field_categoryId,
          type_: field_type_,
          cards: field_cards
        };
      } else {
        tmp$1 = Js_exn.raiseError("graphql_ppx: Expected object of type Exam, got " + JSON.stringify(value$2));
      }
      tmp = tmp$1;
    }
  } else {
    tmp = undefined;
  }
  return {
          getExam: tmp
        };
}

function make$11(id, param) {
  return {
          query: ppx_printed_query$11,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                    "id",
                    id
                  ]].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$11
        };
}

function makeWithVariables$11(variables) {
  var id = variables.id;
  return {
          query: ppx_printed_query$11,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                    "id",
                    id
                  ]].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$11
        };
}

function makeVariables$11(id, param) {
  return Js_dict.fromArray(/* array */[/* tuple */[
                  "id",
                  id
                ]].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002$11(graphql_ppx_use_json_variables_fn, id, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray(/* array */[/* tuple */[
                      "id",
                      id
                    ]].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition$11 = /* tuple */[
  parse$11,
  ppx_printed_query$11,
  definition_002$11
];

function ret_type$11(f) {
  return { };
}

var MT_Ret$11 = { };

var GetExam = {
  ppx_printed_query: ppx_printed_query$11,
  query: ppx_printed_query$11,
  parse: parse$11,
  make: make$11,
  makeWithVariables: makeWithVariables$11,
  makeVariables: makeVariables$11,
  definition: definition$11,
  ret_type: ret_type$11,
  MT_Ret: MT_Ret$11
};

var ppx_printed_query$12 = "query listCategories  {\nlistCategories  {\nid  \ndescription  \nname  \n}\n\n}\n";

function parse$12(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "listCategories");
  var tmp;
  if (match !== undefined) {
    var value$2 = Caml_option.valFromOption(match);
    var match$1 = Js_json.decodeNull(value$2);
    tmp = match$1 !== undefined ? undefined : Js_option.getExn(Js_json.decodeArray(value$2)).map((function (value) {
              var match = Js_json.decodeObject(value);
              if (match !== undefined) {
                var value$1 = Caml_option.valFromOption(match);
                var match$1 = Js_dict.get(value$1, "id");
                var field_id;
                if (match$1 !== undefined) {
                  var value$2 = Caml_option.valFromOption(match$1);
                  var match$2 = Js_json.decodeString(value$2);
                  field_id = match$2 !== undefined ? match$2 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                } else {
                  field_id = Js_exn.raiseError("graphql_ppx: Field id on type Category is missing");
                }
                var match$3 = Js_dict.get(value$1, "description");
                var field_description;
                if (match$3 !== undefined) {
                  var value$3 = Caml_option.valFromOption(match$3);
                  var match$4 = Js_json.decodeString(value$3);
                  field_description = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                } else {
                  field_description = Js_exn.raiseError("graphql_ppx: Field description on type Category is missing");
                }
                var match$5 = Js_dict.get(value$1, "name");
                var field_name;
                if (match$5 !== undefined) {
                  var value$4 = Caml_option.valFromOption(match$5);
                  var match$6 = Js_json.decodeString(value$4);
                  field_name = match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
                } else {
                  field_name = Js_exn.raiseError("graphql_ppx: Field name on type Category is missing");
                }
                return {
                        id: field_id,
                        description: field_description,
                        name: field_name
                      };
              } else {
                return Js_exn.raiseError("graphql_ppx: Expected object of type Category, got " + JSON.stringify(value));
              }
            }));
  } else {
    tmp = undefined;
  }
  return {
          listCategories: tmp
        };
}

function make$12(param) {
  return {
          query: ppx_printed_query$12,
          variables: null,
          parse: parse$12
        };
}

function makeWithVariables$12(param) {
  return {
          query: ppx_printed_query$12,
          variables: null,
          parse: parse$12
        };
}

function makeVariables$12(param) {
  return null;
}

function definition_002$12(graphql_ppx_use_json_variables_fn) {
  return 0;
}

var definition$12 = /* tuple */[
  parse$12,
  ppx_printed_query$12,
  definition_002$12
];

function ret_type$12(f) {
  return { };
}

var MT_Ret$12 = { };

var ListCategories = {
  ppx_printed_query: ppx_printed_query$12,
  query: ppx_printed_query$12,
  parse: parse$12,
  make: make$12,
  makeWithVariables: makeWithVariables$12,
  makeVariables: makeVariables$12,
  definition: definition$12,
  ret_type: ret_type$12,
  MT_Ret: MT_Ret$12
};

export {
  ListModules ,
  GetModule ,
  GetSubject ,
  GetTopic ,
  GetPage ,
  GetNote ,
  ListSubjects ,
  ListTopics ,
  ListPages ,
  ListNotes ,
  stringifyExamType ,
  ListExams ,
  GetExam ,
  ListCategories ,
  
}
/* No side effect */
